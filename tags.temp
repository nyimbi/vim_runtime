!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
g:loaded_abolish	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^let g:loaded_abolish = 1$/;"	v
g:abolish_save_file	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^    let g:abolish_save_file = expand("~\/.vim\/after\/plugin\/abolish.vim")$/;"	v
g:abolish_save_file	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^    let g:abolish_save_file = expand("~\/vimfiles\/after\/plugin\/abolish.vim")$/;"	v
g:abolish_save_file	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^    let g:abolish_save_file = expand("~\/.vim\/after\/plugin\/abolish.vim")$/;"	v
function	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:function(name)$/;"	f
send	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:send(self,func,...)$/;"	f
s:object	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^let s:object = {}$/;"	v
object.clone	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:object.clone(...)$/;"	f
Abolish	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^  let Abolish = {}$/;"	v
throw	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:throw(msg)$/;"	f
words	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:words()$/;"	f
extractopts	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:extractopts(list,opts)$/;"	f
mixedcase	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:mixedcase(word)$/;"	f
camelcase	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:camelcase(word)$/;"	f
snakecase	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:snakecase(word)$/;"	f
uppercase	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:uppercase(word)$/;"	f
dashcase	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:dashcase(word)$/;"	f
spacecase	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:spacecase(word)$/;"	f
dotcase	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:dotcase(word)$/;"	f
titlecase	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:titlecase(word)$/;"	f
create_dictionary	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:create_dictionary(lhs,rhs,opts)$/;"	f
expand_braces	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:expand_braces(dict)$/;"	f
SubComplete	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:SubComplete(A,L,P)$/;"	f
Complete	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:Complete(A,L,P)$/;"	f
s:commands	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^let s:commands = {}$/;"	v
s:commands	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^let s:commands.abstract = s:object.clone()$/;"	v
commands.abstract.dispatch	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:commands.abstract.dispatch(bang,line1,line2,count,args)$/;"	f
commands.abstract.go	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:commands.abstract.go(bang,line1,line2,count,args)$/;"	f
dispatcher	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:dispatcher(bang,line1,line2,count,args)$/;"	f
subvert_dispatcher	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:subvert_dispatcher(bang,line1,line2,count,args)$/;"	f
parse_subvert	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:parse_subvert(bang,line1,line2,count,args)$/;"	f
normalize_options	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:normalize_options(flags)$/;"	f
subesc	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:subesc(pattern)$/;"	f
sort	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:sort(a,b)$/;"	f
pattern	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:pattern(dict,boundaries)$/;"	f
egrep_pattern	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:egrep_pattern(dict,boundaries)$/;"	f
c	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:c()$/;"	f
find_command	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:find_command(cmd,flags,word)$/;"	f
grep_command	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:grep_command(args,bang,flags,word)$/;"	f
s:commands	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^let s:commands.search = s:commands.abstract.clone()$/;"	v
s:commands	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^let s:commands.search.options = {"word": 0, "variable": 0, "flags": ""}$/;"	v
commands.search.process	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:commands.search.process(bang,line1,line2,count,args)$/;"	f
Abolished	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! Abolished()$/;"	f
substitute_command	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:substitute_command(cmd,bad,good,flags)$/;"	f
parse_substitute	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:parse_substitute(bang,line1,line2,count,args)$/;"	f
s:commands	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^let s:commands.substitute = s:commands.abstract.clone()$/;"	v
s:commands	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^let s:commands.substitute.options = {"word": 0, "variable": 0, "flags": "g"}$/;"	v
commands.substitute.process	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:commands.substitute.process(bang,line1,line2,count,args)$/;"	f
badgood	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:badgood(args)$/;"	f
abbreviate_from_dict	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:abbreviate_from_dict(cmd,dict)$/;"	f
s:commands	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^let s:commands.abbrev     = s:commands.abstract.clone()$/;"	v
s:commands	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^let s:commands.abbrev.options = {"buffer":0,"cmdline":0,"delete":0}$/;"	v
commands.abbrev.process	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:commands.abbrev.process(bang,line1,line2,count,args)$/;"	f
s:commands	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^let s:commands.delete   = s:commands.abbrev.clone()$/;"	v
s:commands	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^let s:commands.delete.options.delete = 1$/;"	v
unknown_coercion	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:unknown_coercion(letter,word)$/;"	f
coerce	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^function! s:coerce(transformation)$/;"	f
<Plug>Coerce	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^nnoremap <silent> <Plug>Coerce :<C-U>call <SID>coerce(nr2char(getchar()))<CR>$/;"	m
cr	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^  nmap cr  <Plug>Coerce$/;"	m
Abolish	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^command! -nargs=+ -bang -bar -range=0 -complete=custom,s:Complete Abolish$/;"	c
Subvert	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^command! -nargs=1 -bang -bar -range=0 -complete=custom,s:SubComplete Subvert$/;"	c
S	sources_non_forked/tpope-vim-abolish/plugin/abolish.vim	/^  command -nargs=1 -bang -bar -range=0 -complete=custom,s:SubComplete S$/;"	c
GotoFile	sources_non_forked/open_file_under_cursor.vim/plugin/open_file_under_cursor.vim	/^function! GotoFile(w)$/;"	f
gf	sources_non_forked/open_file_under_cursor.vim/plugin/open_file_under_cursor.vim	/^nnoremap gf :call GotoFile("")<CR>$/;"	m
<C-W>f	sources_non_forked/open_file_under_cursor.vim/plugin/open_file_under_cursor.vim	/^nnoremap <C-W>f :call GotoFile("new")<CR>$/;"	m
<C-W><C-F>	sources_non_forked/open_file_under_cursor.vim/plugin/open_file_under_cursor.vim	/^nnoremap <C-W><C-F> :call GotoFile("new")<CR>$/;"	m
b:did_indent	sources_non_forked/nginx-vim-syntax/indent/nginx.vim	/^let b:did_indent = 1$/;"	v
b:current_syntax	sources_non_forked/nginx-vim-syntax/syntax/nginx.vim	/^let b:current_syntax = "nginx"$/;"	v
b:did_indent	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let b:did_indent = 1$/;"	v
s:cpo_save	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:cpo_save = &cpo$/;"	v
s:js_keywords	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:js_keywords = '^\\s*\\(break\\|case\\|catch\\|continue\\|debugger\\|default\\|delete\\|do\\|else\\|finally\\|for\\|function\\|if\\|in\\|instanceof\\|new\\|return\\|switch\\|this\\|throw\\|try\\|typeof\\|var\\|void\\|while\\|with\\)'$/;"	v
s:syng_strcom	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:syng_strcom = 'string\\|regex\\|comment\\c'$/;"	v
s:syng_string	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:syng_string = 'regex\\c'$/;"	v
s:syng_multiline	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:syng_multiline = 'comment\\c'$/;"	v
s:syng_linecom	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:syng_linecom = 'linecomment\\c'$/;"	v
s:skip_expr	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~ '".s:syng_strcom."'"$/;"	v
s:line_term	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:continuation_regex	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:continuation_regex = '\\%([\\\\*+\/.:]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)' . s:line_term$/;"	v
s:msl_regex	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:msl_regex = '\\%([\\\\*+\/.:([]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)' . s:line_term$/;"	v
s:one_line_scope_regex	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:one_line_scope_regex = '\\<\\%(if\\|else\\|for\\|while\\)\\>[^{;]*' . s:line_term$/;"	v
s:block_regex	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:block_regex = '\\%([{[]\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\)\\=' . s:line_term$/;"	v
s:var_stmt	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:var_stmt = '^\\s*var'$/;"	v
s:comma_first	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:comma_first = '^\\s*,'$/;"	v
s:comma_last	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:comma_last = ',\\s*$'$/;"	v
s:ternary	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:ternary = '^\\s\\+[?|:]'$/;"	v
s:ternary_q	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^let s:ternary_q = '^\\s\\+?'$/;"	v
IsInStringOrComment	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInString	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInMultilineComment	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:IsInMultilineComment(lnum, col)$/;"	f
IsLineComment	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:IsLineComment(lnum, col)$/;"	f
PrevNonBlankNonString	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
GetMSL	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:GetMSL(lnum, in_one_line_scope)$/;"	f
RemoveTrailingComments	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:RemoveTrailingComments(content)$/;"	f
InMultiVarStatement	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:InMultiVarStatement(lnum)$/;"	f
GetVarIndent	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:GetVarIndent(lnum)$/;"	f
LineHasOpeningBrackets	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
Match	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:Match(lnum, regex)$/;"	f
IndentWithContinuation	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:IndentWithContinuation(lnum, ind, width)$/;"	f
InOneLineScope	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:InOneLineScope(lnum)$/;"	f
ExitingOneLineScope	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function s:ExitingOneLineScope(lnum)$/;"	f
GetSolidityIndent	sources_non_forked/sources_non_forked/vim-solidity/indent/solidity.vim	/^function GetSolidityIndent()$/;"	f
b:current_syntax	sources_non_forked/vim-antlr/syntax/antlr4.vim	/^let b:current_syntax = "antlr4"$/;"	v
did_antlr_syntax_inits	sources_non_forked/vim-antlr/syntax/antlr3.vim	/^    let did_antlr_syntax_inits = 1$/;"	v
HiLink	sources_non_forked/vim-antlr/syntax/antlr3.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-antlr/syntax/antlr3.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
target_languages	sources_non_forked/vim-antlr/syntax/antlr3.vim	/^let target_languages = []$/;"	v
extensions	sources_non_forked/vim-antlr/syntax/antlr3.vim	/^let extensions = split(expand('%:t'), '\\.')$/;"	v
buffer	sources_non_forked/vim-antlr/syntax/antlr3.vim	/^  let buffer = join(getline(1, line('$')), "\\n")$/;"	v
antlr_options	sources_non_forked/vim-antlr/syntax/antlr3.vim	/^  let antlr_options = matchstr(buffer, '\\m\\(\\_s\\|;\\)options\\_s\\+{\\_.\\{-\\}}')$/;"	v
lang	sources_non_forked/vim-antlr/syntax/antlr3.vim	/^  let lang=target_languages[-1]$/;"	v
syntax_file	sources_non_forked/vim-antlr/syntax/antlr3.vim	/^  let syntax_file = findfile('syntax\/' . lang . '.vim', &rtp, 1)$/;"	v
b:current_syntax	sources_non_forked/vim-antlr/syntax/antlr3.vim	/^    let b:current_syntax = ''$/;"	v
region_name	sources_non_forked/vim-antlr/syntax/antlr3.vim	/^    let region_name = '@' . lang . 'Language'$/;"	v
b:current_syntax	sources_non_forked/vim-antlr/syntax/antlr3.vim	/^let b:current_syntax = "antlr3"$/;"	v
g:AutoPairsLoaded	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^let g:AutoPairsLoaded = 1$/;"	v
g:AutoPairs	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`'}$/;"	v
g:AutoPairsParens	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsParens = {'(':')', '[':']', '{':'}'}$/;"	v
g:AutoPairsMapBS	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapBS = 1$/;"	v
g:AutoPairsMapCh	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapCh = 1$/;"	v
g:AutoPairsMapCR	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapCR = 1$/;"	v
g:AutoPairsMapSpace	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapSpace = 1$/;"	v
g:AutoPairsCenterLine	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsCenterLine = 1$/;"	v
g:AutoPairsShortcutToggle	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutToggle = '<M-p>'$/;"	v
g:AutoPairsShortcutFastWrap	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutFastWrap = '<M-e>'$/;"	v
g:AutoPairsMoveCharacter	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMoveCharacter = "()[]{}\\"'"$/;"	v
g:AutoPairsShortcutJump	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutJump = '<M-n>'$/;"	v
g:AutoPairsFlyMode	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsFlyMode = 0$/;"	v
g:AutoPairsMultilineClose	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMultilineClose = 1$/;"	v
g:AutoPairsShortcutBackInsert	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutBackInsert = '<M-b>'$/;"	v
g:AutoPairsSmartQuotes	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsSmartQuotes = 1$/;"	v
s:Go	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let s:Go = "\\<C-G>U"$/;"	v
s:Go	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^  let s:Go = ""$/;"	v
s:Left	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^let s:Left = s:Go."\\<LEFT>"$/;"	v
s:Right	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^let s:Right = s:Go."\\<RIGHT>"$/;"	v
g:AutoPairsClosedPairs	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^let g:AutoPairsClosedPairs = {}$/;"	v
AutoPairsInsert	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! AutoPairsInsert(key)$/;"	f
AutoPairsDelete	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! AutoPairsDelete()$/;"	f
AutoPairsJump	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! AutoPairsJump()$/;"	f
s:string_chunk	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^let s:string_chunk = '\\v%(\\\\\\_.|[^\\1]|[\\r\\n]){-}'$/;"	v
s:ss_pattern	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^let s:ss_pattern = '\\v''' . s:string_chunk . ''''$/;"	v
s:ds_pattern	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^let s:ds_pattern = '\\v"'  . s:string_chunk . '"'$/;"	v
RegexpQuote	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^func! s:RegexpQuote(str)$/;"	f
RegexpQuoteInSquare	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^func! s:RegexpQuoteInSquare(str)$/;"	f
FormatChunk	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^func! s:FormatChunk(open, close)$/;"	f
AutoPairsFastWrap	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! AutoPairsFastWrap()$/;"	f
AutoPairsMap	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! AutoPairsMap(key)$/;"	f
AutoPairsToggle	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! AutoPairsToggle()$/;"	f
AutoPairsMoveCharacter	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! AutoPairsMoveCharacter(key)$/;"	f
AutoPairsReturn	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! AutoPairsReturn()$/;"	f
AutoPairsSpace	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! AutoPairsSpace()$/;"	f
AutoPairsBackInsert	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! AutoPairsBackInsert()$/;"	f
AutoPairsInit	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! AutoPairsInit()$/;"	f
ExpandMap	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! s:ExpandMap(map)$/;"	f
AutoPairsTryInit	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^function! AutoPairsTryInit()$/;"	f
<SID>AutoPairsReturn	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^inoremap <silent> <SID>AutoPairsReturn <C-R>=AutoPairsReturn()<CR>$/;"	m
<Plug>AutoPairsReturn	sources_non_forked/auto-pairs/plugin/auto-pairs.vim	/^imap <script> <Plug>AutoPairsReturn <SID>AutoPairsReturn$/;"	m
funcref#Function	sources_non_forked/vim-addon-mw-utils/autoload/funcref.vim	/^function! funcref#Function(name,...)$/;"	f
funcref#Call	sources_non_forked/vim-addon-mw-utils/autoload/funcref.vim	/^function! funcref#Call(...)$/;"	f
s:c	sources_non_forked/vim-addon-mw-utils/autoload/glob.vim	/^let s:c['regex_ignore_directory'] = '\\<\\%([_.]darcs\\|\\.git\\|.svn\\|.hg\\|.cvs\\|.bzr\\)\\>'$/;"	v
s:c	sources_non_forked/vim-addon-mw-utils/autoload/glob.vim	/^let s:c['glob_cache'] = get(s:c, 'glob_cache', {})$/;"	v
s:glob_cache	sources_non_forked/vim-addon-mw-utils/autoload/glob.vim	/^let s:glob_cache = s:c['glob_cache']$/;"	v
glob#Glob	sources_non_forked/vim-addon-mw-utils/autoload/glob.vim	/^fun! glob#Glob(pattern, ...)$/;"	f
s:c	sources_non_forked/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^let s:c['cache_dir'] = get(s:c, 'cache_dir', expand('$HOME').'\/.vim-cache')$/;"	v
s:c	sources_non_forked/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^let s:c['scanned_files'] = get(s:c, 'scanned_files', {})$/;"	v
s:scanned_files	sources_non_forked/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^let s:scanned_files = s:c['scanned_files']$/;"	v
s:define_cache_file	sources_non_forked/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^let s:define_cache_file = "let this_dir = s:c['cache_dir'].'\/cached-file-contents' | let cache_file = expand(this_dir.'\/'.substitute(string([func_as_string, a:file]),'[[\\\\]{}:\/\\\\,''\\"# ]\\\\+','_','g'))"$/;"	v
cached_file_contents#CachedFileContents	sources_non_forked/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^function! cached_file_contents#CachedFileContents(file, func, ...) abort$/;"	f
cached_file_contents#ClearScanCache	sources_non_forked/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^fun! cached_file_contents#ClearScanCache()$/;"	f
cached_file_contents#Test	sources_non_forked/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^fun! cached_file_contents#Test()$/;"	f
tovl#ui#filter_list#ListTest	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^fun! tovl#ui#filter_list#ListTest()$/;"	f
Intersection	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^fun! s:Intersection(a, b)$/;"	f
tovl#ui#filter_list#ListTestGotoLineCurrentBuf	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^fun! tovl#ui#filter_list#ListTestGotoLineCurrentBuf()$/;"	f
tovl#ui#filter_list#ListView	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^fun! tovl#ui#filter_list#ListView(opts)$/;"	f
d.NewBufferAndInit	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.NewBufferAndInit()$/;"	f
d.ToggleAlignment	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.ToggleAlignment()$/;"	f
d.ShowAppliedFilters	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.ShowAppliedFilters()$/;"	f
d.RemoveFilters	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.RemoveFilters()$/;"	f
d.Continue	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.Continue()$/;"	f
d.DoContinue	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.DoContinue(v)$/;"	f
d.MapToOriginal	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.MapToOriginal(v)$/;"	f
d.CurrentItem	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.CurrentItem()$/;"	f
d.FilteredItems	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.FilteredItems()$/;"	f
d.UpdateDisplay	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.UpdateDisplay()$/;"	f
d.FilterItem	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.FilterItem(items, filter, cursorAt)$/;"	f
d.SelectByIdOrFilter	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.SelectByIdOrFilter()$/;"	f
d.FilterFromKeyboard	sources_non_forked/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.FilterFromKeyboard(keep, start, ...)$/;"	f
TOVLWrite	sources_non_forked/vim-addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^augroup TOVLWrite$/;"	a
tovl#scratch_buffer#KeepIntactLineNr	sources_non_forked/vim-addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#KeepIntactLineNr()$/;"	f
tovl#scratch_buffer#ScratchBuffer	sources_non_forked/vim-addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#ScratchBuffer(opts)$/;"	f
tovl#scratch_buffer#Write	sources_non_forked/vim-addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#Write()$/;"	f
tovl#scratch_buffer#GetContents	sources_non_forked/vim-addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#GetContents()$/;"	f
tovl#scratch_buffer#Help	sources_non_forked/vim-addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#Help()$/;"	f
env_reload#ReloadEnv	sources_non_forked/vim-addon-mw-utils/autoload/env_reload.vim	/^fun! env_reload#ReloadEnv(bash_export_command_output)$/;"	f
tiny_cmd#Put	sources_non_forked/vim-addon-mw-utils/autoload/tiny_cmd.vim	/^fun! tiny_cmd#Put(a)$/;"	f
tiny_cmd#Get	sources_non_forked/vim-addon-mw-utils/autoload/tiny_cmd.vim	/^fun! tiny_cmd#Get(nr)$/;"	f
tiny_cmd#Pop	sources_non_forked/vim-addon-mw-utils/autoload/tiny_cmd.vim	/^fun! tiny_cmd#Pop(nr)$/;"	f
buf_utils#GotoBuf	sources_non_forked/vim-addon-mw-utils/autoload/buf_utils.vim	/^fun! buf_utils#GotoBuf(buf_identifier, opts)$/;"	f
b:did_indent	sources_non_forked/rust.vim/indent/rust.vim	/^let b:did_indent = 1$/;"	v
get_line_trimmed	sources_non_forked/rust.vim/indent/rust.vim	/^function! s:get_line_trimmed(lnum)$/;"	f
is_string_comment	sources_non_forked/rust.vim/indent/rust.vim	/^function! s:is_string_comment(lnum, col)$/;"	f
GetRustIndent	sources_non_forked/rust.vim/indent/rust.vim	/^function GetRustIndent(lnum)$/;"	f
b:did_ftplugin	sources_non_forked/rust.vim/ftplugin/rust.vim	/^let b:did_ftplugin = 1$/;"	v
s:save_cpo	sources_non_forked/rust.vim/ftplugin/rust.vim	/^let s:save_cpo = &cpo$/;"	v
b:rust_original_delimitMate_excluded_regions	sources_non_forked/rust.vim/ftplugin/rust.vim	/^		let b:rust_original_delimitMate_excluded_regions = b:delimitMate_excluded_regions$/;"	v
b:delimitMate_excluded_regions	sources_non_forked/rust.vim/ftplugin/rust.vim	/^	let b:delimitMate_excluded_regions = delimitMate#Get("excluded_regions") . ',rustLifetimeCandidate,rustGenericLifetimeCandidate'$/;"	v
b:rust_set_foldmethod	sources_non_forked/rust.vim/ftplugin/rust.vim	/^	let b:rust_set_foldmethod=1$/;"	v
b:rust_set_conceallevel	sources_non_forked/rust.vim/ftplugin/rust.vim	/^	let b:rust_set_conceallevel=1$/;"	v
[[	sources_non_forked/rust.vim/ftplugin/rust.vim	/^nnoremap <silent> <buffer> [[ :call rust#Jump('n', 'Back')<CR>$/;"	m
]]	sources_non_forked/rust.vim/ftplugin/rust.vim	/^nnoremap <silent> <buffer> ]] :call rust#Jump('n', 'Forward')<CR>$/;"	m
[[	sources_non_forked/rust.vim/ftplugin/rust.vim	/^onoremap <silent> <buffer> [[ :call rust#Jump('o', 'Back')<CR>$/;"	m
]]	sources_non_forked/rust.vim/ftplugin/rust.vim	/^onoremap <silent> <buffer> ]] :call rust#Jump('o', 'Forward')<CR>$/;"	m
RustRun	sources_non_forked/rust.vim/ftplugin/rust.vim	/^command! -nargs=* -complete=file -bang -bar -buffer RustRun call rust#Run(<bang>0, [<f-args>])$/;"	c
RustExpand	sources_non_forked/rust.vim/ftplugin/rust.vim	/^command! -nargs=* -complete=customlist,rust#CompleteExpand -bang -bar -buffer RustExpand call rust#Expand(<bang>0, [<f-args>])$/;"	c
RustEmitIr	sources_non_forked/rust.vim/ftplugin/rust.vim	/^command! -nargs=* -bar -buffer RustEmitIr call rust#Emit("ir", [<f-args>])$/;"	c
RustEmitAsm	sources_non_forked/rust.vim/ftplugin/rust.vim	/^command! -nargs=* -bar -buffer RustEmitAsm call rust#Emit("asm", [<f-args>])$/;"	c
<D-r>	sources_non_forked/rust.vim/ftplugin/rust.vim	/^nnoremap <silent> <buffer> <D-r> :RustRun<CR>$/;"	m
<D-R>	sources_non_forked/rust.vim/ftplugin/rust.vim	/^nnoremap <buffer> <D-R> :RustRun! <C-r>=join(b:rust_last_rustc_args)<CR><C-\\>erust#AppendCmdLine(' -- ' . join(b:rust_last_args))<CR>$/;"	m
b:rust_last_rustc_args	sources_non_forked/rust.vim/ftplugin/rust.vim	/^	let b:rust_last_rustc_args = []$/;"	v
b:rust_last_args	sources_non_forked/rust.vim/ftplugin/rust.vim	/^	let b:rust_last_args = []$/;"	v
b:undo_ftplugin	sources_non_forked/rust.vim/ftplugin/rust.vim	/^let b:undo_ftplugin = "$/;"	v
g:loaded_syntastic_rust_rustc_checker	sources_non_forked/rust.vim/syntax_checkers/rust/rustc.vim	/^let g:loaded_syntastic_rust_rustc_checker = 1$/;"	v
s:save_cpo	sources_non_forked/rust.vim/syntax_checkers/rust/rustc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_rust_rustc_GetLocList	sources_non_forked/rust.vim/syntax_checkers/rust/rustc.vim	/^function! SyntaxCheckers_rust_rustc_GetLocList() dict$/;"	f
g:loaded_syntastic_rust_filetype	sources_non_forked/rust.vim/plugin/rust.vim	/^let g:loaded_syntastic_rust_filetype = 1$/;"	v
s:save_cpo	sources_non_forked/rust.vim/plugin/rust.vim	/^let s:save_cpo = &cpo$/;"	v
g:syntastic_extra_filetypes	sources_non_forked/rust.vim/plugin/rust.vim	/^    let g:syntastic_extra_filetypes = ['rust']$/;"	v
rust#Jump	sources_non_forked/rust.vim/autoload/rust.vim	/^function! rust#Jump(mode, function) range$/;"	f
Jump_Back	sources_non_forked/rust.vim/autoload/rust.vim	/^function! s:Jump_Back()$/;"	f
Jump_Forward	sources_non_forked/rust.vim/autoload/rust.vim	/^function! s:Jump_Forward()$/;"	f
rust#Run	sources_non_forked/rust.vim/autoload/rust.vim	/^function! rust#Run(bang, args)$/;"	f
Run	sources_non_forked/rust.vim/autoload/rust.vim	/^function! s:Run(path, rustc_args, args)$/;"	f
rust#Expand	sources_non_forked/rust.vim/autoload/rust.vim	/^function! rust#Expand(bang, args)$/;"	f
Expand	sources_non_forked/rust.vim/autoload/rust.vim	/^function! s:Expand(path, pretty, args)$/;"	f
rust#CompleteExpand	sources_non_forked/rust.vim/autoload/rust.vim	/^function! rust#CompleteExpand(lead, line, pos)$/;"	f
rust#Emit	sources_non_forked/rust.vim/autoload/rust.vim	/^function! rust#Emit(type, args)$/;"	f
Emit	sources_non_forked/rust.vim/autoload/rust.vim	/^function! s:Emit(path, type, args)$/;"	f
WithPath	sources_non_forked/rust.vim/autoload/rust.vim	/^function! s:WithPath(func, ...)$/;"	f
rust#AppendCmdLine	sources_non_forked/rust.vim/autoload/rust.vim	/^function! rust#AppendCmdLine(text)$/;"	f
RmDir	sources_non_forked/rust.vim/autoload/rust.vim	/^function! s:RmDir(path)$/;"	f
b:current_syntax	sources_non_forked/rust.vim/syntax/rust.vim	/^let b:current_syntax = "rust"$/;"	v
current_compiler	sources_non_forked/rust.vim/compiler/cargo.vim	/^let current_compiler = "cargo"$/;"	v
CompilerSet	sources_non_forked/rust.vim/compiler/cargo.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cargo_manifest_name	sources_non_forked/rust.vim/compiler/cargo.vim	/^let s:cargo_manifest_name = get(g:, 'cargo_manifest_name', 'Cargo.toml')$/;"	v
is_absolute	sources_non_forked/rust.vim/compiler/cargo.vim	/^function! s:is_absolute(path)$/;"	f
s:local_manifest	sources_non_forked/rust.vim/compiler/cargo.vim	/^let s:local_manifest = findfile(s:cargo_manifest_name, '.;')$/;"	v
s:local_manifest	sources_non_forked/rust.vim/compiler/cargo.vim	/^    let s:local_manifest = fnamemodify(s:local_manifest, ':p:h').'\/'$/;"	v
cargo	sources_non_forked/rust.vim/compiler/cargo.vim	/^    augroup cargo$/;"	a
FixPaths	sources_non_forked/rust.vim/compiler/cargo.vim	/^    function! s:FixPaths()$/;"	f
current_compiler	sources_non_forked/rust.vim/compiler/rustc.vim	/^let current_compiler = "rustc"$/;"	v
s:cpo_save	sources_non_forked/rust.vim/compiler/rustc.vim	/^let s:cpo_save = &cpo$/;"	v
CompilerSet	sources_non_forked/rust.vim/compiler/rustc.vim	/^	command -nargs=* CompilerSet setlocal <args>$/;"	c
s:save_cpo	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:save_cpo = &cpo$/;"	v
init_settings	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^function! s:init_settings(settings)$/;"	f
s:settings	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:settings = {$/;"	v
s:settings_if_default	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:settings_if_default = {$/;"	v
s:default_insert_maps	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_insert_maps = {}$/;"	v
s:default_normal_maps	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_normal_maps = {'!':1, '@':1, '=':1, 'q':1, 'r':1, 't':1, 'T':1, 'y':1, '[':1, ']':1, '\\':1, 'd':1, 'f':1, 'F':1, 'g':1, '"':1, 'z':1, 'c':1, 'm':1, '<':1, '>':1}$/;"	v
s:default_visual_maps	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_visual_maps = {'i':1, 'a':1, 'f':1, 'F':1, 't':1, 'T':1}$/;"	v
g:multi_cursor_insert_maps	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_insert_maps =$/;"	v
g:multi_cursor_normal_maps	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_normal_maps =$/;"	v
g:multi_cursor_visual_maps	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_visual_maps =$/;"	v
g:multi_cursor_start_word_key	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^    let g:multi_cursor_start_word_key = g:multi_cursor_start_key$/;"	v
g:multi_cursor_start_word_key	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^    let g:multi_cursor_start_word_key = g:multi_cursor_next_key$/;"	v
MultipleCursorsFind	sources_non_forked/vim-multiple-cursors/plugin/multiple_cursors.vim	/^command! -nargs=1 -range=% MultipleCursorsFind$/;"	c
set_file_content	sources_non_forked/vim-multiple-cursors/spec/benchmark_spec.rb	/^def set_file_content(string)$/;"	f
get_file_content	sources_non_forked/vim-multiple-cursors/spec/benchmark_spec.rb	/^def get_file_content()$/;"	f
before	sources_non_forked/vim-multiple-cursors/spec/benchmark_spec.rb	/^def before(string)$/;"	f
after	sources_non_forked/vim-multiple-cursors/spec/benchmark_spec.rb	/^def after(string)$/;"	f
type	sources_non_forked/vim-multiple-cursors/spec/benchmark_spec.rb	/^def type(string)$/;"	f
set_file_content	sources_non_forked/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def set_file_content(string)$/;"	f
get_file_content	sources_non_forked/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def get_file_content()$/;"	f
before	sources_non_forked/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def before(string)$/;"	f
after	sources_non_forked/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def after(string)$/;"	f
type	sources_non_forked/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def type(string)$/;"	f
s:special_keys	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:special_keys = {$/;"	v
s:hi_group_cursor	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:hi_group_cursor = 'multiple_cursors_cursor'$/;"	v
s:hi_group_visual	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:hi_group_visual = 'multiple_cursors_visual'$/;"	v
s:before_function_called	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:before_function_called = 0$/;"	v
s:use_word_boundary	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:use_word_boundary = 1$/;"	v
s:paste_buffer_temporary_text	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:paste_buffer_temporary_text = ''$/;"	v
s:paste_buffer_temporary_type	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:paste_buffer_temporary_type = ''$/;"	v
<Plug>(multiple-cursors-input)	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-input) <C-o>:call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-input)	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-input) :call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-apply)	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-apply) <C-o>:call <SID>apply_user_input_next('i')<CR>$/;"	m
<Plug>(multiple-cursors-apply)	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-apply) :call <SID>apply_user_input_next('n')<CR>$/;"	m
<Plug>(multiple-cursors-detect)	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-detect) <C-o>:call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-detect)	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-detect) :call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-wait)	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-wait) <C-o>:call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug>(multiple-cursors-wait)	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-wait) :call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug>(multiple-cursors-prev)	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-prev) :<C-u>call multiple_cursors#prev()<CR>$/;"	m
<Plug>(multiple-cursors-skip)	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-skip) :<C-u>call multiple_cursors#skip()<CR>$/;"	m
<Plug>(multiple-cursors-new)	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-new) :<C-u>call multiple_cursors#new('v', 0)<CR>$/;"	m
<Plug>(multiple-cursors-new-word)	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-new-word) :<C-u>call multiple_cursors#new('v', 1)<CR>$/;"	m
multiple_cursors#debug	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#debug()$/;"	f
multiple_cursors#get_latency_debug_file	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#get_latency_debug_file()$/;"	f
fire_pre_triggers	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:fire_pre_triggers()$/;"	f
multiple_cursors#new	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#new(mode, word_boundary)$/;"	f
multiple_cursors#quit	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#quit()$/;"	f
multiple_cursors#prev	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#prev()$/;"	f
multiple_cursors#skip	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#skip()$/;"	f
multiple_cursors#find	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#find(start, end, pattern)$/;"	f
s:Cursor	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:Cursor = {}$/;"	v
Cursor.new	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.new(position)$/;"	f
Cursor.line	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.line() dict$/;"	f
Cursor.column	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.column() dict$/;"	f
Cursor.move	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.move(line, column) dict$/;"	f
Cursor.update_position	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_position(pos) dict$/;"	f
Cursor.update_highlight	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_highlight() dict$/;"	f
Cursor.update_line_length	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_line_length() dict$/;"	f
Cursor.update_visual_selection	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_visual_selection(region) dict$/;"	f
Cursor.remove_visual_selection	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.remove_visual_selection() dict$/;"	f
Cursor.restore_unnamed_register	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.restore_unnamed_register() dict$/;"	f
Cursor.save_unnamed_register	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.save_unnamed_register() dict$/;"	f
s:CursorManager	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:CursorManager = {}$/;"	v
CursorManager.new	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.new()$/;"	f
CursorManager.reset	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reset(restore_view, restore_setting, ...) dict$/;"	f
CursorManager.is_empty	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.is_empty() dict$/;"	f
CursorManager.size	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.size() dict$/;"	f
CursorManager.get_current	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.get_current() dict$/;"	f
CursorManager.get	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.get(i) dict$/;"	f
CursorManager.delete_current	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.delete_current() dict$/;"	f
CursorManager.remove_highlight	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.remove_highlight(hi_id) dict$/;"	f
CursorManager.debug	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.debug() dict$/;"	f
CursorManager.update_current	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.update_current() dict$/;"	f
CursorManager.next	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.next() dict$/;"	f
CursorManager.start_loop	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.start_loop() dict$/;"	f
CursorManager.loop_done	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.loop_done() dict$/;"	f
CursorManager.initialize	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.initialize() dict$/;"	f
CursorManager.restore_user_settings	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.restore_user_settings() dict$/;"	f
CursorManager.reposition_all_within_region	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reposition_all_within_region(start) dict$/;"	f
CursorManager.reapply_visual_selection	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reapply_visual_selection() dict$/;"	f
CursorManager.add	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.add(pos, ...) dict$/;"	f
s:char	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:char = ''$/;"	v
s:saved_char	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_char = ''$/;"	v
s:from_mode	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:from_mode = ''$/;"	v
s:to_mode	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:to_mode = ''$/;"	v
s:saved_linecount	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_linecount = -1$/;"	v
s:saved_line	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_line = 0$/;"	v
s:bad_input	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:bad_input = 0$/;"	v
s:cm	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:cm = s:CursorManager.new()$/;"	v
pos	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:pos(mark)$/;"	f
region	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:region(start_mark, end_mark)$/;"	f
exit_visual_mode	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:exit_visual_mode()$/;"	f
select_in_visual_mode	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:select_in_visual_mode(region)$/;"	f
update_visual_markers	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:update_visual_markers(region)$/;"	f
find_next	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:find_next(text)$/;"	f
highlight_cursor	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:highlight_cursor(pos)$/;"	f
compare_pos	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:compare_pos(l, r)$/;"	f
highlight_region	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:highlight_region(region)$/;"	f
revert_mode	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:revert_mode(from, to)$/;"	f
s:saved_keys	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_keys = ""$/;"	v
feedkeys	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:feedkeys(keys)$/;"	f
process_user_input	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:process_user_input()$/;"	f
detect_bad_input	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:detect_bad_input()$/;"	f
handle_visual_IA_to_insert	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_visual_IA_to_insert()$/;"	f
handle_visual_IA_to_normal	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_visual_IA_to_normal()$/;"	f
apply_user_input_next	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:apply_user_input_next(mode)$/;"	f
get_visual_region	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_visual_region(pos)$/;"	f
strpart	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:strpart(s, i, l)$/;"	f
get_text	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_text(region)$/;"	f
get_char	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_char()$/;"	f
exit	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:exit()$/;"	f
handle_special_key	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_special_key(key, mode)$/;"	f
apply_highlight_fix	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:apply_highlight_fix()$/;"	f
revert_highlight_fix	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:revert_highlight_fix()$/;"	f
s:retry_keys	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:retry_keys = ""$/;"	v
display_error	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:display_error()$/;"	f
s:latency_debug_file	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:latency_debug_file = ''$/;"	v
start_latency_measure	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:start_latency_measure()$/;"	f
skip_latency_measure	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:skip_latency_measure()$/;"	f
end_latency_measure	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:end_latency_measure()$/;"	f
last_char	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:last_char()$/;"	f
wait_for_user_input	sources_non_forked/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:wait_for_user_input(mode)$/;"	f
g:loaded_syntastic_ocaml_camlp4o_checker	sources_non_forked/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^let g:loaded_syntastic_ocaml_camlp4o_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^let s:save_cpo = &cpo$/;"	v
g:syntastic_ocaml_use_ocamlc	sources_non_forked/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^    let g:syntastic_ocaml_use_ocamlc = 0$/;"	v
g:syntastic_ocaml_use_janestreet_core	sources_non_forked/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^    let g:syntastic_ocaml_use_janestreet_core = 0$/;"	v
g:syntastic_ocaml_janestreet_core_dir	sources_non_forked/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^    let g:syntastic_ocaml_janestreet_core_dir = '.'$/;"	v
g:syntastic_ocaml_use_ocamlbuild	sources_non_forked/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^    let g:syntastic_ocaml_use_ocamlbuild = 0$/;"	v
SyntaxCheckers_ocaml_camlp4o_IsAvailable	sources_non_forked/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! SyntaxCheckers_ocaml_camlp4o_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_ocaml_camlp4o_GetLocList	sources_non_forked/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! SyntaxCheckers_ocaml_camlp4o_GetLocList() dict " {{{1$/;"	f
GetMakeprg	sources_non_forked/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! s:GetMakeprg(buf) " {{{2$/;"	f
GetOcamlcMakeprg	sources_non_forked/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! s:GetOcamlcMakeprg(buf) " {{{2$/;"	f
GetOcamlBuildMakeprg	sources_non_forked/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! s:GetOcamlBuildMakeprg(buf) " {{{2$/;"	f
GetOtherMakeprg	sources_non_forked/syntastic/syntax_checkers/ocaml/camlp4o.vim	/^function! s:GetOtherMakeprg(buf) " {{{2$/;"	f
g:loaded_syntastic_ada_gcc_checker	sources_non_forked/syntastic/syntax_checkers/ada/gcc.vim	/^let g:loaded_syntastic_ada_gcc_checker = 1$/;"	v
g:syntastic_ada_compiler_options	sources_non_forked/syntastic/syntax_checkers/ada/gcc.vim	/^    let g:syntastic_ada_compiler_options = ''$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/ada/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ada_gcc_IsAvailable	sources_non_forked/syntastic/syntax_checkers/ada/gcc.vim	/^function! SyntaxCheckers_ada_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_ada_gcc_GetLocList	sources_non_forked/syntastic/syntax_checkers/ada/gcc.vim	/^function! SyntaxCheckers_ada_gcc_GetLocList() dict$/;"	f
g:loaded_syntastic_pod_proselint_checker	sources_non_forked/syntastic/syntax_checkers/pod/proselint.vim	/^let g:loaded_syntastic_pod_proselint_checker = 1$/;"	v
g:loaded_syntastic_pod_podchecker_checker	sources_non_forked/syntastic/syntax_checkers/pod/podchecker.vim	/^let g:loaded_syntastic_pod_podchecker_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/pod/podchecker.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_pod_podchecker_GetLocList	sources_non_forked/syntastic/syntax_checkers/pod/podchecker.vim	/^function! SyntaxCheckers_pod_podchecker_GetLocList() dict$/;"	f
g:loaded_syntastic_vim_vint_checker	sources_non_forked/syntastic/syntax_checkers/vim/vint.vim	/^let g:loaded_syntastic_vim_vint_checker = 1$/;"	v
g:syntastic_vim_vint_sort	sources_non_forked/syntastic/syntax_checkers/vim/vint.vim	/^    let g:syntastic_vim_vint_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/vim/vint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_vim_vint_GetLocList	sources_non_forked/syntastic/syntax_checkers/vim/vint.vim	/^function! SyntaxCheckers_vim_vint_GetLocList() dict$/;"	f
g:loaded_syntastic_vim_vimlint_checker	sources_non_forked/syntastic/syntax_checkers/vim/vimlint.vim	/^let g:loaded_syntastic_vim_vimlint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/vim/vimlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_vim_vimlint_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/vim/vimlint.vim	/^function! SyntaxCheckers_vim_vimlint_GetHighlightRegex(item) " {{{1$/;"	f
SyntaxCheckers_vim_vimlint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/vim/vimlint.vim	/^function! SyntaxCheckers_vim_vimlint_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_vim_vimlint_GetLocList	sources_non_forked/syntastic/syntax_checkers/vim/vimlint.vim	/^function! SyntaxCheckers_vim_vimlint_GetLocList() dict " {{{1$/;"	f
vimlintOutput	sources_non_forked/syntastic/syntax_checkers/vim/vimlint.vim	/^function! s:vimlintOutput(filename, pos, ev, eid, mes, obj) " {{{2$/;"	f
g:loaded_syntastic_bro_bro_checker	sources_non_forked/syntastic/syntax_checkers/bro/bro.vim	/^let g:loaded_syntastic_bro_bro_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/bro/bro.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_bro_bro_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/bro/bro.vim	/^function! SyntaxCheckers_bro_bro_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_bro_bro_IsAvailable	sources_non_forked/syntastic/syntax_checkers/bro/bro.vim	/^function! SyntaxCheckers_bro_bro_IsAvailable() dict$/;"	f
SyntaxCheckers_bro_bro_GetLocList	sources_non_forked/syntastic/syntax_checkers/bro/bro.vim	/^function! SyntaxCheckers_bro_bro_GetLocList() dict$/;"	f
g:loaded_syntastic_xhtml_jshint_checker	sources_non_forked/syntastic/syntax_checkers/xhtml/jshint.vim	/^let g:loaded_syntastic_xhtml_jshint_checker = 1$/;"	v
g:loaded_syntastic_xhtml_tidy_checker	sources_non_forked/syntastic/syntax_checkers/xhtml/tidy.vim	/^let g:loaded_syntastic_xhtml_tidy_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/xhtml/tidy.vim	/^let s:save_cpo = &cpo$/;"	v
g:syntastic_xhtml_tidy_ignore_errors	sources_non_forked/syntastic/syntax_checkers/xhtml/tidy.vim	/^    let g:syntastic_xhtml_tidy_ignore_errors = []$/;"	v
TidyEncOptByFenc	sources_non_forked/syntastic/syntax_checkers/xhtml/tidy.vim	/^function! s:TidyEncOptByFenc()$/;"	f
SyntaxCheckers_xhtml_tidy_GetLocList	sources_non_forked/syntastic/syntax_checkers/xhtml/tidy.vim	/^function! SyntaxCheckers_xhtml_tidy_GetLocList() dict " {{{1$/;"	f
IgnoreError	sources_non_forked/syntastic/syntax_checkers/xhtml/tidy.vim	/^function! s:IgnoreError(text) " {{{2$/;"	f
g:loaded_syntastic_xhtml_proselint_checker	sources_non_forked/syntastic/syntax_checkers/xhtml/proselint.vim	/^let g:loaded_syntastic_xhtml_proselint_checker = 1$/;"	v
g:loaded_syntastic_trig_rapper_checker	sources_non_forked/syntastic/syntax_checkers/trig/rapper.vim	/^let g:loaded_syntastic_trig_rapper_checker = 1$/;"	v
g:loaded_syntastic_applescript_osacompile_checker	sources_non_forked/syntastic/syntax_checkers/applescript/osacompile.vim	/^let g:loaded_syntastic_applescript_osacompile_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/applescript/osacompile.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_applescript_osacompile_GetLocList	sources_non_forked/syntastic/syntax_checkers/applescript/osacompile.vim	/^function! SyntaxCheckers_applescript_osacompile_GetLocList() dict$/;"	f
g:loaded_syntastic_haml_haml_checker	sources_non_forked/syntastic/syntax_checkers/haml/haml.vim	/^let g:loaded_syntastic_haml_haml_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/haml/haml.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_haml_haml_IsAvailable	sources_non_forked/syntastic/syntax_checkers/haml/haml.vim	/^function! SyntaxCheckers_haml_haml_IsAvailable() dict$/;"	f
SyntaxCheckers_haml_haml_GetLocList	sources_non_forked/syntastic/syntax_checkers/haml/haml.vim	/^function! SyntaxCheckers_haml_haml_GetLocList() dict$/;"	f
g:loaded_syntastic_haml_haml_lint_checker	sources_non_forked/syntastic/syntax_checkers/haml/haml_lint.vim	/^let g:loaded_syntastic_haml_haml_lint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/haml/haml_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_haml_haml_lint_GetLocList	sources_non_forked/syntastic/syntax_checkers/haml/haml_lint.vim	/^function! SyntaxCheckers_haml_haml_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_mercury_mmc_checker	sources_non_forked/syntastic/syntax_checkers/mercury/mmc.vim	/^let g:loaded_syntastic_mercury_mmc_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/mercury/mmc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_mercury_mmc_GetLocList	sources_non_forked/syntastic/syntax_checkers/mercury/mmc.vim	/^function! SyntaxCheckers_mercury_mmc_GetLocList() dict$/;"	f
g:loaded_syntastic_tex_lacheck_checker	sources_non_forked/syntastic/syntax_checkers/tex/lacheck.vim	/^let g:loaded_syntastic_tex_lacheck_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/tex/lacheck.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_tex_lacheck_GetLocList	sources_non_forked/syntastic/syntax_checkers/tex/lacheck.vim	/^function! SyntaxCheckers_tex_lacheck_GetLocList() dict$/;"	f
g:loaded_syntastic_tex_chktex_checker	sources_non_forked/syntastic/syntax_checkers/tex/chktex.vim	/^let g:loaded_syntastic_tex_chktex_checker = 1$/;"	v
g:syntastic_tex_chktex_showmsgs	sources_non_forked/syntastic/syntax_checkers/tex/chktex.vim	/^    let g:syntastic_tex_chktex_showmsgs = 1$/;"	v
g:syntastic_tex_chktex_sort	sources_non_forked/syntastic/syntax_checkers/tex/chktex.vim	/^    let g:syntastic_tex_chktex_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/tex/chktex.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_tex_chktex_GetLocList	sources_non_forked/syntastic/syntax_checkers/tex/chktex.vim	/^function! SyntaxCheckers_tex_chktex_GetLocList() dict$/;"	f
g:loaded_syntastic_tex_proselint_checker	sources_non_forked/syntastic/syntax_checkers/tex/proselint.vim	/^let g:loaded_syntastic_tex_proselint_checker = 1$/;"	v
g:loaded_syntastic_lisp_clisp_checker	sources_non_forked/syntastic/syntax_checkers/lisp/clisp.vim	/^let g:loaded_syntastic_lisp_clisp_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/lisp/clisp.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_lisp_clisp_GetLocList	sources_non_forked/syntastic/syntax_checkers/lisp/clisp.vim	/^function! SyntaxCheckers_lisp_clisp_GetLocList() dict$/;"	f
g:loaded_syntastic_asm_gcc_checker	sources_non_forked/syntastic/syntax_checkers/asm/gcc.vim	/^let g:loaded_syntastic_asm_gcc_checker = 1$/;"	v
g:syntastic_asm_compiler_options	sources_non_forked/syntastic/syntax_checkers/asm/gcc.vim	/^    let g:syntastic_asm_compiler_options = ''$/;"	v
g:syntastic_asm_generic	sources_non_forked/syntastic/syntax_checkers/asm/gcc.vim	/^    let g:syntastic_asm_generic = 0$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/asm/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_asm_gcc_IsAvailable	sources_non_forked/syntastic/syntax_checkers/asm/gcc.vim	/^function! SyntaxCheckers_asm_gcc_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_asm_gcc_GetLocList	sources_non_forked/syntastic/syntax_checkers/asm/gcc.vim	/^function! SyntaxCheckers_asm_gcc_GetLocList() dict " {{{1$/;"	f
GetDialect	sources_non_forked/syntastic/syntax_checkers/asm/gcc.vim	/^function! s:GetDialect(buf) " {{{2$/;"	f
g:loaded_syntastic_go_golint_checker	sources_non_forked/syntastic/syntax_checkers/go/golint.vim	/^let g:loaded_syntastic_go_golint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/go/golint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_golint_GetLocList	sources_non_forked/syntastic/syntax_checkers/go/golint.vim	/^function! SyntaxCheckers_go_golint_GetLocList() dict$/;"	f
g:loaded_syntastic_go_gofmt_checker	sources_non_forked/syntastic/syntax_checkers/go/gofmt.vim	/^let g:loaded_syntastic_go_gofmt_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/go/gofmt.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_gofmt_GetLocList	sources_non_forked/syntastic/syntax_checkers/go/gofmt.vim	/^function! SyntaxCheckers_go_gofmt_GetLocList() dict$/;"	f
g:loaded_syntastic_go_govet_checker	sources_non_forked/syntastic/syntax_checkers/go/govet.vim	/^let g:loaded_syntastic_go_govet_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/go/govet.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_govet_GetLocList	sources_non_forked/syntastic/syntax_checkers/go/govet.vim	/^function! SyntaxCheckers_go_govet_GetLocList() dict$/;"	f
g:loaded_syntastic_go_gometalinter_checker	sources_non_forked/syntastic/syntax_checkers/go/gometalinter.vim	/^let g:loaded_syntastic_go_gometalinter_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/go/gometalinter.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_gometalinter_GetLocList	sources_non_forked/syntastic/syntax_checkers/go/gometalinter.vim	/^function! SyntaxCheckers_go_gometalinter_GetLocList() dict$/;"	f
g:loaded_syntastic_go_gotype_checker	sources_non_forked/syntastic/syntax_checkers/go/gotype.vim	/^let g:loaded_syntastic_go_gotype_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/go/gotype.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_gotype_GetLocList	sources_non_forked/syntastic/syntax_checkers/go/gotype.vim	/^function! SyntaxCheckers_go_gotype_GetLocList() dict$/;"	f
g:loaded_syntastic_go_go_checker	sources_non_forked/syntastic/syntax_checkers/go/go.vim	/^let g:loaded_syntastic_go_go_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/go/go.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_go_go_IsAvailable	sources_non_forked/syntastic/syntax_checkers/go/go.vim	/^function! SyntaxCheckers_go_go_IsAvailable() dict$/;"	f
SyntaxCheckers_go_go_GetLocList	sources_non_forked/syntastic/syntax_checkers/go/go.vim	/^function! SyntaxCheckers_go_go_GetLocList() dict$/;"	f
g:loaded_syntastic_racket_code_ayatollah_checker	sources_non_forked/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^let g:loaded_syntastic_racket_code_ayatollah_checker = 1$/;"	v
g:syntastic_racket_code_ayatollah_script	sources_non_forked/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^    let g:syntastic_racket_code_ayatollah_script = 'code-ayatollah.rkt'$/;"	v
g:syntastic_racket_code_ayatollah_sort	sources_non_forked/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^    let g:syntastic_racket_code_ayatollah_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_racket_code_ayatollah_IsAvailable	sources_non_forked/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^function! SyntaxCheckers_racket_code_ayatollah_IsAvailable() dict$/;"	f
SyntaxCheckers_racket_code_ayatollah_GetLocList	sources_non_forked/syntastic/syntax_checkers/racket/code-ayatollah.vim	/^function! SyntaxCheckers_racket_code_ayatollah_GetLocList() dict$/;"	f
g:loaded_syntastic_racket_racket_checker	sources_non_forked/syntastic/syntax_checkers/racket/racket.vim	/^let g:loaded_syntastic_racket_racket_checker=1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/racket/racket.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_racket_racket_GetLocList	sources_non_forked/syntastic/syntax_checkers/racket/racket.vim	/^function! SyntaxCheckers_racket_racket_GetLocList() dict$/;"	f
g:loaded_syntastic_nix_nix_checker	sources_non_forked/syntastic/syntax_checkers/nix/nix.vim	/^let g:loaded_syntastic_nix_nix_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/nix/nix.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_nix_nix_GetLocList	sources_non_forked/syntastic/syntax_checkers/nix/nix.vim	/^function! SyntaxCheckers_nix_nix_GetLocList() dict$/;"	f
g:loaded_syntastic_turtle_rapper_checker	sources_non_forked/syntastic/syntax_checkers/turtle/rapper.vim	/^let g:loaded_syntastic_turtle_rapper_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/turtle/rapper.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_turtle_rapper_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/turtle/rapper.vim	/^function! SyntaxCheckers_turtle_rapper_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_turtle_rapper_GetLocList	sources_non_forked/syntastic/syntax_checkers/turtle/rapper.vim	/^function! SyntaxCheckers_turtle_rapper_GetLocList() dict$/;"	f
g:loaded_syntastic_turtle_ttl_checker	sources_non_forked/syntastic/syntax_checkers/turtle/ttl.vim	/^let g:loaded_syntastic_turtle_ttl_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/turtle/ttl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_turtle_ttl_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/turtle/ttl.vim	/^function! SyntaxCheckers_turtle_ttl_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_turtle_ttl_GetLocList	sources_non_forked/syntastic/syntax_checkers/turtle/ttl.vim	/^function! SyntaxCheckers_turtle_ttl_GetLocList() dict$/;"	f
g:loaded_syntastic_yang_pyang_checker	sources_non_forked/syntastic/syntax_checkers/yang/pyang.vim	/^let g:loaded_syntastic_yang_pyang_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/yang/pyang.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_yang_pyang_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/yang/pyang.vim	/^function! SyntaxCheckers_yang_pyang_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_yang_pyang_GetLocList	sources_non_forked/syntastic/syntax_checkers/yang/pyang.vim	/^function! SyntaxCheckers_yang_pyang_GetLocList() dict$/;"	f
g:loaded_syntastic_lex_flex_checker	sources_non_forked/syntastic/syntax_checkers/lex/flex.vim	/^let g:loaded_syntastic_lex_flex_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/lex/flex.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_lex_flex_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/lex/flex.vim	/^function! SyntaxCheckers_lex_flex_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_lex_flex_GetLocList	sources_non_forked/syntastic/syntax_checkers/lex/flex.vim	/^function! SyntaxCheckers_lex_flex_GetLocList() dict$/;"	f
g:loaded_syntastic_qml_qmllint_checker	sources_non_forked/syntastic/syntax_checkers/qml/qmllint.vim	/^let g:loaded_syntastic_qml_qmllint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/qml/qmllint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_qml_qmllint_GetLocList	sources_non_forked/syntastic/syntax_checkers/qml/qmllint.vim	/^function! SyntaxCheckers_qml_qmllint_GetLocList() dict$/;"	f
g:loaded_syntastic_cmake_cmakelint_checker	sources_non_forked/syntastic/syntax_checkers/cmake/cmakelint.vim	/^let g:loaded_syntastic_cmake_cmakelint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/cmake/cmakelint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cmake_cmakelint_GetLocList	sources_non_forked/syntastic/syntax_checkers/cmake/cmakelint.vim	/^function! SyntaxCheckers_cmake_cmakelint_GetLocList() dict$/;"	f
g:loaded_syntastic_asl_iasl_checker	sources_non_forked/syntastic/syntax_checkers/asl/iasl.vim	/^let g:loaded_syntastic_asl_iasl_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/asl/iasl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_asl_iasl_GetLocList	sources_non_forked/syntastic/syntax_checkers/asl/iasl.vim	/^function! SyntaxCheckers_asl_iasl_GetLocList() dict$/;"	f
g:loaded_syntastic_xquery_basex_checker	sources_non_forked/syntastic/syntax_checkers/xquery/basex.vim	/^let g:loaded_syntastic_xquery_basex_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/xquery/basex.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_xquery_basex_GetLocList	sources_non_forked/syntastic/syntax_checkers/xquery/basex.vim	/^function! SyntaxCheckers_xquery_basex_GetLocList() dict$/;"	f
g:loaded_syntastic_python_frosted_checker	sources_non_forked/syntastic/syntax_checkers/python/frosted.vim	/^let g:loaded_syntastic_python_frosted_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/python/frosted.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_frosted_GetLocList	sources_non_forked/syntastic/syntax_checkers/python/frosted.vim	/^function! SyntaxCheckers_python_frosted_GetLocList() dict$/;"	f
g:loaded_syntastic_python_mypy_checker	sources_non_forked/syntastic/syntax_checkers/python/mypy.vim	/^let g:loaded_syntastic_python_mypy_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/python/mypy.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_mypy_GetLocList	sources_non_forked/syntastic/syntax_checkers/python/mypy.vim	/^function! SyntaxCheckers_python_mypy_GetLocList() dict$/;"	f
g:loaded_syntastic_python_pydocstyle_checker	sources_non_forked/syntastic/syntax_checkers/python/pydocstyle.vim	/^let g:loaded_syntastic_python_pydocstyle_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/python/pydocstyle.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_pydocstyle_GetLocList	sources_non_forked/syntastic/syntax_checkers/python/pydocstyle.vim	/^function! SyntaxCheckers_python_pydocstyle_GetLocList() dict$/;"	f
g:loaded_syntastic_python_py3kwarn_checker	sources_non_forked/syntastic/syntax_checkers/python/py3kwarn.vim	/^let g:loaded_syntastic_python_py3kwarn_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/python/py3kwarn.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_py3kwarn_GetLocList	sources_non_forked/syntastic/syntax_checkers/python/py3kwarn.vim	/^function! SyntaxCheckers_python_py3kwarn_GetLocList() dict$/;"	f
g:loaded_syntastic_python_flake8_checker	sources_non_forked/syntastic/syntax_checkers/python/flake8.vim	/^let g:loaded_syntastic_python_flake8_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/python/flake8.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_flake8_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/python/flake8.vim	/^function! SyntaxCheckers_python_flake8_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_python_flake8_GetLocList	sources_non_forked/syntastic/syntax_checkers/python/flake8.vim	/^function! SyntaxCheckers_python_flake8_GetLocList() dict$/;"	f
g:loaded_syntastic_python_python_checker	sources_non_forked/syntastic/syntax_checkers/python/python.vim	/^let g:loaded_syntastic_python_python_checker = 1$/;"	v
g:syntastic_python_python_use_codec	sources_non_forked/syntastic/syntax_checkers/python/python.vim	/^    let g:syntastic_python_python_use_codec = 0$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/python/python.vim	/^let s:save_cpo = &cpo$/;"	v
s:base_path	sources_non_forked/syntastic/syntax_checkers/python/python.vim	/^let s:base_path = expand('<sfile>:p:h', 1) . syntastic#util#Slash()$/;"	v
SyntaxCheckers_python_python_IsAvailable	sources_non_forked/syntastic/syntax_checkers/python/python.vim	/^function! SyntaxCheckers_python_python_IsAvailable() dict$/;"	f
SyntaxCheckers_python_python_GetLocList	sources_non_forked/syntastic/syntax_checkers/python/python.vim	/^function! SyntaxCheckers_python_python_GetLocList() dict$/;"	f
g:loaded_syntastic_python_pycodestyle_checker	sources_non_forked/syntastic/syntax_checkers/python/pycodestyle.vim	/^let g:loaded_syntastic_python_pycodestyle_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/python/pycodestyle.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_pycodestyle_GetLocList	sources_non_forked/syntastic/syntax_checkers/python/pycodestyle.vim	/^function! SyntaxCheckers_python_pycodestyle_GetLocList() dict$/;"	f
g:loaded_syntastic_python_pyflakes_checker	sources_non_forked/syntastic/syntax_checkers/python/pyflakes.vim	/^let g:loaded_syntastic_python_pyflakes_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/python/pyflakes.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_pyflakes_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/python/pyflakes.vim	/^function! SyntaxCheckers_python_pyflakes_GetHighlightRegex(i)$/;"	f
SyntaxCheckers_python_pyflakes_GetLocList	sources_non_forked/syntastic/syntax_checkers/python/pyflakes.vim	/^function! SyntaxCheckers_python_pyflakes_GetLocList() dict$/;"	f
g:loaded_syntastic_python_prospector_checker	sources_non_forked/syntastic/syntax_checkers/python/prospector.vim	/^let g:loaded_syntastic_python_prospector_checker = 1$/;"	v
g:syntastic_python_prospector_sort	sources_non_forked/syntastic/syntax_checkers/python/prospector.vim	/^    let g:syntastic_python_prospector_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/python/prospector.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_prospector_IsAvailable	sources_non_forked/syntastic/syntax_checkers/python/prospector.vim	/^function! SyntaxCheckers_python_prospector_IsAvailable() dict$/;"	f
SyntaxCheckers_python_prospector_GetLocList	sources_non_forked/syntastic/syntax_checkers/python/prospector.vim	/^function! SyntaxCheckers_python_prospector_GetLocList() dict$/;"	f
g:loaded_syntastic_python_pep8_checker	sources_non_forked/syntastic/syntax_checkers/python/pep8.vim	/^let g:loaded_syntastic_python_pep8_checker = 1$/;"	v
g:loaded_syntastic_python_pep257_checker	sources_non_forked/syntastic/syntax_checkers/python/pep257.vim	/^let g:loaded_syntastic_python_pep257_checker = 1$/;"	v
print_function	sources_non_forked/syntastic/syntax_checkers/python/compile.py	/^from __future__ import print_function$/;"	i
argv	sources_non_forked/syntastic/syntax_checkers/python/compile.py	/^from sys import argv, exit$/;"	i
exit	sources_non_forked/syntastic/syntax_checkers/python/compile.py	/^from sys import argv, exit$/;"	i
g:loaded_syntastic_python_bandit_checker	sources_non_forked/syntastic/syntax_checkers/python/bandit.vim	/^let g:loaded_syntastic_python_bandit_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/python/bandit.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_bandit_GetLocList	sources_non_forked/syntastic/syntax_checkers/python/bandit.vim	/^function! SyntaxCheckers_python_bandit_GetLocList() dict$/;"	f
g:loaded_syntastic_python_pylint_checker	sources_non_forked/syntastic/syntax_checkers/python/pylint.vim	/^let g:loaded_syntastic_python_pylint_checker = 1$/;"	v
g:syntastic_python_pylint_sort	sources_non_forked/syntastic/syntax_checkers/python/pylint.vim	/^    let g:syntastic_python_pylint_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/python/pylint.vim	/^let s:save_cpo = &cpo$/;"	v
s:pylint_new	sources_non_forked/syntastic/syntax_checkers/python/pylint.vim	/^let s:pylint_new = -1$/;"	v
SyntaxCheckers_python_pylint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/python/pylint.vim	/^function! SyntaxCheckers_python_pylint_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_python_pylint_GetLocList	sources_non_forked/syntastic/syntax_checkers/python/pylint.vim	/^function! SyntaxCheckers_python_pylint_GetLocList() dict " {{{1$/;"	f
print_function	sources_non_forked/syntastic/syntax_checkers/python/codec.py	/^from __future__ import print_function$/;"	i
argv	sources_non_forked/syntastic/syntax_checkers/python/codec.py	/^from sys import argv, exit$/;"	i
exit	sources_non_forked/syntastic/syntax_checkers/python/codec.py	/^from sys import argv, exit$/;"	i
codecs	sources_non_forked/syntastic/syntax_checkers/python/codec.py	/^import codecs$/;"	i
re	sources_non_forked/syntastic/syntax_checkers/python/codec.py	/^import re$/;"	i
os	sources_non_forked/syntastic/syntax_checkers/python/codec.py	/^import os$/;"	i
text	sources_non_forked/syntastic/syntax_checkers/python/codec.py	/^        text = fle.readlines()$/;"	v
match	sources_non_forked/syntastic/syntax_checkers/python/codec.py	/^        match = re.match(r"#\\s*coding\\s*:\\s*(?P<coding>\\w+)", text[0])$/;"	v
text	sources_non_forked/syntastic/syntax_checkers/python/codec.py	/^            text = codecs.lookup(match.groupdict()["coding"]).incrementaldecoder().decode($/;"	v
text	sources_non_forked/syntastic/syntax_checkers/python/codec.py	/^        text = ''.join(text).encode('utf-8')$/;"	v
g:loaded_syntastic_python_pylama_checker	sources_non_forked/syntastic/syntax_checkers/python/pylama.vim	/^let g:loaded_syntastic_python_pylama_checker = 1$/;"	v
g:syntastic_python_pylama_sort	sources_non_forked/syntastic/syntax_checkers/python/pylama.vim	/^    let g:syntastic_python_pylama_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/python/pylama.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_python_pylama_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/python/pylama.vim	/^function! SyntaxCheckers_python_pylama_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_python_pylama_GetLocList	sources_non_forked/syntastic/syntax_checkers/python/pylama.vim	/^function! SyntaxCheckers_python_pylama_GetLocList() dict$/;"	f
g:loaded_syntastic_css_mixedindentlint_checker	sources_non_forked/syntastic/syntax_checkers/css/mixedindentlint.vim	/^let g:loaded_syntastic_css_mixedindentlint_checker = 1$/;"	v
g:loaded_syntastic_css_csslint_checker	sources_non_forked/syntastic/syntax_checkers/css/csslint.vim	/^let g:loaded_syntastic_css_csslint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/css/csslint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_css_csslint_GetLocList	sources_non_forked/syntastic/syntax_checkers/css/csslint.vim	/^function! SyntaxCheckers_css_csslint_GetLocList() dict$/;"	f
g:loaded_syntastic_css_recess_checker	sources_non_forked/syntastic/syntax_checkers/css/recess.vim	/^let g:loaded_syntastic_css_recess_checker = 1$/;"	v
g:loaded_syntastic_css_prettycss_checker	sources_non_forked/syntastic/syntax_checkers/css/prettycss.vim	/^let g:loaded_syntastic_css_prettycss_checker = 1$/;"	v
g:syntastic_css_prettycss_sort	sources_non_forked/syntastic/syntax_checkers/css/prettycss.vim	/^    let g:syntastic_css_prettycss_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/css/prettycss.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_css_prettycss_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/css/prettycss.vim	/^function! SyntaxCheckers_css_prettycss_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_css_prettycss_GetLocList	sources_non_forked/syntastic/syntax_checkers/css/prettycss.vim	/^function! SyntaxCheckers_css_prettycss_GetLocList() dict$/;"	f
g:loaded_syntastic_css_stylelint_checker	sources_non_forked/syntastic/syntax_checkers/css/stylelint.vim	/^let g:loaded_syntastic_css_stylelint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/css/stylelint.vim	/^let s:save_cpo = &cpo$/;"	v
s:args_after	sources_non_forked/syntastic/syntax_checkers/css/stylelint.vim	/^let s:args_after = {$/;"	v
SyntaxCheckers_css_stylelint_GetLocList	sources_non_forked/syntastic/syntax_checkers/css/stylelint.vim	/^function! SyntaxCheckers_css_stylelint_GetLocList() dict$/;"	f
g:loaded_syntastic_css_phpcs_checker	sources_non_forked/syntastic/syntax_checkers/css/phpcs.vim	/^let g:loaded_syntastic_css_phpcs_checker = 1$/;"	v
g:loaded_syntastic_less_recess_checker	sources_non_forked/syntastic/syntax_checkers/less/recess.vim	/^let g:loaded_syntastic_less_recess_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/less/recess.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_less_recess_GetLocList	sources_non_forked/syntastic/syntax_checkers/less/recess.vim	/^function! SyntaxCheckers_less_recess_GetLocList() dict$/;"	f
g:loaded_syntastic_less_lessc_checker	sources_non_forked/syntastic/syntax_checkers/less/lessc.vim	/^let g:loaded_syntastic_less_lessc_checker = 1$/;"	v
g:syntastic_less_use_less_lint	sources_non_forked/syntastic/syntax_checkers/less/lessc.vim	/^    let g:syntastic_less_use_less_lint = 0$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/less/lessc.vim	/^let s:save_cpo = &cpo$/;"	v
s:node_file	sources_non_forked/syntastic/syntax_checkers/less/lessc.vim	/^let s:node_file = 'node ' . syntastic#util#shescape(expand('<sfile>:p:h', 1) . syntastic#util#Slash() . 'less-lint.js')$/;"	v
SyntaxCheckers_less_lessc_IsAvailable	sources_non_forked/syntastic/syntax_checkers/less/lessc.vim	/^function! SyntaxCheckers_less_lessc_IsAvailable() dict$/;"	f
SyntaxCheckers_less_lessc_GetLocList	sources_non_forked/syntastic/syntax_checkers/less/lessc.vim	/^function! SyntaxCheckers_less_lessc_GetLocList() dict$/;"	f
g:loaded_syntastic_elixir_elixir_checker	sources_non_forked/syntastic/syntax_checkers/elixir/elixir.vim	/^let g:loaded_syntastic_elixir_elixir_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/elixir/elixir.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_elixir_elixir_IsAvailable	sources_non_forked/syntastic/syntax_checkers/elixir/elixir.vim	/^function! SyntaxCheckers_elixir_elixir_IsAvailable() dict$/;"	f
SyntaxCheckers_elixir_elixir_GetLocList	sources_non_forked/syntastic/syntax_checkers/elixir/elixir.vim	/^function! SyntaxCheckers_elixir_elixir_GetLocList() dict$/;"	f
g:loaded_syntastic_z80_z80syntaxchecker_checker	sources_non_forked/syntastic/syntax_checkers/z80/z80syntaxchecker.vim	/^let g:loaded_syntastic_z80_z80syntaxchecker_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/z80/z80syntaxchecker.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_z80_z80syntaxchecker_GetLocList	sources_non_forked/syntastic/syntax_checkers/z80/z80syntaxchecker.vim	/^function! SyntaxCheckers_z80_z80syntaxchecker_GetLocList() dict$/;"	f
g:loaded_syntastic_dockerfile_dockerfile_lint_checker	sources_non_forked/syntastic/syntax_checkers/dockerfile/dockerfile_lint.vim	/^let g:loaded_syntastic_dockerfile_dockerfile_lint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/dockerfile/dockerfile_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_dockerfile_dockerfile_lint_GetLocList	sources_non_forked/syntastic/syntax_checkers/dockerfile/dockerfile_lint.vim	/^function! SyntaxCheckers_dockerfile_dockerfile_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_dockerfile_hadolint_checker	sources_non_forked/syntastic/syntax_checkers/dockerfile/hadolint.vim	/^let g:loaded_syntastic_dockerfile_hadolint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/dockerfile/hadolint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_dockerfile_hadolint_GetLocList	sources_non_forked/syntastic/syntax_checkers/dockerfile/hadolint.vim	/^function! SyntaxCheckers_dockerfile_hadolint_GetLocList() dict$/;"	f
g:loaded_syntastic_dart_dartanalyzer_checker	sources_non_forked/syntastic/syntax_checkers/dart/dartanalyzer.vim	/^let g:loaded_syntastic_dart_dartanalyzer_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/dart/dartanalyzer.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_dart_dartanalyzer_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/dart/dartanalyzer.vim	/^function! SyntaxCheckers_dart_dartanalyzer_GetHighlightRegex(error)$/;"	f
SyntaxCheckers_dart_dartanalyzer_GetLocList	sources_non_forked/syntastic/syntax_checkers/dart/dartanalyzer.vim	/^function! SyntaxCheckers_dart_dartanalyzer_GetLocList() dict$/;"	f
g:loaded_syntastic_eruby_ruby_checker	sources_non_forked/syntastic/syntax_checkers/eruby/ruby.vim	/^let g:loaded_syntastic_eruby_ruby_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/eruby/ruby.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_eruby_ruby_IsAvailable	sources_non_forked/syntastic/syntax_checkers/eruby/ruby.vim	/^function! SyntaxCheckers_eruby_ruby_IsAvailable() dict$/;"	f
SyntaxCheckers_eruby_ruby_GetLocList	sources_non_forked/syntastic/syntax_checkers/eruby/ruby.vim	/^function! SyntaxCheckers_eruby_ruby_GetLocList() dict$/;"	f
g:loaded_syntastic_markdown_textlint_checker	sources_non_forked/syntastic/syntax_checkers/markdown/textlint.vim	/^let g:loaded_syntastic_markdown_textlint_checker = 1$/;"	v
g:loaded_syntastic_markdown_mdl_checker	sources_non_forked/syntastic/syntax_checkers/markdown/mdl.vim	/^let g:loaded_syntastic_markdown_mdl_checker = 1$/;"	v
g:syntastic_markdown_mdl_sort	sources_non_forked/syntastic/syntax_checkers/markdown/mdl.vim	/^    let g:syntastic_markdown_mdl_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/markdown/mdl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_markdown_mdl_GetLocList	sources_non_forked/syntastic/syntax_checkers/markdown/mdl.vim	/^function! SyntaxCheckers_markdown_mdl_GetLocList() dict$/;"	f
g:loaded_syntastic_markdown_proselint_checker	sources_non_forked/syntastic/syntax_checkers/markdown/proselint.vim	/^let g:loaded_syntastic_markdown_proselint_checker = 1$/;"	v
g:loaded_syntastic_haxe_haxe_checker	sources_non_forked/syntastic/syntax_checkers/haxe/haxe.vim	/^let g:loaded_syntastic_haxe_haxe_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/haxe/haxe.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_haxe_haxe_GetLocList	sources_non_forked/syntastic/syntax_checkers/haxe/haxe.vim	/^function! SyntaxCheckers_haxe_haxe_GetLocList() dict$/;"	f
g:loaded_syntastic_chef_foodcritic_checker	sources_non_forked/syntastic/syntax_checkers/chef/foodcritic.vim	/^let g:loaded_syntastic_chef_foodcritic_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/chef/foodcritic.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_chef_foodcritic_GetLocList	sources_non_forked/syntastic/syntax_checkers/chef/foodcritic.vim	/^function! SyntaxCheckers_chef_foodcritic_GetLocList() dict$/;"	f
g:loaded_syntastic_objcpp_gcc_checker	sources_non_forked/syntastic/syntax_checkers/objcpp/gcc.vim	/^let g:loaded_syntastic_objcpp_gcc_checker = 1$/;"	v
g:syntastic_objcpp_compiler_options	sources_non_forked/syntastic/syntax_checkers/objcpp/gcc.vim	/^    let g:syntastic_objcpp_compiler_options = '-std=gnu99'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/objcpp/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_objcpp_gcc_IsAvailable	sources_non_forked/syntastic/syntax_checkers/objcpp/gcc.vim	/^function! SyntaxCheckers_objcpp_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_objcpp_gcc_GetLocList	sources_non_forked/syntastic/syntax_checkers/objcpp/gcc.vim	/^function! SyntaxCheckers_objcpp_gcc_GetLocList() dict$/;"	f
g:loaded_syntastic_objcpp_oclint_checker	sources_non_forked/syntastic/syntax_checkers/objcpp/oclint.vim	/^let g:loaded_syntastic_objcpp_oclint_checker = 1$/;"	v
g:loaded_syntastic_cuda_nvcc_checker	sources_non_forked/syntastic/syntax_checkers/cuda/nvcc.vim	/^let g:loaded_syntastic_cuda_nvcc_checker = 1$/;"	v
g:syntastic_cuda_config_file	sources_non_forked/syntastic/syntax_checkers/cuda/nvcc.vim	/^    let g:syntastic_cuda_config_file = '.syntastic_cuda_config'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/cuda/nvcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cuda_nvcc_GetLocList	sources_non_forked/syntastic/syntax_checkers/cuda/nvcc.vim	/^function! SyntaxCheckers_cuda_nvcc_GetLocList() dict$/;"	f
g:loaded_syntastic_scss_sass_lint_checker	sources_non_forked/syntastic/syntax_checkers/scss/sass_lint.vim	/^let g:loaded_syntastic_scss_sass_lint_checker = 1$/;"	v
g:loaded_syntastic_scss_sass_checker	sources_non_forked/syntastic/syntax_checkers/scss/sass.vim	/^let g:loaded_syntastic_scss_sass_checker = 1$/;"	v
g:loaded_syntastic_scss_mixedindentlint_checker	sources_non_forked/syntastic/syntax_checkers/scss/mixedindentlint.vim	/^let g:loaded_syntastic_scss_mixedindentlint_checker = 1$/;"	v
g:loaded_syntastic_scss_scss_lint_checker	sources_non_forked/syntastic/syntax_checkers/scss/scss_lint.vim	/^let g:loaded_syntastic_scss_scss_lint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/scss/scss_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_scss_scss_lint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/scss/scss_lint.vim	/^function! SyntaxCheckers_scss_scss_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_scss_scss_lint_GetLocList	sources_non_forked/syntastic/syntax_checkers/scss/scss_lint.vim	/^function! SyntaxCheckers_scss_scss_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_scss_sassc_checker	sources_non_forked/syntastic/syntax_checkers/scss/sassc.vim	/^let g:loaded_syntastic_scss_sassc_checker = 1$/;"	v
g:loaded_syntastic_scss_stylelint_checker	sources_non_forked/syntastic/syntax_checkers/scss/stylelint.vim	/^let g:loaded_syntastic_scss_stylelint_checker = 1$/;"	v
g:loaded_syntastic_perl_perl_checker	sources_non_forked/syntastic/syntax_checkers/perl/perl.vim	/^let g:loaded_syntastic_perl_perl_checker = 1$/;"	v
g:syntastic_perl_lib_path	sources_non_forked/syntastic/syntax_checkers/perl/perl.vim	/^    let g:syntastic_perl_lib_path = []$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/perl/perl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_perl_perl_IsAvailable	sources_non_forked/syntastic/syntax_checkers/perl/perl.vim	/^function! SyntaxCheckers_perl_perl_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_perl_perl_GetLocList	sources_non_forked/syntastic/syntax_checkers/perl/perl.vim	/^function! SyntaxCheckers_perl_perl_GetLocList() dict " {{{1$/;"	f
g:loaded_syntastic_perl_perlcritic_checker	sources_non_forked/syntastic/syntax_checkers/perl/perlcritic.vim	/^let g:loaded_syntastic_perl_perlcritic_checker = 1$/;"	v
g:syntastic_perl_perlcritic_thres	sources_non_forked/syntastic/syntax_checkers/perl/perlcritic.vim	/^    let g:syntastic_perl_perlcritic_thres = 5$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/perl/perlcritic.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_perl_perlcritic_GetLocList	sources_non_forked/syntastic/syntax_checkers/perl/perlcritic.vim	/^function! SyntaxCheckers_perl_perlcritic_GetLocList() dict$/;"	f
g:loaded_syntastic_perl_podchecker_checker	sources_non_forked/syntastic/syntax_checkers/perl/podchecker.vim	/^let g:loaded_syntastic_perl_podchecker_checker = 1$/;"	v
g:loaded_syntastic_typescript_tslint_checker	sources_non_forked/syntastic/syntax_checkers/typescript/tslint.vim	/^let g:loaded_syntastic_typescript_tslint_checker = 1$/;"	v
g:syntastic_typescript_tslint_sort	sources_non_forked/syntastic/syntax_checkers/typescript/tslint.vim	/^    let g:syntastic_typescript_tslint_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/typescript/tslint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_typescript_tslint_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/typescript/tslint.vim	/^function! SyntaxCheckers_typescript_tslint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_typescript_tslint_GetLocList	sources_non_forked/syntastic/syntax_checkers/typescript/tslint.vim	/^function! SyntaxCheckers_typescript_tslint_GetLocList() dict$/;"	f
g:loaded_syntastic_typescript_eslint_checker	sources_non_forked/syntastic/syntax_checkers/typescript/eslint.vim	/^let g:loaded_syntastic_typescript_eslint_checker = 1$/;"	v
g:loaded_syntastic_co_coco_checker	sources_non_forked/syntastic/syntax_checkers/co/coco.vim	/^let g:loaded_syntastic_co_coco_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/co/coco.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_co_coco_GetLocList	sources_non_forked/syntastic/syntax_checkers/co/coco.vim	/^function! SyntaxCheckers_co_coco_GetLocList() dict$/;"	f
g:loaded_syntastic_stylus_stylint_checker	sources_non_forked/syntastic/syntax_checkers/stylus/stylint.vim	/^let g:loaded_syntastic_stylus_stylint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/stylus/stylint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_stylus_stylint_GetLocList	sources_non_forked/syntastic/syntax_checkers/stylus/stylint.vim	/^function! SyntaxCheckers_stylus_stylint_GetLocList() dict$/;"	f
g:loaded_syntastic_vue_eslint_checker	sources_non_forked/syntastic/syntax_checkers/vue/eslint.vim	/^let g:loaded_syntastic_vue_eslint_checker = 1$/;"	v
g:loaded_syntastic_vue_pug_lint_vue_checker	sources_non_forked/syntastic/syntax_checkers/vue/pug_lint_vue.vim	/^let g:loaded_syntastic_vue_pug_lint_vue_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/vue/pug_lint_vue.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_vue_pug_lint_vue_GetLocList	sources_non_forked/syntastic/syntax_checkers/vue/pug_lint_vue.vim	/^function! SyntaxCheckers_vue_pug_lint_vue_GetLocList() dict$/;"	f
g:loaded_syntastic_rst_rstcheck_checker	sources_non_forked/syntastic/syntax_checkers/rst/rstcheck.vim	/^let g:loaded_syntastic_rst_rstcheck_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/rst/rstcheck.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_rst_rstcheck_GetLocList	sources_non_forked/syntastic/syntax_checkers/rst/rstcheck.vim	/^function! SyntaxCheckers_rst_rstcheck_GetLocList() dict$/;"	f
g:loaded_syntastic_rst_proselint_checker	sources_non_forked/syntastic/syntax_checkers/rst/proselint.vim	/^let g:loaded_syntastic_rst_proselint_checker = 1$/;"	v
g:loaded_syntastic_rst_rst2pseudoxml_checker	sources_non_forked/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^let g:loaded_syntastic_rst_rst2pseudoxml_checker = 1$/;"	v
s:rst2pseudoxml	sources_non_forked/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^let s:rst2pseudoxml = (executable('rst2pseudoxml.py') && !syntastic#util#isRunningWindows()) ? 'rst2pseudoxml.py' : 'rst2pseudoxml'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_rst_rst2pseudoxml_IsAvailable	sources_non_forked/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^function! SyntaxCheckers_rst_rst2pseudoxml_IsAvailable() dict$/;"	f
SyntaxCheckers_rst_rst2pseudoxml_GetLocList	sources_non_forked/syntastic/syntax_checkers/rst/rst2pseudoxml.vim	/^function! SyntaxCheckers_rst_rst2pseudoxml_GetLocList() dict$/;"	f
g:loaded_syntastic_rst_sphinx_checker	sources_non_forked/syntastic/syntax_checkers/rst/sphinx.vim	/^let g:loaded_syntastic_rst_sphinx_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/rst/sphinx.vim	/^let s:save_cpo = &cpo$/;"	v
s:sphinx_cache_location	sources_non_forked/syntastic/syntax_checkers/rst/sphinx.vim	/^let s:sphinx_cache_location = syntastic#util#tmpdir()$/;"	v
syntastic	sources_non_forked/syntastic/syntax_checkers/rst/sphinx.vim	/^augroup syntastic$/;"	a
SyntaxCheckers_rst_sphinx_GetLocList	sources_non_forked/syntastic/syntax_checkers/rst/sphinx.vim	/^function! SyntaxCheckers_rst_sphinx_GetLocList() dict$/;"	f
g:loaded_syntastic_cs_mcs_checker	sources_non_forked/syntastic/syntax_checkers/cs/mcs.vim	/^let g:loaded_syntastic_cs_mcs_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/cs/mcs.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cs_mcs_GetLocList	sources_non_forked/syntastic/syntax_checkers/cs/mcs.vim	/^function! SyntaxCheckers_cs_mcs_GetLocList() dict$/;"	f
g:loaded_syntastic_cucumber_cucumber_checker	sources_non_forked/syntastic/syntax_checkers/cucumber/cucumber.vim	/^let g:loaded_syntastic_cucumber_cucumber_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/cucumber/cucumber.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cucumber_cucumber_GetLocList	sources_non_forked/syntastic/syntax_checkers/cucumber/cucumber.vim	/^function! SyntaxCheckers_cucumber_cucumber_GetLocList() dict$/;"	f
g:loaded_syntastic_pug_pug_lint_checker	sources_non_forked/syntastic/syntax_checkers/pug/pug_lint.vim	/^let g:loaded_syntastic_pug_pug_lint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/pug/pug_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_pug_pug_lint_GetLocList	sources_non_forked/syntastic/syntax_checkers/pug/pug_lint.vim	/^function! SyntaxCheckers_pug_pug_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_docbk_igor_checker	sources_non_forked/syntastic/syntax_checkers/docbk/igor.vim	/^let g:loaded_syntastic_docbk_igor_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/docbk/igor.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_docbk_igor_GetLocList	sources_non_forked/syntastic/syntax_checkers/docbk/igor.vim	/^function! SyntaxCheckers_docbk_igor_GetLocList() dict$/;"	f
g:loaded_syntastic_docbk_xmllint_checker	sources_non_forked/syntastic/syntax_checkers/docbk/xmllint.vim	/^let g:loaded_syntastic_docbk_xmllint_checker = 1$/;"	v
main	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^main([File]) ->$/;"	f
main	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^main(_) ->$/;"	f
which_compile_opts_profile	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^which_compile_opts_profile(File) ->$/;"	f
which_build_tool	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^which_build_tool(Dir, Profile) ->$/;"	f
rebar_file	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^rebar_file(Dir, normal) -> filename:join(Dir, "rebar.config");$/;"	f
rebar_file	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^rebar_file(Dir, test)   -> filename:join(Dir, "rebar.test.config").$/;"	f
erlangmk_file	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_file(Dir) -> filename:join(Dir, "erlang.mk").$/;"	f
rebar_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^rebar_opts(RebarFile) ->$/;"	f
erlangmk_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_opts(BaseDir, Profile) ->$/;"	f
erlangmk_port_receive_loop	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_port_receive_loop(Port, Stdout, BaseDir) ->$/;"	f
erlangmk_format_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_opts(Stdout, BaseDir) ->$/;"	f
erlangmk_format_erl_libs	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erl_libs(ErlLibsLine) ->$/;"	f
erlangmk_format_erlc_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(ErlcOptsLines, BaseDir) ->$/;"	f
erlangmk_format_erlc_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["+" ++ Option | Rest], Opts, BaseDir) ->$/;"	f
erlangmk_format_erlc_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-I" ++ Opt | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-I", [C | _] = Dir | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-W" ++ Warn | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-W", Warn | Rest], Opts, BaseDir) ->$/;"	f
erlangmk_format_erlc_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-D" ++ Opt | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts(["-D", [C | _] = Val0 | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts([PathFlag, [_ | _] = Dir | Rest], Opts, BaseDir)$/;"	f
erlangmk_format_erlc_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts([_ | Rest], Opts, BaseDir) ->$/;"	f
erlangmk_format_erlc_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^erlangmk_format_erlc_opts([], Opts, _) ->$/;"	f
make_term	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^make_term(Str) ->$/;"	f
split_at_equals	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^split_at_equals([$=|T], Acc) ->$/;"	f
split_at_equals	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^split_at_equals([H|T], Acc) ->$/;"	f
split_at_equals	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^split_at_equals([], Acc) ->$/;"	f
fallback_opts	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^fallback_opts() ->$/;"	f
nested_app_ebins	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^nested_app_ebins() ->$/;"	f
apps_dir_from_src	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^apps_dir_from_src(SrcFile) ->$/;"	f
get_root	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root(Dir) ->$/;"	f
get_root	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root([], Path) ->$/;"	f
get_root	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root(["src" | Tail], _Path) ->$/;"	f
get_root	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root(["test" | Tail], _Path) ->$/;"	f
get_root	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^get_root([_ | Tail], Path) ->$/;"	f
translate_paths	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^translate_paths(Dir, RebarOpts) ->$/;"	f
translate_path	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^translate_path(Dir, {i, Path}) ->$/;"	f
translate_path	sources_non_forked/syntastic/syntax_checkers/erlang/erlang_check_file.erl	/^translate_path(_, Other) -> Other.$/;"	f
g:loaded_syntastic_erlang_syntaxerl_checker	sources_non_forked/syntastic/syntax_checkers/erlang/syntaxerl.vim	/^let g:loaded_syntastic_erlang_syntaxerl_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/erlang/syntaxerl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_erlang_syntaxerl_GetLocList	sources_non_forked/syntastic/syntax_checkers/erlang/syntaxerl.vim	/^function! SyntaxCheckers_erlang_syntaxerl_GetLocList() dict$/;"	f
g:loaded_syntastic_erlang_erlang_checker	sources_non_forked/syntastic/syntax_checkers/erlang/escript.vim	/^let g:loaded_syntastic_erlang_erlang_checker = 1$/;"	v
g:syntastic_erlc_include_path	sources_non_forked/syntastic/syntax_checkers/erlang/escript.vim	/^    let g:syntastic_erlc_include_path = ''$/;"	v
s:check_file	sources_non_forked/syntastic/syntax_checkers/erlang/escript.vim	/^let s:check_file = syntastic#util#shescape(expand('<sfile>:p:h', 1) . syntastic#util#Slash() . 'erlang_check_file.erl')$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/erlang/escript.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_erlang_escript_GetLocList	sources_non_forked/syntastic/syntax_checkers/erlang/escript.vim	/^function! SyntaxCheckers_erlang_escript_GetLocList() dict$/;"	f
g:loaded_syntastic_llvm_llvm_checker	sources_non_forked/syntastic/syntax_checkers/llvm/llvm.vim	/^let g:loaded_syntastic_llvm_llvm_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/llvm/llvm.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_llvm_llvm_GetLocList	sources_non_forked/syntastic/syntax_checkers/llvm/llvm.vim	/^function! SyntaxCheckers_llvm_llvm_GetLocList() dict$/;"	f
g:loaded_syntastic_spec_rpmlint_checker	sources_non_forked/syntastic/syntax_checkers/spec/rpmlint.vim	/^let g:loaded_syntastic_spec_rpmlint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/spec/rpmlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_spec_rpmlint_GetLocList	sources_non_forked/syntastic/syntax_checkers/spec/rpmlint.vim	/^function! SyntaxCheckers_spec_rpmlint_GetLocList() dict$/;"	f
g:loaded_syntastic_r_svtools_checker	sources_non_forked/syntastic/syntax_checkers/r/svtools.vim	/^let g:loaded_syntastic_r_svtools_checker = 1$/;"	v
g:syntastic_r_svtools_styles	sources_non_forked/syntastic/syntax_checkers/r/svtools.vim	/^    let g:syntastic_r_svtools_styles = 'lint.style'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/r/svtools.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_r_svtools_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/r/svtools.vim	/^function! SyntaxCheckers_r_svtools_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_r_svtools_IsAvailable	sources_non_forked/syntastic/syntax_checkers/r/svtools.vim	/^function! SyntaxCheckers_r_svtools_IsAvailable() dict$/;"	f
SyntaxCheckers_r_svtools_GetLocList	sources_non_forked/syntastic/syntax_checkers/r/svtools.vim	/^function! SyntaxCheckers_r_svtools_GetLocList() dict$/;"	f
g:loaded_syntastic_r_lint_checker	sources_non_forked/syntastic/syntax_checkers/r/lint.vim	/^let g:loaded_syntastic_r_lint_checker = 1$/;"	v
g:syntastic_r_lint_styles	sources_non_forked/syntastic/syntax_checkers/r/lint.vim	/^    let g:syntastic_r_lint_styles = 'lint.style'$/;"	v
g:syntastic_r_lint_sort	sources_non_forked/syntastic/syntax_checkers/r/lint.vim	/^    let g:syntastic_r_lint_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/r/lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_r_lint_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/r/lint.vim	/^function! SyntaxCheckers_r_lint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_r_lint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/r/lint.vim	/^function! SyntaxCheckers_r_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_r_lint_GetLocList	sources_non_forked/syntastic/syntax_checkers/r/lint.vim	/^function! SyntaxCheckers_r_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_r_lintr_checker	sources_non_forked/syntastic/syntax_checkers/r/lintr.vim	/^let g:loaded_syntastic_r_lintr_checker = 1$/;"	v
g:syntastic_r_lintr_linters	sources_non_forked/syntastic/syntax_checkers/r/lintr.vim	/^    let g:syntastic_r_lintr_linters = 'default_linters'$/;"	v
g:syntastic_r_lintr_cache	sources_non_forked/syntastic/syntax_checkers/r/lintr.vim	/^    let g:syntastic_r_lintr_cache = 'FALSE'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/r/lintr.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_r_lintr_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/r/lintr.vim	/^function! SyntaxCheckers_r_lintr_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_r_lintr_IsAvailable	sources_non_forked/syntastic/syntax_checkers/r/lintr.vim	/^function! SyntaxCheckers_r_lintr_IsAvailable() dict$/;"	f
SyntaxCheckers_r_lintr_GetLocList	sources_non_forked/syntastic/syntax_checkers/r/lintr.vim	/^function! SyntaxCheckers_r_lintr_GetLocList() dict$/;"	f
g:loaded_syntastic_nasm_nasm_checker	sources_non_forked/syntastic/syntax_checkers/nasm/nasm.vim	/^let g:loaded_syntastic_nasm_nasm_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/nasm/nasm.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_nasm_nasm_GetLocList	sources_non_forked/syntastic/syntax_checkers/nasm/nasm.vim	/^function! SyntaxCheckers_nasm_nasm_GetLocList() dict$/;"	f
g:loaded_syntastic_rmd_lintr_checker	sources_non_forked/syntastic/syntax_checkers/rmd/lintr.vim	/^let g:loaded_syntastic_rmd_lintr_checker = 1$/;"	v
g:loaded_syntastic_java_javac_checker	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^let g:loaded_syntastic_java_javac_checker = 1$/;"	v
g:syntastic_java_javac_maven_pom_tags	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^let g:syntastic_java_javac_maven_pom_tags = ['build', 'properties']$/;"	v
g:syntastic_java_javac_maven_pom_properties	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^let g:syntastic_java_javac_maven_pom_properties = {}$/;"	v
s:has_maven	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^let s:has_maven = 0$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^let s:save_cpo = &cpo$/;"	v
g:syntastic_java_javac_executable	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_executable = 'javac'$/;"	v
g:syntastic_java_maven_executable	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_maven_executable = 'mvn'$/;"	v
g:syntastic_java_javac_options	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_options = '-Xlint'$/;"	v
g:syntastic_java_maven_options	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_maven_options = ''$/;"	v
g:syntastic_java_javac_classpath	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_classpath = ''$/;"	v
g:syntastic_java_javac_delete_output	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_delete_output = 1$/;"	v
g:syntastic_java_javac_autoload_maven_classpath	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_autoload_maven_classpath = 1$/;"	v
g:syntastic_java_javac_config_file_enabled	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_config_file_enabled = 0$/;"	v
g:syntastic_java_javac_config_file	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_config_file = '.syntastic_javac_config'$/;"	v
g:syntastic_java_javac_custom_classpath_command	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_custom_classpath_command = ''$/;"	v
g:syntastic_java_javac_maven_pom_ftime	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_maven_pom_ftime = {}$/;"	v
g:syntastic_java_javac_maven_pom_classpath	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^    let g:syntastic_java_javac_maven_pom_classpath = {}$/;"	v
s:_FILE_SHORTCUTS	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^let s:_FILE_SHORTCUTS = {$/;"	v
SyntasticJavacEditClasspath	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^command! SyntasticJavacEditClasspath call s:EditClasspath()$/;"	c
SyntasticJavacEditConfig	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^command! SyntasticJavacEditConfig    call s:EditConfig()$/;"	c
SyntaxCheckers_java_javac_IsAvailable	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! SyntaxCheckers_java_javac_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_java_javac_GetLocList	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! SyntaxCheckers_java_javac_GetLocList() dict " {{{1$/;"	f
RemoveCarriageReturn	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! s:RemoveCarriageReturn(line) " {{{2$/;"	f
ClassSep	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! s:ClassSep() " {{{2$/;"	f
AddToClasspath	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! s:AddToClasspath(classpath, path) " {{{2$/;"	f
SplitClasspath	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! s:SplitClasspath(classpath) " {{{2$/;"	f
LoadConfigFile	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! s:LoadConfigFile() " {{{2$/;"	f
SaveClasspath	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! s:SaveClasspath() " {{{2$/;"	f
EditClasspath	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! s:EditClasspath() " {{{2$/;"	f
SaveConfig	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! s:SaveConfig() " {{{2$/;"	f
EditConfig	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! s:EditConfig() " {{{2$/;"	f
GetMavenProperties	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! s:GetMavenProperties() " {{{2$/;"	f
GetMavenClasspath	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! s:GetMavenClasspath() " {{{2$/;"	f
MavenOutputDirectory	sources_non_forked/syntastic/syntax_checkers/java/javac.vim	/^function! s:MavenOutputDirectory() " {{{2$/;"	f
g:loaded_syntastic_java_checkstyle_checker	sources_non_forked/syntastic/syntax_checkers/java/checkstyle.vim	/^let g:loaded_syntastic_java_checkstyle_checker = 1$/;"	v
g:syntastic_java_checkstyle_classpath	sources_non_forked/syntastic/syntax_checkers/java/checkstyle.vim	/^    let g:syntastic_java_checkstyle_classpath = 'checkstyle-6.10.1-all.jar'$/;"	v
g:syntastic_java_checkstyle_conf_file	sources_non_forked/syntastic/syntax_checkers/java/checkstyle.vim	/^    let g:syntastic_java_checkstyle_conf_file = 'sun_checks.xml'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/java/checkstyle.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_java_checkstyle_IsAvailable	sources_non_forked/syntastic/syntax_checkers/java/checkstyle.vim	/^function! SyntaxCheckers_java_checkstyle_IsAvailable() dict$/;"	f
SyntaxCheckers_java_checkstyle_GetLocList	sources_non_forked/syntastic/syntax_checkers/java/checkstyle.vim	/^function! SyntaxCheckers_java_checkstyle_GetLocList() dict$/;"	f
g:loaded_syntastic_html_jshint_checker	sources_non_forked/syntastic/syntax_checkers/html/jshint.vim	/^let g:loaded_syntastic_html_jshint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/html/jshint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_html_jshint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/html/jshint.vim	/^function! SyntaxCheckers_html_jshint_IsAvailable() dict$/;"	f
SyntaxCheckers_html_jshint_GetLocList	sources_non_forked/syntastic/syntax_checkers/html/jshint.vim	/^function! SyntaxCheckers_html_jshint_GetLocList() dict$/;"	f
g:loaded_syntastic_html_tidy_checker	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^let g:loaded_syntastic_html_tidy_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^let s:save_cpo = &cpo$/;"	v
g:syntastic_html_tidy_ignore_errors	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^    let g:syntastic_html_tidy_ignore_errors = []$/;"	v
g:syntastic_html_tidy_blocklevel_tags	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^    let g:syntastic_html_tidy_blocklevel_tags = []$/;"	v
g:syntastic_html_tidy_inline_tags	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^    let g:syntastic_html_tidy_inline_tags = []$/;"	v
g:syntastic_html_tidy_empty_tags	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^    let g:syntastic_html_tidy_empty_tags = []$/;"	v
s:IGNORE_ERRORS	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^let s:IGNORE_ERRORS = [$/;"	v
s:BLOCKLEVEL_TAGS	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^let s:BLOCKLEVEL_TAGS = [$/;"	v
s:INLINE_TAGS	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^let s:INLINE_TAGS = [$/;"	v
s:EMPTY_TAGS	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^let s:EMPTY_TAGS = [$/;"	v
SyntaxCheckers_html_tidy_GetLocList	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^function! SyntaxCheckers_html_tidy_GetLocList() dict " {{{1$/;"	f
TidyEncOptByFenc	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^function! s:TidyEncOptByFenc() " {{{2$/;"	f
IgnoreError	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^function! s:IgnoreError(text) " {{{2$/;"	f
NewTags	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^function! s:NewTags(name) " {{{2$/;"	f
Args	sources_non_forked/syntastic/syntax_checkers/html/tidy.vim	/^function! s:Args() " {{{2$/;"	f
g:loaded_syntastic_html_htmlhint_checker	sources_non_forked/syntastic/syntax_checkers/html/htmlhint.vim	/^let g:loaded_syntastic_html_htmlhint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/html/htmlhint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_html_htmlhint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/html/htmlhint.vim	/^function! SyntaxCheckers_html_htmlhint_IsAvailable() dict$/;"	f
SyntaxCheckers_html_htmlhint_GetLocList	sources_non_forked/syntastic/syntax_checkers/html/htmlhint.vim	/^function! SyntaxCheckers_html_htmlhint_GetLocList() dict$/;"	f
g:loaded_syntastic_html_textlint_checker	sources_non_forked/syntastic/syntax_checkers/html/textlint.vim	/^let g:loaded_syntastic_html_textlint_checker = 1$/;"	v
g:loaded_syntastic_html_validator_checker	sources_non_forked/syntastic/syntax_checkers/html/validator.vim	/^let g:loaded_syntastic_html_validator_checker=1$/;"	v
g:syntastic_html_validator_api	sources_non_forked/syntastic/syntax_checkers/html/validator.vim	/^    let g:syntastic_html_validator_api = 'https:\/\/validator.nu\/'$/;"	v
g:syntastic_html_validator_parser	sources_non_forked/syntastic/syntax_checkers/html/validator.vim	/^    let g:syntastic_html_validator_parser = ''$/;"	v
g:syntastic_html_validator_nsfilter	sources_non_forked/syntastic/syntax_checkers/html/validator.vim	/^    let g:syntastic_html_validator_nsfilter = ''$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/html/validator.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_html_validator_GetLocList	sources_non_forked/syntastic/syntax_checkers/html/validator.vim	/^function! SyntaxCheckers_html_validator_GetLocList() dict$/;"	f
g:loaded_syntastic_html_proselint_checker	sources_non_forked/syntastic/syntax_checkers/html/proselint.vim	/^let g:loaded_syntastic_html_proselint_checker = 1$/;"	v
g:loaded_syntastic_html_w3_checker	sources_non_forked/syntastic/syntax_checkers/html/w3.vim	/^let g:loaded_syntastic_html_w3_checker = 1$/;"	v
g:syntastic_html_w3_api	sources_non_forked/syntastic/syntax_checkers/html/w3.vim	/^    let g:syntastic_html_w3_api = 'http:\/\/validator.w3.org\/check'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/html/w3.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_html_w3_GetLocList	sources_non_forked/syntastic/syntax_checkers/html/w3.vim	/^function! SyntaxCheckers_html_w3_GetLocList() dict$/;"	f
g:loaded_syntastic_html_eslint_checker	sources_non_forked/syntastic/syntax_checkers/html/eslint.vim	/^let g:loaded_syntastic_html_eslint_checker = 1$/;"	v
g:loaded_syntastic_html_gjslint_checker	sources_non_forked/syntastic/syntax_checkers/html/gjslint.vim	/^let g:loaded_syntastic_html_gjslint_checker = 1$/;"	v
g:loaded_syntastic_haskell_hdevtools_checker	sources_non_forked/syntastic/syntax_checkers/haskell/hdevtools.vim	/^let g:loaded_syntastic_haskell_hdevtools_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/haskell/hdevtools.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_haskell_hdevtools_GetLocList	sources_non_forked/syntastic/syntax_checkers/haskell/hdevtools.vim	/^function! SyntaxCheckers_haskell_hdevtools_GetLocList() dict$/;"	f
g:loaded_syntastic_haskell_hlint_checker	sources_non_forked/syntastic/syntax_checkers/haskell/hlint.vim	/^let g:loaded_syntastic_haskell_hlint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/haskell/hlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_haskell_hlint_GetLocList	sources_non_forked/syntastic/syntax_checkers/haskell/hlint.vim	/^function! SyntaxCheckers_haskell_hlint_GetLocList() dict$/;"	f
g:loaded_syntastic_haskell_scan_checker	sources_non_forked/syntastic/syntax_checkers/haskell/scan.vim	/^let g:loaded_syntastic_haskell_scan_checker = 1$/;"	v
g:syntastic_haskell_scan_sort	sources_non_forked/syntastic/syntax_checkers/haskell/scan.vim	/^    let g:syntastic_haskell_scan_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/haskell/scan.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_haskell_scan_GetLocList	sources_non_forked/syntastic/syntax_checkers/haskell/scan.vim	/^function! SyntaxCheckers_haskell_scan_GetLocList() dict$/;"	f
g:loaded_syntastic_php_phpmd_checker	sources_non_forked/syntastic/syntax_checkers/php/phpmd.vim	/^let g:loaded_syntastic_php_phpmd_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/php/phpmd.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_php_phpmd_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/php/phpmd.vim	/^function! SyntaxCheckers_php_phpmd_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_php_phpmd_GetLocList	sources_non_forked/syntastic/syntax_checkers/php/phpmd.vim	/^function! SyntaxCheckers_php_phpmd_GetLocList() dict$/;"	f
g:loaded_syntastic_php_phpstan_checker	sources_non_forked/syntastic/syntax_checkers/php/phpstan.vim	/^let g:loaded_syntastic_php_phpstan_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/php/phpstan.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_php_phpstan_IsAvailable	sources_non_forked/syntastic/syntax_checkers/php/phpstan.vim	/^function! SyntaxCheckers_php_phpstan_IsAvailable() dict$/;"	f
SyntaxCheckers_php_phpstan_GetLocList	sources_non_forked/syntastic/syntax_checkers/php/phpstan.vim	/^function! SyntaxCheckers_php_phpstan_GetLocList() dict$/;"	f
g:loaded_syntastic_php_php_checker	sources_non_forked/syntastic/syntax_checkers/php/php.vim	/^let g:loaded_syntastic_php_php_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/php/php.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_php_php_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/php/php.vim	/^function! SyntaxCheckers_php_php_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_php_php_GetLocList	sources_non_forked/syntastic/syntax_checkers/php/php.vim	/^function! SyntaxCheckers_php_php_GetLocList() dict$/;"	f
g:loaded_syntastic_php_phplint_checker	sources_non_forked/syntastic/syntax_checkers/php/phplint.vim	/^let g:loaded_syntastic_php_phplint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/php/phplint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_php_phplint_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/php/phplint.vim	/^function! SyntaxCheckers_php_phplint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_php_phplint_GetLocList	sources_non_forked/syntastic/syntax_checkers/php/phplint.vim	/^function! SyntaxCheckers_php_phplint_GetLocList() dict$/;"	f
g:loaded_syntastic_php_phpcs_checker	sources_non_forked/syntastic/syntax_checkers/php/phpcs.vim	/^let g:loaded_syntastic_php_phpcs_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/php/phpcs.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_php_phpcs_GetLocList	sources_non_forked/syntastic/syntax_checkers/php/phpcs.vim	/^function! SyntaxCheckers_php_phpcs_GetLocList() dict$/;"	f
g:loaded_syntastic_rnc_rnv_checker	sources_non_forked/syntastic/syntax_checkers/rnc/rnv.vim	/^let g:loaded_syntastic_rnc_rnv_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/rnc/rnv.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_rnc_rnv_GetLocList	sources_non_forked/syntastic/syntax_checkers/rnc/rnv.vim	/^function! SyntaxCheckers_rnc_rnv_GetLocList() dict$/;"	f
g:loaded_syntastic_lua_luac_checker	sources_non_forked/syntastic/syntax_checkers/lua/luac.vim	/^let g:loaded_syntastic_lua_luac_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/lua/luac.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_lua_luac_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/lua/luac.vim	/^function! SyntaxCheckers_lua_luac_GetHighlightRegex(pos)$/;"	f
SyntaxCheckers_lua_luac_GetLocList	sources_non_forked/syntastic/syntax_checkers/lua/luac.vim	/^function! SyntaxCheckers_lua_luac_GetLocList() dict$/;"	f
g:loaded_syntastic_lua_luacheck_checker	sources_non_forked/syntastic/syntax_checkers/lua/luacheck.vim	/^let g:loaded_syntastic_lua_luacheck_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/lua/luacheck.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_lua_luacheck_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/lua/luacheck.vim	/^function! SyntaxCheckers_lua_luacheck_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_lua_luacheck_GetLocList	sources_non_forked/syntastic/syntax_checkers/lua/luacheck.vim	/^function! SyntaxCheckers_lua_luacheck_GetLocList() dict$/;"	f
g:loaded_syntastic_xml_xmllint_checker	sources_non_forked/syntastic/syntax_checkers/xml/xmllint.vim	/^let g:loaded_syntastic_xml_xmllint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/xml/xmllint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_xml_xmllint_GetLocList	sources_non_forked/syntastic/syntax_checkers/xml/xmllint.vim	/^function! SyntaxCheckers_xml_xmllint_GetLocList() dict$/;"	f
g:loaded_syntastic_xml_plutil_checker	sources_non_forked/syntastic/syntax_checkers/xml/plutil.vim	/^let g:loaded_syntastic_xml_plutil_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/xml/plutil.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_xml_plutil_GetLocList	sources_non_forked/syntastic/syntax_checkers/xml/plutil.vim	/^function! SyntaxCheckers_xml_plutil_GetLocList() dict$/;"	f
g:loaded_syntastic_solidity_solium_checker	sources_non_forked/syntastic/syntax_checkers/solidity/solium.vim	/^let g:loaded_syntastic_solidity_solium_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/solidity/solium.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_solidity_solium_GetLocList	sources_non_forked/syntastic/syntax_checkers/solidity/solium.vim	/^function! SyntaxCheckers_solidity_solium_GetLocList() dict$/;"	f
g:loaded_syntastic_solidity_solc_checker	sources_non_forked/syntastic/syntax_checkers/solidity/solc.vim	/^let g:loaded_syntastic_solidity_solc_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/solidity/solc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_solidity_solc_GetLocList	sources_non_forked/syntastic/syntax_checkers/solidity/solc.vim	/^function! SyntaxCheckers_solidity_solc_GetLocList() dict$/;"	f
g:loaded_syntastic_bemhtml_bemhtmllint_checker	sources_non_forked/syntastic/syntax_checkers/bemhtml/bemhtmllint.vim	/^let g:loaded_syntastic_bemhtml_bemhtmllint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/bemhtml/bemhtmllint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_bemhtml_bemhtmllint_GetLocList	sources_non_forked/syntastic/syntax_checkers/bemhtml/bemhtmllint.vim	/^function SyntaxCheckers_bemhtml_bemhtmllint_GetLocList() dict$/;"	f
g:loaded_syntastic_glsl_cgc_checker	sources_non_forked/syntastic/syntax_checkers/glsl/cgc.vim	/^let g:loaded_syntastic_glsl_cgc_checker = 1$/;"	v
s:glsl_extensions	sources_non_forked/syntastic/syntax_checkers/glsl/cgc.vim	/^let s:glsl_extensions = {$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/glsl/cgc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_glsl_cgc_GetLocList	sources_non_forked/syntastic/syntax_checkers/glsl/cgc.vim	/^function! SyntaxCheckers_glsl_cgc_GetLocList() dict " {{{1$/;"	f
GetProfile	sources_non_forked/syntastic/syntax_checkers/glsl/cgc.vim	/^function! s:GetProfile(buf) " {{{2$/;"	f
g:loaded_syntastic_ansible_ansible_lint_checker	sources_non_forked/syntastic/syntax_checkers/ansible/ansible_lint.vim	/^let g:loaded_syntastic_ansible_ansible_lint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/ansible/ansible_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ansible_ansible_lint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/ansible/ansible_lint.vim	/^function! SyntaxCheckers_ansible_ansible_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_ansible_ansible_lint_GetLocList	sources_non_forked/syntastic/syntax_checkers/ansible/ansible_lint.vim	/^function! SyntaxCheckers_ansible_ansible_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_sh_bashate_checker	sources_non_forked/syntastic/syntax_checkers/sh/bashate.vim	/^let g:loaded_syntastic_sh_bashate_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/sh/bashate.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sh_bashate_GetLocList	sources_non_forked/syntastic/syntax_checkers/sh/bashate.vim	/^function! SyntaxCheckers_sh_bashate_GetLocList() dict$/;"	f
g:loaded_syntastic_sh_shellcheck_checker	sources_non_forked/syntastic/syntax_checkers/sh/shellcheck.vim	/^let g:loaded_syntastic_sh_shellcheck_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/sh/shellcheck.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sh_shellcheck_GetLocList	sources_non_forked/syntastic/syntax_checkers/sh/shellcheck.vim	/^function! SyntaxCheckers_sh_shellcheck_GetLocList() dict " {{{1$/;"	f
GetShell	sources_non_forked/syntastic/syntax_checkers/sh/shellcheck.vim	/^function! s:GetShell(buf) " {{{2$/;"	f
g:loaded_syntastic_sh_checkbashisms_checker	sources_non_forked/syntastic/syntax_checkers/sh/checkbashisms.vim	/^let g:loaded_syntastic_sh_checkbashisms_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/sh/checkbashisms.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sh_checkbashisms_GetLocList	sources_non_forked/syntastic/syntax_checkers/sh/checkbashisms.vim	/^function! SyntaxCheckers_sh_checkbashisms_GetLocList() dict$/;"	f
g:loaded_syntastic_sh_sh_checker	sources_non_forked/syntastic/syntax_checkers/sh/sh.vim	/^let g:loaded_syntastic_sh_sh_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/sh/sh.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sh_sh_IsAvailable	sources_non_forked/syntastic/syntax_checkers/sh/sh.vim	/^function! SyntaxCheckers_sh_sh_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_sh_sh_GetLocList	sources_non_forked/syntastic/syntax_checkers/sh/sh.vim	/^function! SyntaxCheckers_sh_sh_GetLocList() dict " {{{1$/;"	f
GetShell	sources_non_forked/syntastic/syntax_checkers/sh/sh.vim	/^function! s:GetShell(buf) " {{{2$/;"	f
IsShellValid	sources_non_forked/syntastic/syntax_checkers/sh/sh.vim	/^function! s:IsShellValid(buf) " {{{2$/;"	f
ForwardToZshChecker	sources_non_forked/syntastic/syntax_checkers/sh/sh.vim	/^function! s:ForwardToZshChecker() " {{{2$/;"	f
g:loaded_syntastic_vhdl_ghdl_checker	sources_non_forked/syntastic/syntax_checkers/vhdl/ghdl.vim	/^let g:loaded_syntastic_vhdl_ghdl_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/vhdl/ghdl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_vhdl_ghdl_GetLocList	sources_non_forked/syntastic/syntax_checkers/vhdl/ghdl.vim	/^function! SyntaxCheckers_vhdl_ghdl_GetLocList() dict$/;"	f
g:loaded_syntastic_vhdl_vcom_checker	sources_non_forked/syntastic/syntax_checkers/vhdl/vcom.vim	/^let g:loaded_syntastic_vhdl_vcom_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/vhdl/vcom.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_vhdl_vcom_GetLocList	sources_non_forked/syntastic/syntax_checkers/vhdl/vcom.vim	/^function! SyntaxCheckers_vhdl_vcom_GetLocList() dict$/;"	f
g:loaded_syntastic_tcl_nagelfar_checker	sources_non_forked/syntastic/syntax_checkers/tcl/nagelfar.vim	/^let g:loaded_syntastic_tcl_nagelfar_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/tcl/nagelfar.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_tcl_nagelfar_GetLocList	sources_non_forked/syntastic/syntax_checkers/tcl/nagelfar.vim	/^function! SyntaxCheckers_tcl_nagelfar_GetLocList() dict$/;"	f
g:loaded_syntastic_json_jsonlint_checker	sources_non_forked/syntastic/syntax_checkers/json/jsonlint.vim	/^let g:loaded_syntastic_json_jsonlint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/json/jsonlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_json_jsonlint_GetLocList	sources_non_forked/syntastic/syntax_checkers/json/jsonlint.vim	/^function! SyntaxCheckers_json_jsonlint_GetLocList() dict$/;"	f
g:loaded_syntastic_json_jsonval_checker	sources_non_forked/syntastic/syntax_checkers/json/jsonval.vim	/^let g:loaded_syntastic_json_jsonval_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/json/jsonval.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_json_jsonval_GetLocList	sources_non_forked/syntastic/syntax_checkers/json/jsonval.vim	/^function! SyntaxCheckers_json_jsonval_GetLocList() dict$/;"	f
g:loaded_syntastic_po_msgfmt_checker	sources_non_forked/syntastic/syntax_checkers/po/msgfmt.vim	/^let g:loaded_syntastic_po_msgfmt_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/po/msgfmt.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_po_msgfmt_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/po/msgfmt.vim	/^function! SyntaxCheckers_po_msgfmt_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_po_msgfmt_GetLocList	sources_non_forked/syntastic/syntax_checkers/po/msgfmt.vim	/^function! SyntaxCheckers_po_msgfmt_GetLocList() dict$/;"	f
g:loaded_syntastic_po_dennis_checker	sources_non_forked/syntastic/syntax_checkers/po/dennis.vim	/^let g:loaded_syntastic_po_dennis_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/po/dennis.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_po_dennis_GetLocList	sources_non_forked/syntastic/syntax_checkers/po/dennis.vim	/^function! SyntaxCheckers_po_dennis_GetLocList() dict$/;"	f
g:loaded_syntastic_verilog_iverilog_checker	sources_non_forked/syntastic/syntax_checkers/verilog/iverilog.vim	/^let g:loaded_syntastic_verilog_iverilog_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/verilog/iverilog.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_verilog_iverilog_GetLocList	sources_non_forked/syntastic/syntax_checkers/verilog/iverilog.vim	/^function! SyntaxCheckers_verilog_iverilog_GetLocList() dict$/;"	f
g:loaded_syntastic_verilog_verilator_checker	sources_non_forked/syntastic/syntax_checkers/verilog/verilator.vim	/^let g:loaded_syntastic_verilog_verilator_checker = 1$/;"	v
g:syntastic_verilog_compiler_options	sources_non_forked/syntastic/syntax_checkers/verilog/verilator.vim	/^    let g:syntastic_verilog_compiler_options = '-Wall'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/verilog/verilator.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_verilog_verilator_IsAvailable	sources_non_forked/syntastic/syntax_checkers/verilog/verilator.vim	/^function! SyntaxCheckers_verilog_verilator_IsAvailable() dict$/;"	f
SyntaxCheckers_verilog_verilator_GetLocList	sources_non_forked/syntastic/syntax_checkers/verilog/verilator.vim	/^function! SyntaxCheckers_verilog_verilator_GetLocList() dict$/;"	f
g:loaded_syntastic_asciidoc_proselint_checker	sources_non_forked/syntastic/syntax_checkers/asciidoc/proselint.vim	/^let g:loaded_syntastic_asciidoc_proselint_checker = 1$/;"	v
g:loaded_syntastic_asciidoc_asciidoc_checker	sources_non_forked/syntastic/syntax_checkers/asciidoc/asciidoc.vim	/^let g:loaded_syntastic_asciidoc_asciidoc_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/asciidoc/asciidoc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_asciidoc_asciidoc_GetLocList	sources_non_forked/syntastic/syntax_checkers/asciidoc/asciidoc.vim	/^function! SyntaxCheckers_asciidoc_asciidoc_GetLocList() dict$/;"	f
g:loaded_syntastic_handlebars_handlebars_checker	sources_non_forked/syntastic/syntax_checkers/handlebars/handlebars.vim	/^let g:loaded_syntastic_handlebars_handlebars_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/handlebars/handlebars.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_handlebars_handlebars_GetLocList	sources_non_forked/syntastic/syntax_checkers/handlebars/handlebars.vim	/^function! SyntaxCheckers_handlebars_handlebars_GetLocList() dict$/;"	f
g:loaded_syntastic_scala_scalastyle_checker	sources_non_forked/syntastic/syntax_checkers/scala/scalastyle.vim	/^let g:loaded_syntastic_scala_scalastyle_checker = 1$/;"	v
g:syntastic_scala_scalastyle_jar	sources_non_forked/syntastic/syntax_checkers/scala/scalastyle.vim	/^    let g:syntastic_scala_scalastyle_jar = 'scalastyle-batch_2.10.jar'$/;"	v
g:syntastic_scala_scalastyle_config_file	sources_non_forked/syntastic/syntax_checkers/scala/scalastyle.vim	/^    let g:syntastic_scala_scalastyle_config_file = 'scalastyle_config.xml'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/scala/scalastyle.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_scala_scalastyle_IsAvailable	sources_non_forked/syntastic/syntax_checkers/scala/scalastyle.vim	/^function! SyntaxCheckers_scala_scalastyle_IsAvailable() dict$/;"	f
SyntaxCheckers_scala_scalastyle_GetLocList	sources_non_forked/syntastic/syntax_checkers/scala/scalastyle.vim	/^function! SyntaxCheckers_scala_scalastyle_GetLocList() dict$/;"	f
g:loaded_syntastic_scala_scalac_checker	sources_non_forked/syntastic/syntax_checkers/scala/scalac.vim	/^let g:loaded_syntastic_scala_scalac_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/scala/scalac.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_scala_scalac_GetLocList	sources_non_forked/syntastic/syntax_checkers/scala/scalac.vim	/^function! SyntaxCheckers_scala_scalac_GetLocList() dict$/;"	f
g:loaded_syntastic_scala_fsc_checker	sources_non_forked/syntastic/syntax_checkers/scala/fsc.vim	/^let g:loaded_syntastic_scala_fsc_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/scala/fsc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_scala_fsc_GetLocList	sources_non_forked/syntastic/syntax_checkers/scala/fsc.vim	/^function! SyntaxCheckers_scala_fsc_GetLocList() dict$/;"	f
g:loaded_syntastic_dustjs_swiffer_checker	sources_non_forked/syntastic/syntax_checkers/dustjs/swiffer.vim	/^let g:loaded_syntastic_dustjs_swiffer_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/dustjs/swiffer.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_dustjs_swiffer_GetLocList	sources_non_forked/syntastic/syntax_checkers/dustjs/swiffer.vim	/^function! SyntaxCheckers_dustjs_swiffer_GetLocList() dict$/;"	f
g:loaded_syntastic_vala_valac_checker	sources_non_forked/syntastic/syntax_checkers/vala/valac.vim	/^let g:loaded_syntastic_vala_valac_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/vala/valac.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_vala_valac_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/vala/valac.vim	/^function! SyntaxCheckers_vala_valac_GetHighlightRegex(pos) " {{{1$/;"	f
SyntaxCheckers_vala_valac_GetLocList	sources_non_forked/syntastic/syntax_checkers/vala/valac.vim	/^function! SyntaxCheckers_vala_valac_GetLocList() dict " {{{1$/;"	f
GetValaOpts	sources_non_forked/syntastic/syntax_checkers/vala/valac.vim	/^function! s:GetValaOpts(buf, name, comment, cmd) " {{{2$/;"	f
g:loaded_syntastic_cpp_avrgcc_checker	sources_non_forked/syntastic/syntax_checkers/cpp/avrgcc.vim	/^let g:loaded_syntastic_cpp_avrgcc_checker = 1$/;"	v
g:loaded_syntastic_cpp_clang_check_checker	sources_non_forked/syntastic/syntax_checkers/cpp/clang_check.vim	/^let g:loaded_syntastic_cpp_clang_check_checker = 1$/;"	v
g:loaded_syntastic_cpp_flawfinder_checker	sources_non_forked/syntastic/syntax_checkers/cpp/flawfinder.vim	/^let g:loaded_syntastic_cpp_flawfinder_checker = 1$/;"	v
g:syntastic_cpp_flawfinder_thres	sources_non_forked/syntastic/syntax_checkers/cpp/flawfinder.vim	/^    let g:syntastic_cpp_flawfinder_thres = 3$/;"	v
g:loaded_syntastic_cpp_gcc_checker	sources_non_forked/syntastic/syntax_checkers/cpp/gcc.vim	/^let g:loaded_syntastic_cpp_gcc_checker = 1$/;"	v
g:syntastic_cpp_compiler_options	sources_non_forked/syntastic/syntax_checkers/cpp/gcc.vim	/^    let g:syntastic_cpp_compiler_options = ''$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/cpp/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cpp_gcc_IsAvailable	sources_non_forked/syntastic/syntax_checkers/cpp/gcc.vim	/^function! SyntaxCheckers_cpp_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_cpp_gcc_GetLocList	sources_non_forked/syntastic/syntax_checkers/cpp/gcc.vim	/^function! SyntaxCheckers_cpp_gcc_GetLocList() dict$/;"	f
g:loaded_syntastic_cpp_oclint_checker	sources_non_forked/syntastic/syntax_checkers/cpp/oclint.vim	/^let g:loaded_syntastic_cpp_oclint_checker = 1$/;"	v
g:loaded_syntastic_cpp_verapp_checker	sources_non_forked/syntastic/syntax_checkers/cpp/verapp.vim	/^let g:loaded_syntastic_cpp_verapp_checker = 1$/;"	v
g:syntastic_verapp_config_file	sources_non_forked/syntastic/syntax_checkers/cpp/verapp.vim	/^    let g:syntastic_verapp_config_file = '.syntastic_verapp_config'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/cpp/verapp.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cpp_verapp_GetLocList	sources_non_forked/syntastic/syntax_checkers/cpp/verapp.vim	/^function! SyntaxCheckers_cpp_verapp_GetLocList() dict$/;"	f
g:loaded_syntastic_cpp_cppcheck_checker	sources_non_forked/syntastic/syntax_checkers/cpp/cppcheck.vim	/^let g:loaded_syntastic_cpp_cppcheck_checker = 1$/;"	v
g:loaded_syntastic_cpp_clang_tidy_checker	sources_non_forked/syntastic/syntax_checkers/cpp/clang_tidy.vim	/^let g:loaded_syntastic_cpp_clang_tidy_checker = 1$/;"	v
g:loaded_syntastic_cpp_pc_lint_checker	sources_non_forked/syntastic/syntax_checkers/cpp/pc_lint.vim	/^let g:loaded_syntastic_cpp_pc_lint_checker = 1$/;"	v
g:loaded_syntastic_cpp_cpplint_checker	sources_non_forked/syntastic/syntax_checkers/cpp/cpplint.vim	/^let g:loaded_syntastic_cpp_cpplint_checker = 1$/;"	v
g:syntastic_cpp_cpplint_thres	sources_non_forked/syntastic/syntax_checkers/cpp/cpplint.vim	/^    let g:syntastic_cpp_cpplint_thres = 5$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/cpp/cpplint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cpp_cpplint_GetLocList	sources_non_forked/syntastic/syntax_checkers/cpp/cpplint.vim	/^function! SyntaxCheckers_cpp_cpplint_GetLocList() dict$/;"	f
g:loaded_syntastic_cpp_cppclean_checker	sources_non_forked/syntastic/syntax_checkers/cpp/cppclean.vim	/^let g:loaded_syntastic_cpp_cppclean_checker = 1$/;"	v
g:loaded_syntastic_matlab_mlint_checker	sources_non_forked/syntastic/syntax_checkers/matlab/mlint.vim	/^let g:loaded_syntastic_matlab_mlint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/matlab/mlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_matlab_mlint_GetLocList	sources_non_forked/syntastic/syntax_checkers/matlab/mlint.vim	/^function! SyntaxCheckers_matlab_mlint_GetLocList() dict$/;"	f
g:loaded_syntastic_coffee_coffee_jshint_checker	sources_non_forked/syntastic/syntax_checkers/coffee/coffee_jshint.vim	/^let g:loaded_syntastic_coffee_coffee_jshint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/coffee/coffee_jshint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_coffee_coffee_jshint_GetLocList	sources_non_forked/syntastic/syntax_checkers/coffee/coffee_jshint.vim	/^function! SyntaxCheckers_coffee_coffee_jshint_GetLocList() dict$/;"	f
g:loaded_syntastic_coffee_coffee_checker	sources_non_forked/syntastic/syntax_checkers/coffee/coffee.vim	/^let g:loaded_syntastic_coffee_coffee_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/coffee/coffee.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_coffee_coffee_IsAvailable	sources_non_forked/syntastic/syntax_checkers/coffee/coffee.vim	/^function! SyntaxCheckers_coffee_coffee_IsAvailable() dict$/;"	f
SyntaxCheckers_coffee_coffee_GetLocList	sources_non_forked/syntastic/syntax_checkers/coffee/coffee.vim	/^function! SyntaxCheckers_coffee_coffee_GetLocList() dict$/;"	f
g:loaded_syntastic_coffee_coffeelint_checker	sources_non_forked/syntastic/syntax_checkers/coffee/coffeelint.vim	/^let g:loaded_syntastic_coffee_coffeelint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/coffee/coffeelint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_coffee_coffeelint_GetLocList	sources_non_forked/syntastic/syntax_checkers/coffee/coffeelint.vim	/^function! SyntaxCheckers_coffee_coffeelint_GetLocList() dict$/;"	f
g:loaded_syntastic_yaml_yamllint_checker	sources_non_forked/syntastic/syntax_checkers/yaml/yamllint.vim	/^let g:loaded_syntastic_yaml_yamllint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/yaml/yamllint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_yaml_yamllint_GetLocList	sources_non_forked/syntastic/syntax_checkers/yaml/yamllint.vim	/^function! SyntaxCheckers_yaml_yamllint_GetLocList() dict$/;"	f
g:loaded_syntastic_yaml_jsyaml_checker	sources_non_forked/syntastic/syntax_checkers/yaml/jsyaml.vim	/^let g:loaded_syntastic_yaml_jsyaml_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/yaml/jsyaml.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_yaml_jsyaml_GetLocList	sources_non_forked/syntastic/syntax_checkers/yaml/jsyaml.vim	/^function! SyntaxCheckers_yaml_jsyaml_GetLocList() dict$/;"	f
g:loaded_syntastic_yaml_yamlxs_checker	sources_non_forked/syntastic/syntax_checkers/yaml/yamlxs.vim	/^let g:loaded_syntastic_yaml_yamlxs_checker = 1$/;"	v
g:syntastic_perl_lib_path	sources_non_forked/syntastic/syntax_checkers/yaml/yamlxs.vim	/^    let g:syntastic_perl_lib_path = []$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/yaml/yamlxs.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_yaml_yamlxs_IsAvailable	sources_non_forked/syntastic/syntax_checkers/yaml/yamlxs.vim	/^function! SyntaxCheckers_yaml_yamlxs_IsAvailable() dict$/;"	f
SyntaxCheckers_yaml_yamlxs_GetLocList	sources_non_forked/syntastic/syntax_checkers/yaml/yamlxs.vim	/^function! SyntaxCheckers_yaml_yamlxs_GetLocList() dict$/;"	f
Modules	sources_non_forked/syntastic/syntax_checkers/yaml/yamlxs.vim	/^function s:Modules(buf)$/;"	f
g:loaded_syntastic_fortran_gfortran_checker	sources_non_forked/syntastic/syntax_checkers/fortran/gfortran.vim	/^let g:loaded_syntastic_fortran_gfortran_checker = 1$/;"	v
g:syntastic_fortran_compiler_options	sources_non_forked/syntastic/syntax_checkers/fortran/gfortran.vim	/^    let g:syntastic_fortran_compiler_options = ''$/;"	v
s:type_map	sources_non_forked/syntastic/syntax_checkers/fortran/gfortran.vim	/^let s:type_map = {}$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/fortran/gfortran.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_fortran_gfortran_IsAvailable	sources_non_forked/syntastic/syntax_checkers/fortran/gfortran.vim	/^function! SyntaxCheckers_fortran_gfortran_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_fortran_gfortran_GetLocList	sources_non_forked/syntastic/syntax_checkers/fortran/gfortran.vim	/^function! SyntaxCheckers_fortran_gfortran_GetLocList() dict " {{{1$/;"	f
SetCompilerType	sources_non_forked/syntastic/syntax_checkers/fortran/gfortran.vim	/^function! s:SetCompilerType(exe) " {{{2$/;"	f
g:loaded_syntastic_sml_smlnj_checker	sources_non_forked/syntastic/syntax_checkers/sml/smlnj.vim	/^let g:loaded_syntastic_sml_smlnj_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/sml/smlnj.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sml_smlnj_GetLocList	sources_non_forked/syntastic/syntax_checkers/sml/smlnj.vim	/^function! SyntaxCheckers_sml_smlnj_GetLocList() dict$/;"	f
g:loaded_syntastic_limbo_limbo_checker	sources_non_forked/syntastic/syntax_checkers/limbo/limbo.vim	/^let g:loaded_syntastic_limbo_limbo_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/limbo/limbo.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_limbo_limbo_GetLocList	sources_non_forked/syntastic/syntax_checkers/limbo/limbo.vim	/^function! SyntaxCheckers_limbo_limbo_GetLocList() dict$/;"	f
g:loaded_syntastic_zpt_zptlint_checker	sources_non_forked/syntastic/syntax_checkers/zpt/zptlint.vim	/^let g:loaded_syntastic_zpt_zptlint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/zpt/zptlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_zpt_zptlint_GetLocList	sources_non_forked/syntastic/syntax_checkers/zpt/zptlint.vim	/^function! SyntaxCheckers_zpt_zptlint_GetLocList() dict$/;"	f
g:loaded_syntastic_julia_lint_checker	sources_non_forked/syntastic/syntax_checkers/julia/lint.vim	/^let g:loaded_syntastic_julia_lint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/julia/lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_julia_lint_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/julia/lint.vim	/^function! SyntaxCheckers_julia_lint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_julia_lint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/julia/lint.vim	/^function! SyntaxCheckers_julia_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_julia_lint_GetLocList	sources_non_forked/syntastic/syntax_checkers/julia/lint.vim	/^function! SyntaxCheckers_julia_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_text_atdtool_checker	sources_non_forked/syntastic/syntax_checkers/text/atdtool.vim	/^let g:loaded_syntastic_text_atdtool_checker = 1$/;"	v
g:syntastic_text_atdtool_sort	sources_non_forked/syntastic/syntax_checkers/text/atdtool.vim	/^    let g:syntastic_text_atdtool_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/text/atdtool.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_text_atdtool_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/text/atdtool.vim	/^function! SyntaxCheckers_text_atdtool_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_text_atdtool_GetLocList	sources_non_forked/syntastic/syntax_checkers/text/atdtool.vim	/^function! SyntaxCheckers_text_atdtool_GetLocList() dict$/;"	f
g:loaded_syntastic_text_textlint_checker	sources_non_forked/syntastic/syntax_checkers/text/textlint.vim	/^let g:loaded_syntastic_text_textlint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/text/textlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_text_textlint_GetLocList	sources_non_forked/syntastic/syntax_checkers/text/textlint.vim	/^function! SyntaxCheckers_text_textlint_GetLocList() dict$/;"	f
g:loaded_syntastic_text_language_check_checker	sources_non_forked/syntastic/syntax_checkers/text/language_check.vim	/^let g:loaded_syntastic_text_language_check_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/text/language_check.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_text_language_check_GetLocList	sources_non_forked/syntastic/syntax_checkers/text/language_check.vim	/^function! SyntaxCheckers_text_language_check_GetLocList() dict$/;"	f
g:loaded_syntastic_text_igor_checker	sources_non_forked/syntastic/syntax_checkers/text/igor.vim	/^let g:loaded_syntastic_text_igor_checker = 1$/;"	v
g:loaded_syntastic_text_proselint_checker	sources_non_forked/syntastic/syntax_checkers/text/proselint.vim	/^let g:loaded_syntastic_text_proselint_checker = 1$/;"	v
g:syntastic_text_proselint_sort	sources_non_forked/syntastic/syntax_checkers/text/proselint.vim	/^    let g:syntastic_text_proselint_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/text/proselint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_text_proselint_GetLocList	sources_non_forked/syntastic/syntax_checkers/text/proselint.vim	/^function! SyntaxCheckers_text_proselint_GetLocList() dict$/;"	f
g:loaded_syntastic_nroff_mandoc_checker	sources_non_forked/syntastic/syntax_checkers/nroff/mandoc.vim	/^let g:loaded_syntastic_nroff_mandoc_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/nroff/mandoc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_nroff_mandoc_GetLocList	sources_non_forked/syntastic/syntax_checkers/nroff/mandoc.vim	/^function! SyntaxCheckers_nroff_mandoc_GetLocList() dict$/;"	f
g:loaded_syntastic_nroff_igor_checker	sources_non_forked/syntastic/syntax_checkers/nroff/igor.vim	/^let g:loaded_syntastic_nroff_igor_checker = 1$/;"	v
g:loaded_syntastic_nroff_proselint_checker	sources_non_forked/syntastic/syntax_checkers/nroff/proselint.vim	/^let g:loaded_syntastic_nroff_proselint_checker = 1$/;"	v
g:loaded_syntastic_slim_slimrb_checker	sources_non_forked/syntastic/syntax_checkers/slim/slimrb.vim	/^let g:loaded_syntastic_slim_slimrb_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/slim/slimrb.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_slim_slimrb_GetLocList	sources_non_forked/syntastic/syntax_checkers/slim/slimrb.vim	/^function! SyntaxCheckers_slim_slimrb_GetLocList() dict$/;"	f
g:loaded_syntastic_slim_slim_lint_checker	sources_non_forked/syntastic/syntax_checkers/slim/slim_lint.vim	/^let g:loaded_syntastic_slim_slim_lint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/slim/slim_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_slim_slim_lint_GetLocList	sources_non_forked/syntastic/syntax_checkers/slim/slim_lint.vim	/^function! SyntaxCheckers_slim_slim_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_xslt_xmllint_checker	sources_non_forked/syntastic/syntax_checkers/xslt/xmllint.vim	/^let g:loaded_syntastic_xslt_xmllint_checker = 1$/;"	v
g:loaded_syntastic_javascript_jshint_checker	sources_non_forked/syntastic/syntax_checkers/javascript/jshint.vim	/^let g:loaded_syntastic_javascript_jshint_checker = 1$/;"	v
g:syntastic_javascript_jshint_sort	sources_non_forked/syntastic/syntax_checkers/javascript/jshint.vim	/^    let g:syntastic_javascript_jshint_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/javascript/jshint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_jshint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/javascript/jshint.vim	/^function! SyntaxCheckers_javascript_jshint_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_jshint_GetLocList	sources_non_forked/syntastic/syntax_checkers/javascript/jshint.vim	/^function! SyntaxCheckers_javascript_jshint_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_closurecompiler_checker	sources_non_forked/syntastic/syntax_checkers/javascript/closurecompiler.vim	/^let g:loaded_syntastic_javascript_closurecompiler_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/javascript/closurecompiler.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_closurecompiler_IsAvailable	sources_non_forked/syntastic/syntax_checkers/javascript/closurecompiler.vim	/^function! SyntaxCheckers_javascript_closurecompiler_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_closurecompiler_GetLocList	sources_non_forked/syntastic/syntax_checkers/javascript/closurecompiler.vim	/^function! SyntaxCheckers_javascript_closurecompiler_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_mixedindentlint_checker	sources_non_forked/syntastic/syntax_checkers/javascript/mixedindentlint.vim	/^let g:loaded_syntastic_javascript_mixedindentlint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/javascript/mixedindentlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_mixedindentlint_GetLocList	sources_non_forked/syntastic/syntax_checkers/javascript/mixedindentlint.vim	/^function! SyntaxCheckers_javascript_mixedindentlint_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_standard_checker	sources_non_forked/syntastic/syntax_checkers/javascript/standard.vim	/^let g:loaded_syntastic_javascript_standard_checker = 1$/;"	v
g:syntastic_javascript_standard_generic	sources_non_forked/syntastic/syntax_checkers/javascript/standard.vim	/^    let g:syntastic_javascript_standard_generic = 0$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/javascript/standard.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_standard_IsAvailable	sources_non_forked/syntastic/syntax_checkers/javascript/standard.vim	/^function! SyntaxCheckers_javascript_standard_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_standard_GetLocList	sources_non_forked/syntastic/syntax_checkers/javascript/standard.vim	/^function! SyntaxCheckers_javascript_standard_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_jslint_checker	sources_non_forked/syntastic/syntax_checkers/javascript/jslint.vim	/^let g:loaded_syntastic_javascript_jslint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/javascript/jslint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_jslint_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/javascript/jslint.vim	/^function! SyntaxCheckers_javascript_jslint_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_javascript_jslint_GetLocList	sources_non_forked/syntastic/syntax_checkers/javascript/jslint.vim	/^function! SyntaxCheckers_javascript_jslint_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_jscs_checker	sources_non_forked/syntastic/syntax_checkers/javascript/jscs.vim	/^let g:loaded_syntastic_javascript_jscs_checker = 1$/;"	v
g:syntastic_javascript_jscs_sort	sources_non_forked/syntastic/syntax_checkers/javascript/jscs.vim	/^    let g:syntastic_javascript_jscs_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/javascript/jscs.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_jscs_IsAvailable	sources_non_forked/syntastic/syntax_checkers/javascript/jscs.vim	/^function! SyntaxCheckers_javascript_jscs_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_jscs_GetLocList	sources_non_forked/syntastic/syntax_checkers/javascript/jscs.vim	/^function! SyntaxCheckers_javascript_jscs_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_flow_checker	sources_non_forked/syntastic/syntax_checkers/javascript/flow.vim	/^let g:loaded_syntastic_javascript_flow_checker = 1$/;"	v
g:syntastic_javascript_flow_sort	sources_non_forked/syntastic/syntax_checkers/javascript/flow.vim	/^    let g:syntastic_javascript_flow_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/javascript/flow.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_flow_IsAvailable	sources_non_forked/syntastic/syntax_checkers/javascript/flow.vim	/^function! SyntaxCheckers_javascript_flow_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_flow_GetLocList	sources_non_forked/syntastic/syntax_checkers/javascript/flow.vim	/^function! SyntaxCheckers_javascript_flow_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_tern_lint_checker	sources_non_forked/syntastic/syntax_checkers/javascript/tern_lint.vim	/^let g:loaded_syntastic_javascript_tern_lint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/javascript/tern_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_tern_lint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/javascript/tern_lint.vim	/^function! SyntaxCheckers_javascript_tern_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_tern_lint_GetLocList	sources_non_forked/syntastic/syntax_checkers/javascript/tern_lint.vim	/^function! SyntaxCheckers_javascript_tern_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_eslint_checker	sources_non_forked/syntastic/syntax_checkers/javascript/eslint.vim	/^let g:loaded_syntastic_javascript_eslint_checker = 1$/;"	v
g:syntastic_javascript_eslint_sort	sources_non_forked/syntastic/syntax_checkers/javascript/eslint.vim	/^    let g:syntastic_javascript_eslint_sort = 1$/;"	v
g:syntastic_javascript_eslint_generic	sources_non_forked/syntastic/syntax_checkers/javascript/eslint.vim	/^    let g:syntastic_javascript_eslint_generic = 0$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/javascript/eslint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_eslint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/javascript/eslint.vim	/^function! SyntaxCheckers_javascript_eslint_IsAvailable() dict$/;"	f
SyntaxCheckers_javascript_eslint_GetLocList	sources_non_forked/syntastic/syntax_checkers/javascript/eslint.vim	/^function! SyntaxCheckers_javascript_eslint_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_gjslint_checker	sources_non_forked/syntastic/syntax_checkers/javascript/gjslint.vim	/^let g:loaded_syntastic_javascript_gjslint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/javascript/gjslint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_gjslint_GetLocList	sources_non_forked/syntastic/syntax_checkers/javascript/gjslint.vim	/^function! SyntaxCheckers_javascript_gjslint_GetLocList() dict$/;"	f
g:loaded_syntastic_javascript_jsxhint_checker	sources_non_forked/syntastic/syntax_checkers/javascript/jsxhint.vim	/^let g:loaded_syntastic_javascript_jsxhint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/javascript/jsxhint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_jsxhint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/javascript/jsxhint.vim	/^function! SyntaxCheckers_javascript_jsxhint_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_javascript_jsxhint_GetLocList	sources_non_forked/syntastic/syntax_checkers/javascript/jsxhint.vim	/^function! SyntaxCheckers_javascript_jsxhint_GetLocList() dict " {{{1$/;"	f
g:loaded_syntastic_javascript_jsl_checker	sources_non_forked/syntastic/syntax_checkers/javascript/jsl.vim	/^let g:loaded_syntastic_javascript_jsl_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/javascript/jsl.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_javascript_jsl_GetLocList	sources_non_forked/syntastic/syntax_checkers/javascript/jsl.vim	/^function! SyntaxCheckers_javascript_jsl_GetLocList() dict$/;"	f
g:loaded_syntastic_yacc_bison_checker	sources_non_forked/syntastic/syntax_checkers/yacc/bison.vim	/^let g:loaded_syntastic_yacc_bison_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/yacc/bison.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_yacc_bison_GetLocList	sources_non_forked/syntastic/syntax_checkers/yacc/bison.vim	/^function! SyntaxCheckers_yacc_bison_GetLocList() dict$/;"	f
g:loaded_syntastic_texinfo_proselint_checker	sources_non_forked/syntastic/syntax_checkers/texinfo/proselint.vim	/^let g:loaded_syntastic_texinfo_proselint_checker = 1$/;"	v
g:loaded_syntastic_texinfo_makeinfo_checker	sources_non_forked/syntastic/syntax_checkers/texinfo/makeinfo.vim	/^let g:loaded_syntastic_texinfo_makeinfo_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/texinfo/makeinfo.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_texinfo_makeinfo_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/texinfo/makeinfo.vim	/^function! SyntaxCheckers_texinfo_makeinfo_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_texinfo_makeinfo_GetLocList	sources_non_forked/syntastic/syntax_checkers/texinfo/makeinfo.vim	/^function! SyntaxCheckers_texinfo_makeinfo_GetLocList() dict$/;"	f
g:loaded_syntastic_twig_twiglint_checker	sources_non_forked/syntastic/syntax_checkers/twig/twiglint.vim	/^let g:loaded_syntastic_twig_twiglint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/twig/twiglint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_twig_twiglint_GetLocList	sources_non_forked/syntastic/syntax_checkers/twig/twiglint.vim	/^function! SyntaxCheckers_twig_twiglint_GetLocList() dict$/;"	f
g:loaded_syntastic_jade_jade_lint_checker	sources_non_forked/syntastic/syntax_checkers/jade/jade_lint.vim	/^let g:loaded_syntastic_jade_jade_lint_checker = 1$/;"	v
g:loaded_syntastic_zsh_zsh_checker	sources_non_forked/syntastic/syntax_checkers/zsh/zsh.vim	/^let g:loaded_syntastic_zsh_zsh_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/zsh/zsh.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_zsh_zsh_GetLocList	sources_non_forked/syntastic/syntax_checkers/zsh/zsh.vim	/^function! SyntaxCheckers_zsh_zsh_GetLocList() dict$/;"	f
g:loaded_syntastic_cobol_cobc_checker	sources_non_forked/syntastic/syntax_checkers/cobol/cobc.vim	/^let g:loaded_syntastic_cobol_cobc_checker = 1$/;"	v
g:syntastic_cobol_compiler_options	sources_non_forked/syntastic/syntax_checkers/cobol/cobc.vim	/^    let g:syntastic_cobol_compiler_options = ''$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/cobol/cobc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cobol_cobc_IsAvailable	sources_non_forked/syntastic/syntax_checkers/cobol/cobc.vim	/^function! SyntaxCheckers_cobol_cobc_IsAvailable() dict$/;"	f
SyntaxCheckers_cobol_cobc_GetLocList	sources_non_forked/syntastic/syntax_checkers/cobol/cobc.vim	/^function! SyntaxCheckers_cobol_cobc_GetLocList() dict$/;"	f
g:loaded_syntastic_sass_sass_lint_checker	sources_non_forked/syntastic/syntax_checkers/sass/sass_lint.vim	/^let g:loaded_syntastic_sass_sass_lint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/sass/sass_lint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sass_sass_lint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/sass/sass_lint.vim	/^function! SyntaxCheckers_sass_sass_lint_IsAvailable() dict$/;"	f
SyntaxCheckers_sass_sass_lint_GetLocList	sources_non_forked/syntastic/syntax_checkers/sass/sass_lint.vim	/^function! SyntaxCheckers_sass_sass_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_sass_sass_checker	sources_non_forked/syntastic/syntax_checkers/sass/sass.vim	/^let g:loaded_syntastic_sass_sass_checker = 1$/;"	v
s:sass_cache_location	sources_non_forked/syntastic/syntax_checkers/sass/sass.vim	/^let s:sass_cache_location = syntastic#util#tmpdir()$/;"	v
syntastic	sources_non_forked/syntastic/syntax_checkers/sass/sass.vim	/^augroup syntastic$/;"	a
g:syntastic_sass_check_partials	sources_non_forked/syntastic/syntax_checkers/sass/sass.vim	/^    let g:syntastic_sass_check_partials = 0$/;"	v
s:imports	sources_non_forked/syntastic/syntax_checkers/sass/sass.vim	/^let s:imports = ''$/;"	v
s:imports	sources_non_forked/syntastic/syntax_checkers/sass/sass.vim	/^    let s:imports = '--compass'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/sass/sass.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sass_sass_GetLocList	sources_non_forked/syntastic/syntax_checkers/sass/sass.vim	/^function! SyntaxCheckers_sass_sass_GetLocList() dict$/;"	f
g:loaded_syntastic_sass_sassc_checker	sources_non_forked/syntastic/syntax_checkers/sass/sassc.vim	/^let g:loaded_syntastic_sass_sassc_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/sass/sassc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sass_sassc_GetLocList	sources_non_forked/syntastic/syntax_checkers/sass/sassc.vim	/^function! SyntaxCheckers_sass_sassc_GetLocList() dict$/;"	f
g:loaded_syntastic_objc_gcc_checker	sources_non_forked/syntastic/syntax_checkers/objc/gcc.vim	/^let g:loaded_syntastic_objc_gcc_checker = 1$/;"	v
g:syntastic_objc_compiler_options	sources_non_forked/syntastic/syntax_checkers/objc/gcc.vim	/^    let g:syntastic_objc_compiler_options = '-std=gnu99'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/objc/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_objc_gcc_IsAvailable	sources_non_forked/syntastic/syntax_checkers/objc/gcc.vim	/^function! SyntaxCheckers_objc_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_objc_gcc_GetLocList	sources_non_forked/syntastic/syntax_checkers/objc/gcc.vim	/^function! SyntaxCheckers_objc_gcc_GetLocList() dict$/;"	f
g:loaded_syntastic_objc_oclint_checker	sources_non_forked/syntastic/syntax_checkers/objc/oclint.vim	/^let g:loaded_syntastic_objc_oclint_checker = 1$/;"	v
g:loaded_syntastic_coq_coqtop_checker	sources_non_forked/syntastic/syntax_checkers/coq/coqtop.vim	/^let g:loaded_syntastic_coq_coqtop_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/coq/coqtop.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_coq_coqtop_GetLocList	sources_non_forked/syntastic/syntax_checkers/coq/coqtop.vim	/^function! SyntaxCheckers_coq_coqtop_GetLocList() dict$/;"	f
g:loaded_syntastic_puppet_puppet_checker	sources_non_forked/syntastic/syntax_checkers/puppet/puppet.vim	/^let g:loaded_syntastic_puppet_puppet_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/puppet/puppet.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_puppet_puppet_GetLocList	sources_non_forked/syntastic/syntax_checkers/puppet/puppet.vim	/^function! SyntaxCheckers_puppet_puppet_GetLocList() dict$/;"	f
g:loaded_syntastic_puppet_puppetlint_checker	sources_non_forked/syntastic/syntax_checkers/puppet/puppetlint.vim	/^let g:loaded_syntastic_puppet_puppetlint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/puppet/puppetlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_puppet_puppetlint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/puppet/puppetlint.vim	/^function! SyntaxCheckers_puppet_puppetlint_IsAvailable() dict$/;"	f
SyntaxCheckers_puppet_puppetlint_GetLocList	sources_non_forked/syntastic/syntax_checkers/puppet/puppetlint.vim	/^function! SyntaxCheckers_puppet_puppetlint_GetLocList() dict$/;"	f
g:loaded_syntastic_apiblueprint_drafter_checker	sources_non_forked/syntastic/syntax_checkers/apiblueprint/drafter.vim	/^let g:loaded_syntastic_apiblueprint_drafter_checker = 1$/;"	v
g:syntastic_apiblueprint_drafter_sort	sources_non_forked/syntastic/syntax_checkers/apiblueprint/drafter.vim	/^    let g:syntastic_apiblueprint_drafter_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/apiblueprint/drafter.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_apiblueprint_drafter_GetLocList	sources_non_forked/syntastic/syntax_checkers/apiblueprint/drafter.vim	/^function! SyntaxCheckers_apiblueprint_drafter_GetLocList() dict$/;"	f
g:loaded_syntastic_c_avrgcc_checker	sources_non_forked/syntastic/syntax_checkers/c/avrgcc.vim	/^let g:loaded_syntastic_c_avrgcc_checker = 1$/;"	v
g:syntastic_avrgcc_config_file	sources_non_forked/syntastic/syntax_checkers/c/avrgcc.vim	/^    let g:syntastic_avrgcc_config_file = '.syntastic_avrgcc_config'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/avrgcc.vim	/^let s:save_cpo = &cpo$/;"	v
s:opt_x	sources_non_forked/syntastic/syntax_checkers/c/avrgcc.vim	/^let s:opt_x = { 'c': 'c', 'cpp': 'c++' }$/;"	v
SyntaxCheckers_c_avrgcc_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/avrgcc.vim	/^function! SyntaxCheckers_c_avrgcc_GetLocList() dict$/;"	f
g:loaded_syntastic_c_clang_check_checker	sources_non_forked/syntastic/syntax_checkers/c/clang_check.vim	/^let g:loaded_syntastic_c_clang_check_checker = 1$/;"	v
g:syntastic_clang_check_config_file	sources_non_forked/syntastic/syntax_checkers/c/clang_check.vim	/^    let g:syntastic_clang_check_config_file = '.syntastic_clang_check_config'$/;"	v
g:syntastic_c_clang_check_sort	sources_non_forked/syntastic/syntax_checkers/c/clang_check.vim	/^    let g:syntastic_c_clang_check_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/clang_check.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_clang_check_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/clang_check.vim	/^function! SyntaxCheckers_c_clang_check_GetLocList() dict$/;"	f
g:loaded_syntastic_c_flawfinder_checker	sources_non_forked/syntastic/syntax_checkers/c/flawfinder.vim	/^let g:loaded_syntastic_c_flawfinder_checker = 1$/;"	v
g:syntastic_c_flawfinder_sort	sources_non_forked/syntastic/syntax_checkers/c/flawfinder.vim	/^    let g:syntastic_c_flawfinder_sort = 1$/;"	v
g:syntastic_c_flawfinder_thres	sources_non_forked/syntastic/syntax_checkers/c/flawfinder.vim	/^    let g:syntastic_c_flawfinder_thres = 3$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/flawfinder.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_flawfinder_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/c/flawfinder.vim	/^function! SyntaxCheckers_c_flawfinder_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_c_flawfinder_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/flawfinder.vim	/^function! SyntaxCheckers_c_flawfinder_GetLocList() dict$/;"	f
g:loaded_syntastic_c_gcc_checker	sources_non_forked/syntastic/syntax_checkers/c/gcc.vim	/^let g:loaded_syntastic_c_gcc_checker = 1$/;"	v
g:syntastic_c_compiler_options	sources_non_forked/syntastic/syntax_checkers/c/gcc.vim	/^    let g:syntastic_c_compiler_options = '-std=gnu99'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/gcc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_gcc_IsAvailable	sources_non_forked/syntastic/syntax_checkers/c/gcc.vim	/^function! SyntaxCheckers_c_gcc_IsAvailable() dict$/;"	f
SyntaxCheckers_c_gcc_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/gcc.vim	/^function! SyntaxCheckers_c_gcc_GetLocList() dict$/;"	f
g:loaded_syntastic_c_oclint_checker	sources_non_forked/syntastic/syntax_checkers/c/oclint.vim	/^let g:loaded_syntastic_c_oclint_checker = 1$/;"	v
g:syntastic_oclint_config_file	sources_non_forked/syntastic/syntax_checkers/c/oclint.vim	/^    let g:syntastic_oclint_config_file = '.syntastic_oclint_config'$/;"	v
g:syntastic_c_oclint_sort	sources_non_forked/syntastic/syntax_checkers/c/oclint.vim	/^    let g:syntastic_c_oclint_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/oclint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_oclint_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/oclint.vim	/^function! SyntaxCheckers_c_oclint_GetLocList() dict$/;"	f
g:loaded_syntastic_c_sparse_checker	sources_non_forked/syntastic/syntax_checkers/c/sparse.vim	/^let g:loaded_syntastic_c_sparse_checker = 1$/;"	v
g:syntastic_sparse_config_file	sources_non_forked/syntastic/syntax_checkers/c/sparse.vim	/^    let g:syntastic_sparse_config_file = '.syntastic_sparse_config'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/sparse.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_sparse_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/sparse.vim	/^function! SyntaxCheckers_c_sparse_GetLocList() dict$/;"	f
g:loaded_syntastic_c_make_checker	sources_non_forked/syntastic/syntax_checkers/c/make.vim	/^let g:loaded_syntastic_c_make_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/make.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_make_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/make.vim	/^function! SyntaxCheckers_c_make_GetLocList() dict$/;"	f
g:loaded_syntastic_c_splint_checker	sources_non_forked/syntastic/syntax_checkers/c/splint.vim	/^let g:loaded_syntastic_c_splint_checker = 1$/;"	v
g:syntastic_splint_config_file	sources_non_forked/syntastic/syntax_checkers/c/splint.vim	/^    let g:syntastic_splint_config_file = '.syntastic_splint_config'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/splint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_splint_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/splint.vim	/^function! SyntaxCheckers_c_splint_GetLocList() dict$/;"	f
g:loaded_syntastic_c_cppcheck_checker	sources_non_forked/syntastic/syntax_checkers/c/cppcheck.vim	/^let g:loaded_syntastic_c_cppcheck_checker = 1$/;"	v
g:syntastic_cppcheck_config_file	sources_non_forked/syntastic/syntax_checkers/c/cppcheck.vim	/^    let g:syntastic_cppcheck_config_file = '.syntastic_cppcheck_config'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/cppcheck.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_cppcheck_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/cppcheck.vim	/^function! SyntaxCheckers_c_cppcheck_GetLocList() dict$/;"	f
g:loaded_syntastic_c_clang_tidy_checker	sources_non_forked/syntastic/syntax_checkers/c/clang_tidy.vim	/^let g:loaded_syntastic_c_clang_tidy_checker = 1$/;"	v
g:syntastic_clang_tidy_config_file	sources_non_forked/syntastic/syntax_checkers/c/clang_tidy.vim	/^    let g:syntastic_clang_tidy_config_file = '.syntastic_clang_tidy_config'$/;"	v
g:syntastic_c_clang_tidy_sort	sources_non_forked/syntastic/syntax_checkers/c/clang_tidy.vim	/^    let g:syntastic_c_clang_tidy_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/clang_tidy.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_clang_tidy_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/clang_tidy.vim	/^function! SyntaxCheckers_c_clang_tidy_GetLocList() dict$/;"	f
g:loaded_syntastic_c_pc_lint_checker	sources_non_forked/syntastic/syntax_checkers/c/pc_lint.vim	/^let g:loaded_syntastic_c_pc_lint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/pc_lint.vim	/^let s:save_cpo = &cpo$/;"	v
g:syntastic_pc_lint_config_file	sources_non_forked/syntastic/syntax_checkers/c/pc_lint.vim	/^    let g:syntastic_pc_lint_config_file = 'options.lnt'$/;"	v
SyntaxCheckers_c_pc_lint_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/pc_lint.vim	/^function! SyntaxCheckers_c_pc_lint_GetLocList() dict$/;"	f
g:loaded_syntastic_c_checkpatch_checker	sources_non_forked/syntastic/syntax_checkers/c/checkpatch.vim	/^let g:loaded_syntastic_c_checkpatch_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/checkpatch.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_checkpatch_IsAvailable	sources_non_forked/syntastic/syntax_checkers/c/checkpatch.vim	/^function! SyntaxCheckers_c_checkpatch_IsAvailable() dict$/;"	f
SyntaxCheckers_c_checkpatch_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/checkpatch.vim	/^function! SyntaxCheckers_c_checkpatch_GetLocList() dict$/;"	f
g:loaded_syntastic_c_cppclean_checker	sources_non_forked/syntastic/syntax_checkers/c/cppclean.vim	/^let g:loaded_syntastic_c_cppclean_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/c/cppclean.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_c_cppclean_GetLocList	sources_non_forked/syntastic/syntax_checkers/c/cppclean.vim	/^function! SyntaxCheckers_c_cppclean_GetLocList() dict$/;"	f
g:loaded_syntastic_d_dscanner_checker	sources_non_forked/syntastic/syntax_checkers/d/dscanner.vim	/^let g:loaded_syntastic_d_dscanner_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/d/dscanner.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_d_dscanner_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/d/dscanner.vim	/^function! SyntaxCheckers_d_dscanner_GetHighlightRegex(i)$/;"	f
SyntaxCheckers_d_dscanner_GetLocList	sources_non_forked/syntastic/syntax_checkers/d/dscanner.vim	/^function! SyntaxCheckers_d_dscanner_GetLocList() dict$/;"	f
g:loaded_syntastic_d_dmd_checker	sources_non_forked/syntastic/syntax_checkers/d/dmd.vim	/^let g:loaded_syntastic_d_dmd_checker = 1$/;"	v
g:syntastic_d_compiler_options	sources_non_forked/syntastic/syntax_checkers/d/dmd.vim	/^    let g:syntastic_d_compiler_options = ''$/;"	v
g:syntastic_d_use_dub	sources_non_forked/syntastic/syntax_checkers/d/dmd.vim	/^    let g:syntastic_d_use_dub = 1$/;"	v
g:syntastic_d_dub_exec	sources_non_forked/syntastic/syntax_checkers/d/dmd.vim	/^    let g:syntastic_d_dub_exec = 'dub'$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/d/dmd.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_d_dmd_IsAvailable	sources_non_forked/syntastic/syntax_checkers/d/dmd.vim	/^function! SyntaxCheckers_d_dmd_IsAvailable() dict " {{{1$/;"	f
SyntaxCheckers_d_dmd_GetLocList	sources_non_forked/syntastic/syntax_checkers/d/dmd.vim	/^function! SyntaxCheckers_d_dmd_GetLocList() dict " {{{1$/;"	f
GetIncludes	sources_non_forked/syntastic/syntax_checkers/d/dmd.vim	/^function! s:GetIncludes(checker, base) " {{{2$/;"	f
ValidateDub	sources_non_forked/syntastic/syntax_checkers/d/dmd.vim	/^function! s:ValidateDub(checker) " {{{2$/;"	f
g:loaded_syntastic_ruby_rubocop_checker	sources_non_forked/syntastic/syntax_checkers/ruby/rubocop.vim	/^let g:loaded_syntastic_ruby_rubocop_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/ruby/rubocop.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_rubocop_IsAvailable	sources_non_forked/syntastic/syntax_checkers/ruby/rubocop.vim	/^function! SyntaxCheckers_ruby_rubocop_IsAvailable() dict$/;"	f
SyntaxCheckers_ruby_rubocop_GetLocList	sources_non_forked/syntastic/syntax_checkers/ruby/rubocop.vim	/^function! SyntaxCheckers_ruby_rubocop_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_rubylint_checker	sources_non_forked/syntastic/syntax_checkers/ruby/rubylint.vim	/^let g:loaded_syntastic_ruby_rubylint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/ruby/rubylint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_rubylint_GetLocList	sources_non_forked/syntastic/syntax_checkers/ruby/rubylint.vim	/^function! SyntaxCheckers_ruby_rubylint_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_mri_checker	sources_non_forked/syntastic/syntax_checkers/ruby/mri.vim	/^let g:loaded_syntastic_ruby_mri_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/ruby/mri.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_mri_IsAvailable	sources_non_forked/syntastic/syntax_checkers/ruby/mri.vim	/^function! SyntaxCheckers_ruby_mri_IsAvailable() dict$/;"	f
SyntaxCheckers_ruby_mri_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/ruby/mri.vim	/^function! SyntaxCheckers_ruby_mri_GetHighlightRegex(i)$/;"	f
SyntaxCheckers_ruby_mri_GetLocList	sources_non_forked/syntastic/syntax_checkers/ruby/mri.vim	/^function! SyntaxCheckers_ruby_mri_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_reek_checker	sources_non_forked/syntastic/syntax_checkers/ruby/reek.vim	/^let g:loaded_syntastic_ruby_reek_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/ruby/reek.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_reek_IsAvailable	sources_non_forked/syntastic/syntax_checkers/ruby/reek.vim	/^function! SyntaxCheckers_ruby_reek_IsAvailable() dict$/;"	f
SyntaxCheckers_ruby_reek_GetLocList	sources_non_forked/syntastic/syntax_checkers/ruby/reek.vim	/^function! SyntaxCheckers_ruby_reek_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_flog_checker	sources_non_forked/syntastic/syntax_checkers/ruby/flog.vim	/^let g:loaded_syntastic_ruby_flog_checker = 1$/;"	v
g:syntastic_ruby_flog_threshold_warning	sources_non_forked/syntastic/syntax_checkers/ruby/flog.vim	/^    let g:syntastic_ruby_flog_threshold_warning = 45$/;"	v
g:syntastic_ruby_flog_threshold_error	sources_non_forked/syntastic/syntax_checkers/ruby/flog.vim	/^    let g:syntastic_ruby_flog_threshold_error = 90$/;"	v
g:syntastic_ruby_flog_sort	sources_non_forked/syntastic/syntax_checkers/ruby/flog.vim	/^    let g:syntastic_ruby_flog_sort = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/ruby/flog.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_flog_GetLocList	sources_non_forked/syntastic/syntax_checkers/ruby/flog.vim	/^function! SyntaxCheckers_ruby_flog_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_jruby_checker	sources_non_forked/syntastic/syntax_checkers/ruby/jruby.vim	/^let g:loaded_syntastic_ruby_jruby_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/ruby/jruby.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_jruby_GetLocList	sources_non_forked/syntastic/syntax_checkers/ruby/jruby.vim	/^function! SyntaxCheckers_ruby_jruby_GetLocList() dict$/;"	f
g:loaded_syntastic_ruby_macruby_checker	sources_non_forked/syntastic/syntax_checkers/ruby/macruby.vim	/^let g:loaded_syntastic_ruby_macruby_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/ruby/macruby.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_ruby_macruby_GetLocList	sources_non_forked/syntastic/syntax_checkers/ruby/macruby.vim	/^function! SyntaxCheckers_ruby_macruby_GetLocList() dict$/;"	f
g:loaded_syntastic_actionscript_mxmlc_checker	sources_non_forked/syntastic/syntax_checkers/actionscript/mxmlc.vim	/^let g:loaded_syntastic_actionscript_mxmlc_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/actionscript/mxmlc.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_actionscript_mxmlc_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/actionscript/mxmlc.vim	/^function! SyntaxCheckers_actionscript_mxmlc_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_actionscript_mxmlc_GetLocList	sources_non_forked/syntastic/syntax_checkers/actionscript/mxmlc.vim	/^function! SyntaxCheckers_actionscript_mxmlc_GetLocList() dict$/;"	f
g:loaded_syntastic_cabal_cabal_checker	sources_non_forked/syntastic/syntax_checkers/cabal/cabal.vim	/^let g:loaded_syntastic_cabal_cabal_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/cabal/cabal.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_cabal_cabal_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/cabal/cabal.vim	/^function! SyntaxCheckers_cabal_cabal_GetHighlightRegex(item)$/;"	f
SyntaxCheckers_cabal_cabal_GetLocList	sources_non_forked/syntastic/syntax_checkers/cabal/cabal.vim	/^function! SyntaxCheckers_cabal_cabal_GetLocList() dict$/;"	f
g:loaded_syntastic_help_proselint_checker	sources_non_forked/syntastic/syntax_checkers/help/proselint.vim	/^let g:loaded_syntastic_help_proselint_checker = 1$/;"	v
g:loaded_syntastic_hss_hss_checker	sources_non_forked/syntastic/syntax_checkers/hss/hss.vim	/^let g:loaded_syntastic_hss_hss_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/hss/hss.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_hss_hss_GetLocList	sources_non_forked/syntastic/syntax_checkers/hss/hss.vim	/^function! SyntaxCheckers_hss_hss_GetLocList() dict$/;"	f
g:loaded_syntastic_sql_sqlint_checker	sources_non_forked/syntastic/syntax_checkers/sql/sqlint.vim	/^let g:loaded_syntastic_sql_sqlint_checker = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/syntax_checkers/sql/sqlint.vim	/^let s:save_cpo = &cpo$/;"	v
SyntaxCheckers_sql_sqlint_GetHighlightRegex	sources_non_forked/syntastic/syntax_checkers/sql/sqlint.vim	/^function! SyntaxCheckers_sql_sqlint_GetHighlightRegex(i)$/;"	f
SyntaxCheckers_sql_sqlint_IsAvailable	sources_non_forked/syntastic/syntax_checkers/sql/sqlint.vim	/^function! SyntaxCheckers_sql_sqlint_IsAvailable() dict$/;"	f
SyntaxCheckers_sql_sqlint_GetLocList	sources_non_forked/syntastic/syntax_checkers/sql/sqlint.vim	/^function! SyntaxCheckers_sql_sqlint_GetLocList() dict$/;"	f
g:loaded_syntastic_checker	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^let g:loaded_syntastic_checker = 1$/;"	v
g:SyntasticChecker	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^let g:SyntasticChecker = {}$/;"	v
SyntasticChecker.New	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.New(args, ...) abort " {{{2$/;"	f
SyntasticChecker.getFiletype	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getFiletype() abort " {{{2$/;"	f
SyntasticChecker.getName	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getName() abort " {{{2$/;"	f
SyntasticChecker.getCName	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getCName() abort " {{{2$/;"	f
SyntasticChecker.syncExec	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.syncExec(...) abort " {{{2$/;"	f
SyntasticChecker.getExec	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getExec() abort " {{{2$/;"	f
SyntasticChecker.getExecEscaped	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getExecEscaped() abort " {{{2$/;"	f
SyntasticChecker.getLocListRaw	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getLocListRaw() abort " {{{2$/;"	f
SyntasticChecker.getLocList	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getLocList() abort " {{{2$/;"	f
SyntasticChecker.getVersion	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.getVersion(...) abort " {{{2$/;"	f
SyntasticChecker.setVersion	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.setVersion(version) abort " {{{2$/;"	f
SyntasticChecker.log	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.log(msg, ...) abort " {{{2$/;"	f
SyntasticChecker.makeprgBuild	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.makeprgBuild(opts) abort " {{{2$/;"	f
SyntasticChecker.isAvailable	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.isAvailable() abort " {{{2$/;"	f
SyntasticChecker.isDisabled	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.isDisabled() abort " {{{2$/;"	f
SyntasticChecker.wantSort	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.wantSort() abort " {{{2$/;"	f
SyntasticChecker.setWantSort	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker.setWantSort(val) abort " {{{2$/;"	f
SyntasticChecker._quietMessages	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker._quietMessages(errors) abort " {{{2$/;"	f
SyntasticChecker._populateHighlightRegexes	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker._populateHighlightRegexes(errors) abort " {{{2$/;"	f
SyntasticChecker._getOpt	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! g:SyntasticChecker._getOpt(opts, basename, name, default) abort " {{{2$/;"	f
_isAvailableDefault	sources_non_forked/syntastic/plugin/syntastic/checker.vim	/^function! s:_isAvailableDefault() dict " {{{2$/;"	f
g:loaded_syntastic_loclist	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^let g:loaded_syntastic_loclist = 1$/;"	v
g:SyntasticLoclist	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^let g:SyntasticLoclist = {}$/;"	v
SyntasticLoclist.New	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.New(rawLoclist) abort " {{{2$/;"	f
SyntasticLoclist.current	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.current(...) abort " {{{2$/;"	f
SyntasticLoclist.extend	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.extend(other) abort " {{{2$/;"	f
SyntasticLoclist.sort	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.sort() abort " {{{2$/;"	f
SyntasticLoclist.isEmpty	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.isEmpty() abort " {{{2$/;"	f
SyntasticLoclist.isNewerThan	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.isNewerThan(stamp) abort " {{{2$/;"	f
SyntasticLoclist.copyRaw	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.copyRaw() abort " {{{2$/;"	f
SyntasticLoclist.getRaw	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getRaw() abort " {{{2$/;"	f
SyntasticLoclist.getBuffers	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getBuffers() abort " {{{2$/;"	f
SyntasticLoclist.getCursorColumns	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getCursorColumns() abort " {{{2$/;"	f
SyntasticLoclist.getStatuslineFlag	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getStatuslineFlag() abort " {{{2$/;"	f
SyntasticLoclist.getFirstError	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getFirstError(...) abort " {{{2$/;"	f
SyntasticLoclist.getName	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getName() abort " {{{2$/;"	f
SyntasticLoclist.setName	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.setName(name) abort " {{{2$/;"	f
SyntasticLoclist.getOwner	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.getOwner() abort " {{{2$/;"	f
SyntasticLoclist.setOwner	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.setOwner(buffer) abort " {{{2$/;"	f
SyntasticLoclist.deploy	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.deploy() abort " {{{2$/;"	f
SyntasticLoclist.destroy	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.destroy() abort " {{{2$/;"	f
SyntasticLoclist.decorate	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.decorate(tag) abort " {{{2$/;"	f
SyntasticLoclist.balloons	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.balloons() abort " {{{2$/;"	f
SyntasticLoclist.errors	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.errors() abort " {{{2$/;"	f
SyntasticLoclist.warnings	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.warnings() abort " {{{2$/;"	f
SyntasticLoclist.hasErrorsOrWarningsToDisplay	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.hasErrorsOrWarningsToDisplay() abort " {{{2$/;"	f
SyntasticLoclist.messages	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.messages(buf) abort " {{{2$/;"	f
SyntasticLoclist.filter	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.filter(filters) abort " {{{2$/;"	f
SyntasticLoclist.setloclist	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.setloclist(new) abort " {{{2$/;"	f
SyntasticLoclist.show	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! g:SyntasticLoclist.show() abort " {{{2$/;"	f
SyntasticLoclistHide	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! SyntasticLoclistHide() abort " {{{2$/;"	f
_translate	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! s:_translate(key, val) abort " {{{2$/;"	f
_set_screen_column	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! s:_set_screen_column(item) abort " {{{2$/;"	f
_remove_shadowed_items	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! s:_remove_shadowed_items(errors) abort " {{{2$/;"	f
_compare_error_items_by_columns	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! s:_compare_error_items_by_columns(a, b) abort " {{{2$/;"	f
_compare_error_items_by_lines	sources_non_forked/syntastic/plugin/syntastic/loclist.vim	/^function! s:_compare_error_items_by_lines(a, b) abort " {{{2$/;"	f
g:loaded_syntastic_registry	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^let g:loaded_syntastic_registry = 1$/;"	v
s:_DEFAULT_CHECKERS	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^let s:_DEFAULT_CHECKERS = {$/;"	v
s:_DEFAULT_FILETYPE_MAP	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^let s:_DEFAULT_FILETYPE_MAP = {$/;"	v
s:_ECLIM_TYPES	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^let s:_ECLIM_TYPES = [$/;"	v
s:_YCM_TYPES	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^let s:_YCM_TYPES = [$/;"	v
g:SyntasticRegistry	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^let g:SyntasticRegistry = {}$/;"	v
SyntasticRegistry.Instance	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.Instance() abort " {{{2$/;"	f
SyntasticRegistry.CreateAndRegisterChecker	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.CreateAndRegisterChecker(args) abort " {{{2$/;"	f
SyntasticRegistry.getCheckers	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getCheckers(ftalias, hints_list) abort " {{{2$/;"	f
SyntasticRegistry.getCheckersAvailable	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getCheckersAvailable(ftalias, hints_list) abort " {{{2$/;"	f
SyntasticRegistry.getCheckersDisabled	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getCheckersDisabled(ftalias, hints_list) abort " {{{2$/;"	f
SyntasticRegistry.getKnownFiletypes	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getKnownFiletypes() abort " {{{2$/;"	f
SyntasticRegistry.getNamesOfAvailableCheckers	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.getNamesOfAvailableCheckers(ftalias) abort " {{{2$/;"	f
SyntasticRegistry.resolveFiletypes	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.resolveFiletypes(ftalias) abort " {{{2$/;"	f
SyntasticRegistry.echoInfoFor	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry.echoInfoFor(ftalias_list) abort " {{{2$/;"	f
SyntasticRegistry._registerChecker	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._registerChecker(checker) abort " {{{2$/;"	f
SyntasticRegistry._findChecker	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._findChecker(cname) abort " {{{2$/;"	f
SyntasticRegistry._filterCheckersByName	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._filterCheckersByName(cnames) abort " {{{2$/;"	f
SyntasticRegistry._loadCheckersFor	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._loadCheckersFor(filetype, force) abort " {{{2$/;"	f
SyntasticRegistry._sanityCheck	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! g:SyntasticRegistry._sanityCheck(filetype) abort " {{{2$/;"	f
_normalise_filetype	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! s:_normalise_filetype(ftalias) abort " {{{2$/;"	f
_disabled_by_eclim	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! s:_disabled_by_eclim(filetype) abort " {{{2$/;"	f
_disabled_by_ycm	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! s:_disabled_by_ycm(filetype) abort " {{{2$/;"	f
_compare_checker_names	sources_non_forked/syntastic/plugin/syntastic/registry.vim	/^function! s:_compare_checker_names(a, b) abort " {{{2$/;"	f
g:loaded_syntastic_notifiers	sources_non_forked/syntastic/plugin/syntastic/notifiers.vim	/^let g:loaded_syntastic_notifiers = 1$/;"	v
g:SyntasticNotifiers	sources_non_forked/syntastic/plugin/syntastic/notifiers.vim	/^let g:SyntasticNotifiers = {}$/;"	v
s:_NOTIFIER_TYPES	sources_non_forked/syntastic/plugin/syntastic/notifiers.vim	/^let s:_NOTIFIER_TYPES = ['signs', 'balloons', 'highlighting', 'cursor', 'autoloclist']$/;"	v
s:_PERSISTENT_NOTIFIERS	sources_non_forked/syntastic/plugin/syntastic/notifiers.vim	/^let s:_PERSISTENT_NOTIFIERS = ['signs', 'balloons']$/;"	v
SyntasticNotifiers.Instance	sources_non_forked/syntastic/plugin/syntastic/notifiers.vim	/^function! g:SyntasticNotifiers.Instance() abort " {{{2$/;"	f
SyntasticNotifiers.refresh	sources_non_forked/syntastic/plugin/syntastic/notifiers.vim	/^function! g:SyntasticNotifiers.refresh(loclist) abort " {{{2$/;"	f
SyntasticNotifiers.reset	sources_non_forked/syntastic/plugin/syntastic/notifiers.vim	/^function! g:SyntasticNotifiers.reset(loclist) abort " {{{2$/;"	f
SyntasticNotifiers._initNotifiers	sources_non_forked/syntastic/plugin/syntastic/notifiers.vim	/^function! g:SyntasticNotifiers._initNotifiers() abort " {{{2$/;"	f
g:loaded_syntastic_notifier_autoloclist	sources_non_forked/syntastic/plugin/syntastic/autoloclist.vim	/^let g:loaded_syntastic_notifier_autoloclist = 1$/;"	v
g:SyntasticAutoloclistNotifier	sources_non_forked/syntastic/plugin/syntastic/autoloclist.vim	/^let g:SyntasticAutoloclistNotifier = {}$/;"	v
SyntasticAutoloclistNotifier.New	sources_non_forked/syntastic/plugin/syntastic/autoloclist.vim	/^function! g:SyntasticAutoloclistNotifier.New() abort " {{{2$/;"	f
SyntasticAutoloclistNotifier.refresh	sources_non_forked/syntastic/plugin/syntastic/autoloclist.vim	/^function! g:SyntasticAutoloclistNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticAutoloclistNotifier.AutoToggle	sources_non_forked/syntastic/plugin/syntastic/autoloclist.vim	/^function! g:SyntasticAutoloclistNotifier.AutoToggle(loclist) abort " {{{2$/;"	f
g:loaded_syntastic_modemap	sources_non_forked/syntastic/plugin/syntastic/modemap.vim	/^let g:loaded_syntastic_modemap = 1$/;"	v
g:SyntasticModeMap	sources_non_forked/syntastic/plugin/syntastic/modemap.vim	/^let g:SyntasticModeMap = {}$/;"	v
SyntasticModeMap.Instance	sources_non_forked/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.Instance() abort " {{{2$/;"	f
SyntasticModeMap.synch	sources_non_forked/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.synch() abort " {{{2$/;"	f
SyntasticModeMap.allowsAutoChecking	sources_non_forked/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.allowsAutoChecking(filetype) abort " {{{2$/;"	f
SyntasticModeMap.doAutoChecking	sources_non_forked/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.doAutoChecking(buf) abort " {{{2$/;"	f
SyntasticModeMap.isPassive	sources_non_forked/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.isPassive() abort " {{{2$/;"	f
SyntasticModeMap.toggleMode	sources_non_forked/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.toggleMode() abort " {{{2$/;"	f
SyntasticModeMap.echoMode	sources_non_forked/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.echoMode() abort " {{{2$/;"	f
SyntasticModeMap.modeInfo	sources_non_forked/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap.modeInfo(filetypes) abort " {{{2$/;"	f
SyntasticModeMap._isOneFiletypeActive	sources_non_forked/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap._isOneFiletypeActive(filetypes) abort " {{{2$/;"	f
SyntasticModeMap._noFiletypesArePassive	sources_non_forked/syntastic/plugin/syntastic/modemap.vim	/^function! g:SyntasticModeMap._noFiletypesArePassive(filetypes) abort " {{{2$/;"	f
g:loaded_syntastic_notifier_cursor	sources_non_forked/syntastic/plugin/syntastic/cursor.vim	/^let g:loaded_syntastic_notifier_cursor = 1$/;"	v
g:SyntasticCursorNotifier	sources_non_forked/syntastic/plugin/syntastic/cursor.vim	/^let g:SyntasticCursorNotifier = {}$/;"	v
SyntasticCursorNotifier.New	sources_non_forked/syntastic/plugin/syntastic/cursor.vim	/^function! g:SyntasticCursorNotifier.New() abort " {{{2$/;"	f
SyntasticCursorNotifier.enabled	sources_non_forked/syntastic/plugin/syntastic/cursor.vim	/^function! g:SyntasticCursorNotifier.enabled() abort " {{{2$/;"	f
SyntasticCursorNotifier.refresh	sources_non_forked/syntastic/plugin/syntastic/cursor.vim	/^function! g:SyntasticCursorNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticCursorNotifier.reset	sources_non_forked/syntastic/plugin/syntastic/cursor.vim	/^function! g:SyntasticCursorNotifier.reset(loclist) abort " {{{2$/;"	f
SyntasticRefreshCursor	sources_non_forked/syntastic/plugin/syntastic/cursor.vim	/^function! SyntasticRefreshCursor() abort " {{{2$/;"	f
_is_same_index	sources_non_forked/syntastic/plugin/syntastic/cursor.vim	/^function! s:_is_same_index(line, old_line, column, idx, messages) abort " {{{2$/;"	f
_find_index	sources_non_forked/syntastic/plugin/syntastic/cursor.vim	/^function! s:_find_index(column, messages) abort " {{{2$/;"	f
g:loaded_syntastic_notifier_balloons	sources_non_forked/syntastic/plugin/syntastic/balloons.vim	/^let g:loaded_syntastic_notifier_balloons = 1$/;"	v
g:syntastic_enable_balloons	sources_non_forked/syntastic/plugin/syntastic/balloons.vim	/^    let g:syntastic_enable_balloons = 0$/;"	v
g:SyntasticBalloonsNotifier	sources_non_forked/syntastic/plugin/syntastic/balloons.vim	/^let g:SyntasticBalloonsNotifier = {}$/;"	v
SyntasticBalloonsNotifier.New	sources_non_forked/syntastic/plugin/syntastic/balloons.vim	/^function! g:SyntasticBalloonsNotifier.New() abort " {{{2$/;"	f
SyntasticBalloonsNotifier.enabled	sources_non_forked/syntastic/plugin/syntastic/balloons.vim	/^function! g:SyntasticBalloonsNotifier.enabled() abort " {{{2$/;"	f
SyntasticBalloonsNotifier.refresh	sources_non_forked/syntastic/plugin/syntastic/balloons.vim	/^function! g:SyntasticBalloonsNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticBalloonsNotifier.reset	sources_non_forked/syntastic/plugin/syntastic/balloons.vim	/^function! g:SyntasticBalloonsNotifier.reset(loclist) abort " {{{2$/;"	f
SyntasticBalloonsExprNotifier	sources_non_forked/syntastic/plugin/syntastic/balloons.vim	/^function! SyntasticBalloonsExprNotifier() abort " {{{2$/;"	f
g:loaded_syntastic_notifier_signs	sources_non_forked/syntastic/plugin/syntastic/signs.vim	/^let g:loaded_syntastic_notifier_signs = 1$/;"	v
s:first_sign_id	sources_non_forked/syntastic/plugin/syntastic/signs.vim	/^let s:first_sign_id = 5000$/;"	v
s:next_sign_id	sources_non_forked/syntastic/plugin/syntastic/signs.vim	/^let s:next_sign_id = s:first_sign_id$/;"	v
g:SyntasticSignsNotifier	sources_non_forked/syntastic/plugin/syntastic/signs.vim	/^let g:SyntasticSignsNotifier = {}$/;"	v
s:setup_done	sources_non_forked/syntastic/plugin/syntastic/signs.vim	/^let s:setup_done = 0$/;"	v
SyntasticSignsNotifier.New	sources_non_forked/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier.New() abort " {{{2$/;"	f
SyntasticSignsNotifier.enabled	sources_non_forked/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier.enabled() abort " {{{2$/;"	f
SyntasticSignsNotifier.refresh	sources_non_forked/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticSignsNotifier._setup	sources_non_forked/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier._setup() abort " {{{2$/;"	f
SyntasticSignsNotifier._signErrors	sources_non_forked/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier._signErrors(loclist) abort " {{{2$/;"	f
SyntasticSignsNotifier._removeSigns	sources_non_forked/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier._removeSigns(ids) abort " {{{2$/;"	f
SyntasticSignsNotifier._bufSignIds	sources_non_forked/syntastic/plugin/syntastic/signs.vim	/^function! g:SyntasticSignsNotifier._bufSignIds() abort " {{{2$/;"	f
g:loaded_syntastic_notifier_highlighting	sources_non_forked/syntastic/plugin/syntastic/highlighting.vim	/^let g:loaded_syntastic_notifier_highlighting = 1$/;"	v
s:has_highlighting	sources_non_forked/syntastic/plugin/syntastic/highlighting.vim	/^let s:has_highlighting = v:version > 701 || (v:version == 701 && has('patch040'))$/;"	v
g:SyntasticHighlightingNotifier	sources_non_forked/syntastic/plugin/syntastic/highlighting.vim	/^let g:SyntasticHighlightingNotifier = {}$/;"	v
s:setup_done	sources_non_forked/syntastic/plugin/syntastic/highlighting.vim	/^let s:setup_done = 0$/;"	v
SyntasticHighlightingNotifier.New	sources_non_forked/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier.New() abort " {{{2$/;"	f
SyntasticHighlightingNotifier.enabled	sources_non_forked/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier.enabled() abort " {{{2$/;"	f
SyntasticHighlightingNotifier.refresh	sources_non_forked/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier.refresh(loclist) abort " {{{2$/;"	f
SyntasticHighlightingNotifier.reset	sources_non_forked/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier.reset(loclist) abort " {{{2$/;"	f
SyntasticHighlightingNotifier._setup	sources_non_forked/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier._setup() abort " {{{2$/;"	f
SyntasticHighlightingNotifier._reset	sources_non_forked/syntastic/plugin/syntastic/highlighting.vim	/^function! g:SyntasticHighlightingNotifier._reset() abort " {{{2$/;"	f
g:loaded_syntastic_plugin	sources_non_forked/syntastic/plugin/syntastic.vim	/^let g:loaded_syntastic_plugin = 1$/;"	v
g:_SYNTASTIC_START	sources_non_forked/syntastic/plugin/syntastic.vim	/^    let g:_SYNTASTIC_START = reltime()$/;"	v
g:_SYNTASTIC_VERSION	sources_non_forked/syntastic/plugin/syntastic.vim	/^let g:_SYNTASTIC_VERSION = '3.8.0-73'$/;"	v
s:_running_windows	sources_non_forked/syntastic/plugin/syntastic.vim	/^let s:_running_windows = syntastic#util#isRunningWindows()$/;"	v
g:syntastic_shell	sources_non_forked/syntastic/plugin/syntastic.vim	/^    let g:syntastic_shell = &shell$/;"	v
g:_SYNTASTIC_UNAME	sources_non_forked/syntastic/plugin/syntastic.vim	/^    let g:_SYNTASTIC_UNAME = 'Windows'$/;"	v
g:_SYNTASTIC_UNAME	sources_non_forked/syntastic/plugin/syntastic.vim	/^        let g:_SYNTASTIC_UNAME = split(syntastic#util#system('uname'), "\\n")[0]$/;"	v
g:_SYNTASTIC_UNAME	sources_non_forked/syntastic/plugin/syntastic.vim	/^        let g:_SYNTASTIC_UNAME = 'Unknown'$/;"	v
g:_SYNTASTIC_UNAME	sources_non_forked/syntastic/plugin/syntastic.vim	/^    let g:_SYNTASTIC_UNAME = 'Unknown'$/;"	v
g:syntastic_version	sources_non_forked/syntastic/plugin/syntastic.vim	/^let g:syntastic_version =$/;"	v
g:_SYNTASTIC_DEFAULTS	sources_non_forked/syntastic/plugin/syntastic.vim	/^let g:_SYNTASTIC_DEFAULTS = {$/;"	v
g:syntastic_	sources_non_forked/syntastic/plugin/syntastic.vim	/^        let g:syntastic_{s:key} = copy(g:_SYNTASTIC_DEFAULTS[s:key])$/;"	v
s:quiet_warnings	sources_non_forked/syntastic/plugin/syntastic.vim	/^        let s:quiet_warnings = get(g:syntastic_quiet_messages, 'type', [])$/;"	v
s:quiet_warnings	sources_non_forked/syntastic/plugin/syntastic.vim	/^            let s:quiet_warnings = [s:quiet_warnings]$/;"	v
g:syntastic_quiet_messages	sources_non_forked/syntastic/plugin/syntastic.vim	/^        let g:syntastic_quiet_messages['type'] = s:quiet_warnings$/;"	v
g:_SYNTASTIC_SHELL_OPTIONS	sources_non_forked/syntastic/plugin/syntastic.vim	/^let g:_SYNTASTIC_SHELL_OPTIONS = [$/;"	v
g:_SYNTASTIC_DEBUG_TRACE	sources_non_forked/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_TRACE         = 1$/;"	v
g:_SYNTASTIC_DEBUG_LOCLIST	sources_non_forked/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_LOCLIST       = 2$/;"	v
g:_SYNTASTIC_DEBUG_NOTIFICATIONS	sources_non_forked/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_NOTIFICATIONS = 4$/;"	v
g:_SYNTASTIC_DEBUG_AUTOCOMMANDS	sources_non_forked/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_AUTOCOMMANDS  = 8$/;"	v
g:_SYNTASTIC_DEBUG_VARIABLES	sources_non_forked/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_VARIABLES     = 16$/;"	v
g:_SYNTASTIC_DEBUG_CHECKERS	sources_non_forked/syntastic/plugin/syntastic.vim	/^let     g:_SYNTASTIC_DEBUG_CHECKERS      = 32$/;"	v
s:registry	sources_non_forked/syntastic/plugin/syntastic.vim	/^let s:registry = g:SyntasticRegistry.Instance()$/;"	v
s:notifiers	sources_non_forked/syntastic/plugin/syntastic.vim	/^let s:notifiers = g:SyntasticNotifiers.Instance()$/;"	v
s:modemap	sources_non_forked/syntastic/plugin/syntastic.vim	/^let s:modemap = g:SyntasticModeMap.Instance()$/;"	v
s:_check_stack	sources_non_forked/syntastic/plugin/syntastic.vim	/^let s:_check_stack = []$/;"	v
s:_quit_pre	sources_non_forked/syntastic/plugin/syntastic.vim	/^let s:_quit_pre = []$/;"	v
CompleteCheckerName	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:CompleteCheckerName(argLead, cmdLine, cursorPos) abort " {{{2$/;"	f
CompleteFiletypes	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:CompleteFiletypes(argLead, cmdLine, cursorPos) abort " {{{2$/;"	f
SyntasticCheck	sources_non_forked/syntastic/plugin/syntastic.vim	/^command! -bar -nargs=* -complete=custom,s:CompleteCheckerName SyntasticCheck call SyntasticCheck(<f-args>)$/;"	c
SyntasticInfo	sources_non_forked/syntastic/plugin/syntastic.vim	/^command! -bar -nargs=? -complete=custom,s:CompleteFiletypes   SyntasticInfo  call SyntasticInfo(<f-args>)$/;"	c
Errors	sources_non_forked/syntastic/plugin/syntastic.vim	/^command! -bar Errors              call SyntasticErrors()$/;"	c
SyntasticReset	sources_non_forked/syntastic/plugin/syntastic.vim	/^command! -bar SyntasticReset      call SyntasticReset()$/;"	c
SyntasticToggleMode	sources_non_forked/syntastic/plugin/syntastic.vim	/^command! -bar SyntasticToggleMode call SyntasticToggleMode()$/;"	c
SyntasticSetLoclist	sources_non_forked/syntastic/plugin/syntastic.vim	/^command! -bar SyntasticSetLoclist call SyntasticSetLoclist()$/;"	c
SyntasticJavacEditClasspath	sources_non_forked/syntastic/plugin/syntastic.vim	/^command! SyntasticJavacEditClasspath runtime! syntax_checkers\/java\/*.vim | SyntasticJavacEditClasspath$/;"	c
SyntasticJavacEditConfig	sources_non_forked/syntastic/plugin/syntastic.vim	/^command! SyntasticJavacEditConfig    runtime! syntax_checkers\/java\/*.vim | SyntasticJavacEditConfig$/;"	c
SyntasticCheck	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! SyntasticCheck(...) abort " {{{2$/;"	f
SyntasticInfo	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! SyntasticInfo(...) abort " {{{2$/;"	f
SyntasticErrors	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! SyntasticErrors() abort " {{{2$/;"	f
SyntasticReset	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! SyntasticReset() abort " {{{2$/;"	f
SyntasticToggleMode	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! SyntasticToggleMode() abort " {{{2$/;"	f
SyntasticSetLoclist	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! SyntasticSetLoclist() abort " {{{2$/;"	f
syntastic	sources_non_forked/syntastic/plugin/syntastic.vim	/^augroup syntastic$/;"	a
syntastic	sources_non_forked/syntastic/plugin/syntastic.vim	/^    augroup syntastic$/;"	a
syntastic	sources_non_forked/syntastic/plugin/syntastic.vim	/^    augroup syntastic$/;"	a
syntastic	sources_non_forked/syntastic/plugin/syntastic.vim	/^    augroup syntastic$/;"	a
BufReadPostHook	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:BufReadPostHook(fname) abort " {{{2$/;"	f
BufWritePostHook	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:BufWritePostHook(fname) abort " {{{2$/;"	f
BufEnterHook	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:BufEnterHook(fname) abort " {{{2$/;"	f
BufWinEnterHook	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:BufWinEnterHook(fname) abort " {{{2$/;"	f
VimEnterHook	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:VimEnterHook() abort " {{{2$/;"	f
QuitPreHook	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:QuitPreHook(fname) abort " {{{2$/;"	f
UpdateErrors	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:UpdateErrors(buf, auto_invoked, checker_names) abort " {{{2$/;"	f
ClearCache	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:ClearCache(buf) abort " {{{2$/;"	f
CacheErrors	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:CacheErrors(buf, checker_names) abort " {{{2$/;"	f
SyntasticMake	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! SyntasticMake(options) abort " {{{2$/;"	f
SyntasticStatuslineFlag	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! SyntasticStatuslineFlag() abort " {{{2$/;"	f
_ignore_file	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:_ignore_file(filename) abort " {{{2$/;"	f
_is_quitting	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:_is_quitting(buf) abort " {{{2$/;"	f
_skip_file	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:_skip_file(buf) abort " {{{2$/;"	f
_explain_skip	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:_explain_skip(filetypes) abort " {{{2$/;"	f
_add_to_errors	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:_add_to_errors(errors, options) abort " {{{2$/;"	f
_os_name	sources_non_forked/syntastic/plugin/syntastic.vim	/^function! s:_os_name() abort " {{{2$/;"	f
g:loaded_syntastic_preprocess_autoload	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^let g:loaded_syntastic_preprocess_autoload = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^let s:save_cpo = &cpo$/;"	v
syntastic#preprocess#bandit	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#bandit(errors) abort " {{{2$/;"	f
syntastic#preprocess#cabal	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#cabal(errors) abort " {{{2$/;"	f
syntastic#preprocess#checkstyle	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#checkstyle(errors) abort " {{{2$/;"	f
syntastic#preprocess#cppcheck	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#cppcheck(errors) abort " {{{2$/;"	f
syntastic#preprocess#dockerfile_lint	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#dockerfile_lint(errors) abort " {{{2$/;"	f
syntastic#preprocess#dscanner	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#dscanner(errors) abort " {{{2$/;"	f
syntastic#preprocess#flow	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#flow(errors) abort " {{{2$/;"	f
syntastic#preprocess#iconv	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#iconv(errors) abort " {{{2$/;"	f
syntastic#preprocess#jscs	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#jscs(errors) abort " {{{2$/;"	f
syntastic#preprocess#killEmpty	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#killEmpty(errors) abort " {{{2$/;"	f
syntastic#preprocess#perl	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#perl(errors) abort " {{{2$/;"	f
syntastic#preprocess#prospector	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#prospector(errors) abort " {{{2$/;"	f
syntastic#preprocess#rparse	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#rparse(errors) abort " {{{2$/;"	f
syntastic#preprocess#scss_lint	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#scss_lint(errors) abort " {{{2$/;"	f
syntastic#preprocess#stylelint	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#stylelint(errors) abort " {{{2$/;"	f
syntastic#preprocess#tern_lint	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#tern_lint(errors) abort " {{{2$/;"	f
syntastic#preprocess#tslint	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#tslint(errors) abort " {{{2$/;"	f
syntastic#preprocess#validator	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#validator(errors) abort " {{{2$/;"	f
syntastic#preprocess#vint	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#vint(errors) abort " {{{2$/;"	f
syntastic#preprocess#basex	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#basex(errors) abort " {{{2$/;"	f
syntastic#preprocess#bro	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#bro(errors) abort " {{{2$/;"	f
syntastic#preprocess#coffeelint	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#coffeelint(errors) abort " {{{2$/;"	f
syntastic#preprocess#mypy	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#mypy(errors) abort " {{{2$/;"	f
syntastic#preprocess#nix	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! syntastic#preprocess#nix(errors) abort " {{{2$/;"	f
_decode_JSON	sources_non_forked/syntastic/autoload/syntastic/preprocess.vim	/^function! s:_decode_JSON(json) abort " {{{2$/;"	f
g:loaded_syntastic_c_autoload	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^let g:loaded_syntastic_c_autoload = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^let s:save_cpo = &cpo$/;"	v
syntastic#c#NullOutput	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#NullOutput() abort " {{{2$/;"	f
syntastic#c#ReadConfig	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#ReadConfig(file) abort " {{{2$/;"	f
syntastic#c#GetLocList	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#GetLocList(filetype, subchecker, options) abort " {{{2$/;"	f
_init	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! s:_init() abort " {{{2$/;"	f
_registerHandler	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! s:_registerHandler(regex, function, args) abort " {{{2$/;"	f
_checkPackage	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! s:_checkPackage(name, ...) abort " {{{2$/;"	f
_checkPhp	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! s:_checkPhp() abort " {{{2$/;"	f
_checkPython	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! s:_checkPython() abort " {{{2$/;"	f
_checkRuby	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! s:_checkRuby() abort " {{{2$/;"	f
_get_checker_var	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! s:_get_checker_var(scope, filetype, subchecker, name, default) abort " {{{2$/;"	f
_get_cflags	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! s:_get_cflags(ft, ck, opts) abort " {{{2$/;"	f
_get_include_dirs	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! s:_get_include_dirs(filetype) abort " {{{2$/;"	f
_search_headers	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^function! s:_search_headers() abort " {{{2$/;"	f
s:default_includes	sources_non_forked/syntastic/autoload/syntastic/c.vim	/^let s:default_includes = [$/;"	v
g:loaded_syntastic_log_autoload	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^let g:loaded_syntastic_log_autoload = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^let s:save_cpo = &cpo$/;"	v
s:one_time_notices_issued	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^let s:one_time_notices_issued = []$/;"	v
syntastic#log#info	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#info(msg) abort " {{{2$/;"	f
syntastic#log#warn	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#warn(msg) abort " {{{2$/;"	f
syntastic#log#error	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#error(msg) abort " {{{2$/;"	f
syntastic#log#oneTimeWarn	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#oneTimeWarn(msg) abort " {{{2$/;"	f
syntastic#log#deprecationWarn	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#deprecationWarn(old, new, ...) abort " {{{2$/;"	f
syntastic#log#debug	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#debug(level, msg, ...) abort " {{{2$/;"	f
syntastic#log#debugShowOptions	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#debugShowOptions(level, names) abort " {{{2$/;"	f
syntastic#log#debugShowVariables	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#debugShowVariables(level, names) abort " {{{2$/;"	f
syntastic#log#debugDump	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#debugDump(level) abort " {{{2$/;"	f
syntastic#log#ndebug	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! syntastic#log#ndebug(level, title, messages) abort " {{{2$/;"	f
_isDebugEnabled_smart	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! s:_isDebugEnabled_smart(level) abort " {{{2$/;"	f
_isDebugEnabled_dumb	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! s:_isDebugEnabled_dumb(level) abort " {{{2$/;"	f
s:_isDebugEnabled	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^let s:_isDebugEnabled = function(exists('*and') ? 's:_isDebugEnabled_smart' : 's:_isDebugEnabled_dumb')$/;"	v
_logRedirect	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! s:_logRedirect(on) abort " {{{2$/;"	f
_log_timestamp_smart	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! s:_log_timestamp_smart() abort " {{{2$/;"	f
_log_timestamp_dumb	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! s:_log_timestamp_dumb() abort " {{{2$/;"	f
s:_log_timestamp	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^let s:_log_timestamp = function(has('float') && exists('*reltimefloat') ? 's:_log_timestamp_smart' : 's:_log_timestamp_dumb')$/;"	v
_format_variable	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! s:_format_variable(name) abort " {{{2$/;"	f
_is_modified	sources_non_forked/syntastic/autoload/syntastic/log.vim	/^function! s:_is_modified(name) abort " {{{2$/;"	f
g:loaded_syntastic_util_autoload	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^let g:loaded_syntastic_util_autoload = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^let s:save_cpo = &cpo$/;"	v
syntastic#util#isRunningWindows	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#isRunningWindows() abort " {{{2$/;"	f
syntastic#util#DevNull	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#DevNull() abort " {{{2$/;"	f
syntastic#util#Slash	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#Slash() abort " {{{2$/;"	f
syntastic#util#CygwinPath	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#CygwinPath(path) abort " {{{2$/;"	f
syntastic#util#system	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#system(command) abort " {{{2$/;"	f
syntastic#util#tmpdir	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#tmpdir() abort " {{{2$/;"	f
syntastic#util#rmrf	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#rmrf(what) abort " {{{2$/;"	f
syntastic#util#getbufvar	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#getbufvar(buf, name, ...) abort " {{{2$/;"	f
syntastic#util#parseShebang	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#parseShebang(buf) abort " {{{2$/;"	f
syntastic#util#bufRawVar	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#bufRawVar(buf, name, ...) abort " {{{2$/;"	f
syntastic#util#bufVar	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#bufVar(buf, name, ...) abort " {{{2$/;"	f
syntastic#util#rawVar	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#rawVar(name, ...) abort " {{{2$/;"	f
syntastic#util#var	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#var(name, ...) abort " {{{2$/;"	f
syntastic#util#parseVersion	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#parseVersion(version, ...) abort " {{{2$/;"	f
syntastic#util#versionIsAtLeast	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#versionIsAtLeast(installed, required) abort " {{{2$/;"	f
syntastic#util#compareLexi	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#compareLexi(a, b) abort " {{{2$/;"	f
syntastic#util#screenWidth	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#screenWidth(str, tabstop) abort " {{{2$/;"	f
syntastic#util#wideMsg	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#wideMsg(msg) abort " {{{2$/;"	f
syntastic#util#bufIsActive	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#bufIsActive(buffer) abort " {{{2$/;"	f
syntastic#util#findFileInParent	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#findFileInParent(what, where) abort " {{{2$/;"	f
syntastic#util#findGlobInParent	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#findGlobInParent(what, where) abort " {{{2$/;"	f
syntastic#util#fname2buf	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#fname2buf(fname) abort " {{{2$/;"	f
syntastic#util#unique	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#unique(list) abort " {{{2$/;"	f
syntastic#util#shescape	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#shescape(string) abort " {{{2$/;"	f
syntastic#util#shexpand	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#shexpand(string, ...) abort " {{{2$/;"	f
syntastic#util#argsescape	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#argsescape(opt) abort " {{{2$/;"	f
syntastic#util#decodeXMLEntities	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#decodeXMLEntities(string) abort " {{{2$/;"	f
syntastic#util#redraw	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#redraw(full) abort " {{{2$/;"	f
syntastic#util#dictFilter	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#dictFilter(errors, filter) abort " {{{2$/;"	f
syntastic#util#stamp	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#stamp() abort " {{{2$/;"	f
syntastic#util#setLastTick	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#setLastTick(buf) abort " {{{2$/;"	f
syntastic#util#setWids	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#setWids() abort " {{{2$/;"	f
syntastic#util#str2float	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#str2float(val) abort " {{{2$/;"	f
syntastic#util#float2str	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#float2str(val) abort " {{{2$/;"	f
syntastic#util#wformat	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! syntastic#util#wformat(format, str) abort " {{{2$/;"	f
_translateFilter	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! s:_translateFilter(filters) abort " {{{2$/;"	f
_translateElement	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! s:_translateElement(key, term) abort " {{{2$/;"	f
s:_width	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^let s:_width = function(exists('*strwidth') ? 'strwidth' : 'strlen')$/;"	v
_delete_dumb	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! s:_delete_dumb(what, flags) abort " {{{2$/;"	f
s:_delete	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^let s:_delete = function(v:version > 704 || (v:version == 704 && has('patch1128')) ? 'delete' : 's:_delete_dumb')$/;"	v
_rmrf	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! s:_rmrf(what) abort " {{{2$/;"	f
s:_str2float	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^let s:_str2float = function(exists('*str2float') ? 'str2float' : 'str2nr')$/;"	v
_float2str_smart	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! s:_float2str_smart(val) abort " {{{2$/;"	f
_float2str_dumb	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! s:_float2str_dumb(val) abort " {{{2$/;"	f
s:_float2str	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^let s:_float2str = function(has('float') ? 's:_float2str_smart' : 's:_float2str_dumb')$/;"	v
_getbufvar_dumb	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! s:_getbufvar_dumb(buf, name, ...) abort " {{{2$/;"	f
s:_getbufvar	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^let s:_getbufvar = function(v:version > 703 || (v:version == 703 && has('patch831')) ? 'getbufvar' : 's:_getbufvar_dumb')$/;"	v
_fuzz_dumb	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^function! s:_fuzz_dumb() abort " {{{2$/;"	f
s:_fuzz	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^let s:_fuzz = function(exists('*getpid') ? 'getpid' : 's:_fuzz_dumb')$/;"	v
s:_wid_base	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^let s:_wid_base = 'syntastic_' . s:_fuzz() . '_' . reltimestr(g:_SYNTASTIC_START) . '_'$/;"	v
s:_wid_pool	sources_non_forked/syntastic/autoload/syntastic/util.vim	/^let s:_wid_pool = 0$/;"	v
g:loaded_syntastic_postprocess_autoload	sources_non_forked/syntastic/autoload/syntastic/postprocess.vim	/^let g:loaded_syntastic_postprocess_autoload = 1$/;"	v
s:save_cpo	sources_non_forked/syntastic/autoload/syntastic/postprocess.vim	/^let s:save_cpo = &cpo$/;"	v
syntastic#postprocess#compressWhitespace	sources_non_forked/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#compressWhitespace(errors) abort " {{{2$/;"	f
syntastic#postprocess#cygwinRemoveCR	sources_non_forked/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#cygwinRemoveCR(errors) abort " {{{2$/;"	f
syntastic#postprocess#decodeXMLEntities	sources_non_forked/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#decodeXMLEntities(errors) abort " {{{2$/;"	f
syntastic#postprocess#filterForeignErrors	sources_non_forked/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#filterForeignErrors(errors) abort " {{{2$/;"	f
syntastic#postprocess#guards	sources_non_forked/syntastic/autoload/syntastic/postprocess.vim	/^function! syntastic#postprocess#guards(errors) abort " {{{2$/;"	f
s:suite	sources_non_forked/lightline.vim/test/concatenate.vim	/^let s:suite = themis#suite('concatenate')$/;"	v
s:assert	sources_non_forked/lightline.vim/test/concatenate.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.before_each()$/;"	f
suite.nil	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.nil()$/;"	f
suite.one	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.one()$/;"	f
suite.two	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.two()$/;"	f
suite.three	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.three()$/;"	f
suite.one_empty	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.one_empty()$/;"	f
suite.two_empty_left	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_left()$/;"	f
suite.two_empty_right	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_right()$/;"	f
suite.two_empty_both	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_both()$/;"	f
suite.three_empty_left	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left()$/;"	f
suite.three_empty_middle	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_middle()$/;"	f
suite.three_empty_right	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_right()$/;"	f
suite.three_empty_middle_right	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_middle_right()$/;"	f
suite.three_empty_left_right	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left_right()$/;"	f
suite.three_empty_left_middle	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left_middle()$/;"	f
suite.three_empty_all	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_all()$/;"	f
suite.keep_original	sources_non_forked/lightline.vim/test/concatenate.vim	/^function! s:suite.keep_original()$/;"	f
s:suite	sources_non_forked/lightline.vim/test/highlight.vim	/^let s:suite = themis#suite('highlight')$/;"	v
s:assert	sources_non_forked/lightline.vim/test/highlight.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	sources_non_forked/lightline.vim/test/highlight.vim	/^function! s:suite.before_each()$/;"	f
hi	sources_non_forked/lightline.vim/test/highlight.vim	/^function! s:hi(name)$/;"	f
pattern	sources_non_forked/lightline.vim/test/highlight.vim	/^function! s:pattern(xs, ...) abort$/;"	f
suite.highlight	sources_non_forked/lightline.vim/test/highlight.vim	/^function! s:suite.highlight()$/;"	f
suite.insert	sources_non_forked/lightline.vim/test/highlight.vim	/^function! s:suite.insert()$/;"	f
suite.visual	sources_non_forked/lightline.vim/test/highlight.vim	/^function! s:suite.visual()$/;"	f
suite.replace	sources_non_forked/lightline.vim/test/highlight.vim	/^function! s:suite.replace()$/;"	f
suite.left_right	sources_non_forked/lightline.vim/test/highlight.vim	/^function! s:suite.left_right()$/;"	f
suite.no_components	sources_non_forked/lightline.vim/test/highlight.vim	/^function! s:suite.no_components()$/;"	f
suite.subseparator	sources_non_forked/lightline.vim/test/highlight.vim	/^function! s:suite.subseparator()$/;"	f
suite.component_type	sources_non_forked/lightline.vim/test/highlight.vim	/^function! s:suite.component_type()$/;"	f
s:suite	sources_non_forked/lightline.vim/test/uniq.vim	/^let s:suite = themis#suite('uniq')$/;"	v
s:assert	sources_non_forked/lightline.vim/test/uniq.vim	/^let s:assert = themis#helper('assert')$/;"	v
uniq	sources_non_forked/lightline.vim/test/uniq.vim	/^function! s:uniq(...)$/;"	f
suite.nil	sources_non_forked/lightline.vim/test/uniq.vim	/^function! s:suite.nil()$/;"	f
suite.one	sources_non_forked/lightline.vim/test/uniq.vim	/^function! s:suite.one()$/;"	f
suite.two	sources_non_forked/lightline.vim/test/uniq.vim	/^function! s:suite.two()$/;"	f
suite.three	sources_non_forked/lightline.vim/test/uniq.vim	/^function! s:suite.three()$/;"	f
suite.two_duplicated	sources_non_forked/lightline.vim/test/uniq.vim	/^function! s:suite.two_duplicated()$/;"	f
suite.three_duplicated	sources_non_forked/lightline.vim/test/uniq.vim	/^function! s:suite.three_duplicated()$/;"	f
suite.many1	sources_non_forked/lightline.vim/test/uniq.vim	/^function! s:suite.many1()$/;"	f
suite.many2	sources_non_forked/lightline.vim/test/uniq.vim	/^function! s:suite.many2()$/;"	f
suite.many3	sources_non_forked/lightline.vim/test/uniq.vim	/^function! s:suite.many3()$/;"	f
s:suite	sources_non_forked/lightline.vim/test/link.vim	/^let s:suite = themis#suite('link')$/;"	v
s:assert	sources_non_forked/lightline.vim/test/link.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	sources_non_forked/lightline.vim/test/link.vim	/^function! s:suite.before_each()$/;"	f
hi	sources_non_forked/lightline.vim/test/link.vim	/^function! s:hi(name)$/;"	f
suite.link	sources_non_forked/lightline.vim/test/link.vim	/^function! s:suite.link()$/;"	f
suite.insert	sources_non_forked/lightline.vim/test/link.vim	/^function! s:suite.insert()$/;"	f
suite.visual	sources_non_forked/lightline.vim/test/link.vim	/^function! s:suite.visual()$/;"	f
suite.replace	sources_non_forked/lightline.vim/test/link.vim	/^function! s:suite.replace()$/;"	f
suite.left_right	sources_non_forked/lightline.vim/test/link.vim	/^function! s:suite.left_right()$/;"	f
suite.subseparator	sources_non_forked/lightline.vim/test/link.vim	/^function! s:suite.subseparator()$/;"	f
suite.component_type	sources_non_forked/lightline.vim/test/link.vim	/^function! s:suite.component_type()$/;"	f
s:suite	sources_non_forked/lightline.vim/test/expand.vim	/^let s:suite = themis#suite('expand')$/;"	v
s:assert	sources_non_forked/lightline.vim/test/expand.vim	/^let s:assert = themis#helper('assert')$/;"	v
expand	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:expand(...)$/;"	f
suite.expand	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.expand()$/;"	f
suite.default	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.default()$/;"	f
suite.custom	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.raw_type	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.raw_type()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'raw' } }$/;"	v
suite.component_raw	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.component_raw()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' }, 'component_raw': { 'custom': 1 } }$/;"	v
suite.multiple	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.multiple()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.multiple_type	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.multiple_type()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.flatten	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.flatten()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_flatten	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_flatten()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_string	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_string()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_string	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_string()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_void_string	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_void_string	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_number	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_number()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_number	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_number()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_void_string_array	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_void_string_array	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_void_string_array_2	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_2()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_void_string_array_2	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_2()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_void_string_array_3	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_void_string_array_3	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_void_string_array_4	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_4()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_void_string_array_4	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_4()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_left_nil	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_left_nil()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_left_nil	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_left_nil()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_right_nil	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_right_nil()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_right_nil	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_right_nil()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_one	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_one()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_one	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_one()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_two	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_two()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_two	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_two()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_mixed	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_mixed()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_mixed	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_mixed()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_mixed_2	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_mixed_2()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_mixed_2	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_mixed_2()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.custom_error	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_error()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.custom_type_error	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_error()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.notfound	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.notfound()$/;"	f
suite.custom_type_notfound	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_notfound()$/;"	f
suite.duplicated_left_nil	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_left_nil()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.duplicated_type_left_nil	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_left_nil()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.duplicated_right_nil	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_right_nil()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.duplicated_type_right_nil	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_right_nil()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.duplicated_both_nil	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.duplicated_type_both_nil	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.duplicated_both_nil_left_most	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil_left_most()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.duplicated_type_both_nil_left_most	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil_left_most()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.duplicated_both_nil_right_most	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil_right_most()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
suite.duplicated_type_both_nil_right_most	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil_right_most()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
suite.dictionary_function	sources_non_forked/lightline.vim/test/expand.vim	/^function! s:suite.dictionary_function()$/;"	f
s:suite	sources_non_forked/lightline.vim/test/mode.vim	/^let s:suite = themis#suite('mode')$/;"	v
s:assert	sources_non_forked/lightline.vim/test/mode.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.mode	sources_non_forked/lightline.vim/test/mode.vim	/^function! s:suite.mode()$/;"	f
suite.mode_map	sources_non_forked/lightline.vim/test/mode.vim	/^function! s:suite.mode_map()$/;"	f
s:suite	sources_non_forked/lightline.vim/test/tabline.vim	/^let s:suite = themis#suite('tabline')$/;"	v
s:assert	sources_non_forked/lightline.vim/test/tabline.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	sources_non_forked/lightline.vim/test/tabline.vim	/^function! s:suite.before_each()$/;"	f
suite.tabline	sources_non_forked/lightline.vim/test/tabline.vim	/^function! s:suite.tabline()$/;"	f
suite.enabled	sources_non_forked/lightline.vim/test/tabline.vim	/^function! s:suite.enabled()$/;"	f
suite.disabled	sources_non_forked/lightline.vim/test/tabline.vim	/^function! s:suite.disabled()$/;"	f
suite.tabnew	sources_non_forked/lightline.vim/test/tabline.vim	/^function! s:suite.tabnew()$/;"	f
suite.tabnew_first	sources_non_forked/lightline.vim/test/tabline.vim	/^function! s:suite.tabnew_first()$/;"	f
suite.tabnext	sources_non_forked/lightline.vim/test/tabline.vim	/^function! s:suite.tabnext()$/;"	f
suite.tabonly	sources_non_forked/lightline.vim/test/tabline.vim	/^function! s:suite.tabonly()$/;"	f
suite.tabclose	sources_non_forked/lightline.vim/test/tabline.vim	/^function! s:suite.tabclose()$/;"	f
suite.tabclose_last	sources_non_forked/lightline.vim/test/tabline.vim	/^function! s:suite.tabclose_last()$/;"	f
s:suite	sources_non_forked/lightline.vim/test/tabs.vim	/^let s:suite = themis#suite('tabs')$/;"	v
s:assert	sources_non_forked/lightline.vim/test/tabs.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.before_each()$/;"	f
tab	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:tab(number, ...) abort$/;"	f
suite.tabs	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.tabs()$/;"	f
suite.tabnew	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew()$/;"	f
suite.tabnew_tabnew	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew()$/;"	f
suite.tabnew_tabfirst	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabfirst()$/;"	f
suite.tabnew_tabnew_tabfirst	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew_tabfirst()$/;"	f
suite.tabnew_tabnew_tabprevious	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew_tabprevious()$/;"	f
suite.tabnew_20	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20()$/;"	f
suite.tabnew_20_tabfirst	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabfirst()$/;"	f
suite.tabnew_20_tabfirst_tabnext	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabfirst_tabnext()$/;"	f
suite.tabnew_20_tabnext_10	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabnext_10()$/;"	f
suite.tabnew_20_tabprevious	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabprevious()$/;"	f
suite.tabnew_20_tabprevious_tabprevious	sources_non_forked/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabprevious_tabprevious()$/;"	f
s:suite	sources_non_forked/lightline.vim/test/subseparator.vim	/^let s:suite = themis#suite('subseparator')$/;"	v
s:assert	sources_non_forked/lightline.vim/test/subseparator.vim	/^let s:assert = themis#helper('assert')$/;"	v
subseparator	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:subseparator(...)$/;"	f
suite.subseparator_component	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component()$/;"	f
suite.subseparator_component_visible_condition_1	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_1()$/;"	f
suite.subseparator_component_visible_condition_2	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_2()$/;"	f
suite.subseparator_component_visible_condition_3	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_3()$/;"	f
suite.subseparator_component_visible_condition_4	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_4()$/;"	f
suite.subseparator_component_visible_condition_5	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_5()$/;"	f
suite.subseparator_component_visible_condition_6	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_6()$/;"	f
suite.subseparator_component_visible_condition_7	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_7()$/;"	f
suite.subseparator_component_function	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_1	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_1()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_2	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_2()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_3	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_3()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_4	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_4()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_5	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_5()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_6	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_6()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_7	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_7()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_function_visible_condition_1	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_1()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '1', 'custom2': '1', 'custom3': '1' } }$/;"	v
suite.subseparator_component_function_visible_condition_2	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_2()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '0', 'custom2': '1', 'custom3': '1' } }$/;"	v
suite.subseparator_component_function_visible_condition_3	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_3()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '1', 'custom2': '0', 'custom3': '1' } }$/;"	v
suite.subseparator_component_function_visible_condition_4	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_4()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '1', 'custom2': '0', 'custom3': '0' } }$/;"	v
suite.subseparator_component_function_visible_condition_5	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_5()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '0' } }$/;"	v
suite.subseparator_component_function_visible_condition_6	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_6()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom2': '1', 'custom3': '1' } }$/;"	v
suite.subseparator_component_function_visible_condition_7	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_7()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom3': '1' } }$/;"	v
suite.subseparator_component_expand	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_expand	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_expand_1	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_1()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1' }, 'component_function': { 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_expand_2	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_2()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1', 'custom2': 'Custom2' }, 'component_function': { 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_expand_3	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_3()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2' }, 'component_expand': { 'custom3': 'Custom3' } }$/;"	v
suite.subseparator_component_not_found	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1' } }$/;"	v
suite.subseparator_component_not_found_1	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found_1()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom2': 'Custom2' } }$/;"	v
suite.subseparator_component_not_found_2	sources_non_forked/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found_2()$/;"	f
Custom2	sources_non_forked/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2' } }$/;"	v
s:suite	sources_non_forked/lightline.vim/test/toggle.vim	/^let s:suite = themis#suite('toggle')$/;"	v
s:assert	sources_non_forked/lightline.vim/test/toggle.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	sources_non_forked/lightline.vim/test/toggle.vim	/^function! s:suite.before_each()$/;"	f
suite.default	sources_non_forked/lightline.vim/test/toggle.vim	/^function! s:suite.default()$/;"	f
suite.disable_enable	sources_non_forked/lightline.vim/test/toggle.vim	/^function! s:suite.disable_enable()$/;"	f
suite.toggle	sources_non_forked/lightline.vim/test/toggle.vim	/^function! s:suite.toggle()$/;"	f
s:suite	sources_non_forked/lightline.vim/test/onetab.vim	/^let s:suite = themis#suite('onetab')$/;"	v
s:assert	sources_non_forked/lightline.vim/test/onetab.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.before_each	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.before_each()$/;"	f
suite.onetab	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.onetab()$/;"	f
suite.tabnew	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.tabnew()$/;"	f
suite.tabnew_tabnew	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.tabnew_tabnew()$/;"	f
suite.modified	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.modified()$/;"	f
suite.filename	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.filename()$/;"	f
suite.filename_modified	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.filename_modified()$/;"	f
suite.active_inactive	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.active_inactive()$/;"	f
suite.tab_component	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component()$/;"	f
suite.tab_component_function	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_function()$/;"	f
g:lightline	sources_non_forked/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'custom' ] }, 'tab_component_function': { 'custom': 'Custom' } }$/;"	v
suite.tab_component_empty_middle	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_empty_middle()$/;"	f
suite.tab_component_empty_left	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_empty_left()$/;"	f
suite.tab_component_empty_middle	sources_non_forked/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_empty_middle()$/;"	f
s:suite	sources_non_forked/lightline.vim/test/error.vim	/^let s:suite = themis#suite('error')$/;"	v
s:assert	sources_non_forked/lightline.vim/test/error.vim	/^let s:assert = themis#helper('assert')$/;"	v
message	sources_non_forked/lightline.vim/test/error.vim	/^function! s:message() abort$/;"	f
suite.error	sources_non_forked/lightline.vim/test/error.vim	/^function! s:suite.error()$/;"	f
g:loaded_lightline	sources_non_forked/lightline.vim/plugin/lightline.vim	/^let g:loaded_lightline = 1$/;"	v
s:save_cpo	sources_non_forked/lightline.vim/plugin/lightline.vim	/^let s:save_cpo = &cpo$/;"	v
lightline	sources_non_forked/lightline.vim/plugin/lightline.vim	/^augroup lightline$/;"	a
s:save_cpo	sources_non_forked/lightline.vim/autoload/lightline.vim	/^let s:save_cpo = &cpo$/;"	v
s:_	sources_non_forked/lightline.vim/autoload/lightline.vim	/^let s:_ = 1$/;"	v
lightline#update	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#update() abort$/;"	f
lightline#update_once	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#update_once() abort$/;"	f
lightline#update_disable	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#update_disable() abort$/;"	f
lightline#enable	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#enable() abort$/;"	f
lightline#disable	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#disable() abort$/;"	f
lightline#toggle	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#toggle() abort$/;"	f
s:_lightline	sources_non_forked/lightline.vim/autoload/lightline.vim	/^let s:_lightline = {$/;"	v
lightline#init	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#init() abort$/;"	f
lightline#colorscheme	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#colorscheme() abort$/;"	f
lightline#palette	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#palette() abort$/;"	f
lightline#mode	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#mode() abort$/;"	f
s:mode	sources_non_forked/lightline.vim/autoload/lightline.vim	/^let s:mode = ''$/;"	v
lightline#link	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#link(...) abort$/;"	f
term	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! s:term(p) abort$/;"	f
s:uniq	sources_non_forked/lightline.vim/autoload/lightline.vim	/^  let s:uniq = function('uniq')$/;"	v
uniq	sources_non_forked/lightline.vim/autoload/lightline.vim	/^  function! s:uniq(xs) abort$/;"	f
lightline#highlight	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#highlight(...) abort$/;"	f
subseparator	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! s:subseparator(components, subseparator, expanded) abort$/;"	f
lightline#concatenate	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#concatenate(xs, right) abort$/;"	f
lightline#statusline	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#statusline(inactive) abort$/;"	f
normalize	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! s:normalize(result) abort$/;"	f
evaluate_expand	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! s:evaluate_expand(component) abort$/;"	f
convert	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! s:convert(name, index) abort$/;"	f
flatten_twice	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! s:flatten_twice(xss) abort$/;"	f
s:map	sources_non_forked/lightline.vim/autoload/lightline.vim	/^  let s:map = function('map')$/;"	v
map	sources_non_forked/lightline.vim/autoload/lightline.vim	/^  function! s:map(xs, f) abort$/;"	f
expand	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! s:expand(components) abort$/;"	f
line	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! s:line(tabline, inactive) abort$/;"	f
s:tabnr	sources_non_forked/lightline.vim/autoload/lightline.vim	/^let s:tabnr = -1$/;"	v
s:tabcnt	sources_non_forked/lightline.vim/autoload/lightline.vim	/^let s:tabcnt = -1$/;"	v
s:tabline	sources_non_forked/lightline.vim/autoload/lightline.vim	/^let s:tabline = ''$/;"	v
lightline#tabline	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#tabline() abort$/;"	f
lightline#tabs	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#tabs() abort$/;"	f
lightline#onetab	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#onetab(n, active) abort$/;"	f
lightline#error	sources_non_forked/lightline.vim/autoload/lightline.vim	/^function! lightline#error(msg) abort$/;"	f
s:save_cpo	sources_non_forked/lightline.vim/autoload/lightline/tab.vim	/^let s:save_cpo = &cpo$/;"	v
lightline#tab#filename	sources_non_forked/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#filename(n) abort$/;"	f
lightline#tab#modified	sources_non_forked/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#modified(n) abort$/;"	f
lightline#tab#readonly	sources_non_forked/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#readonly(n) abort$/;"	f
lightline#tab#tabnum	sources_non_forked/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#tabnum(n) abort$/;"	f
s:base03	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base02	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base02 = [ '#30302c ', 236 ]$/;"	v
s:base01	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base00	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base0	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base3	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:yellow = [ '#ffb964', 215 ]$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:orange = [ '#fad07a', 222 ]$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:red = [ '#cf6a4c', 167 ]$/;"	v
s:magenta	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:magenta = [ '#f0a0c0', 217 ]$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:blue = [ '#8197bf', 103 ]$/;"	v
s:cyan	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:cyan = [ '#8fbfdc', 110 ]$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:green = [ '#99ad6a', 107 ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.replace.left = [ [ s:base02, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
g:lightline#colorscheme#jellybeans#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let g:lightline#colorscheme#jellybeans#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:base03	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base03 = [ '#242424', 235 ]$/;"	v
s:base023	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base023 = [ '#353535 ', 236 ]$/;"	v
s:base02	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base02 = [ '#444444 ', 238 ]$/;"	v
s:base01	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base01 = [ '#585858', 240 ]$/;"	v
s:base00	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base00 = [ '#666666', 242  ]$/;"	v
s:base0	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base0 = [ '#808080', 244 ]$/;"	v
s:base1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base1 = [ '#969696', 247 ]$/;"	v
s:base2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base2 = [ '#a8a8a8', 248 ]$/;"	v
s:base3	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base3 = [ '#d0d0d0', 252 ]$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:yellow = [ '#cae682', 180 ]$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:orange = [ '#e5786d', 173 ]$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:red = [ '#e5786d', 203 ]$/;"	v
s:magenta	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:magenta = [ '#f2c68a', 216 ]$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:blue = [ '#8ac6f2', 117 ]$/;"	v
s:cyan	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:cyan = s:blue$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:green = [ '#95e454', 119 ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.right = [ [ s:base023, s:base01 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base02 ], [ s:base00, s:base023 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base03 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
g:lightline#colorscheme#wombat#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let g:lightline#colorscheme#wombat#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:red = '#df0000'$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:green = '#008700'$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:blue = '#4271ae'$/;"	v
s:pink	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:pink = '#d7005f'$/;"	v
s:olive	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:olive = '#718c00'$/;"	v
s:navy	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:navy = '#005f87'$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:orange = '#d75f00'$/;"	v
s:purple	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:purple = '#8959a8'$/;"	v
s:aqua	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:aqua = '#3e999f'$/;"	v
s:foreground	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:foreground = '#4d4d4c'$/;"	v
s:background	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:background = '#F5F5F5'$/;"	v
s:window	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:window = '#efefef'$/;"	v
s:status	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:status = s:aqua$/;"	v
s:error	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:error = '#ffafdf'$/;"	v
s:tabline_bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_bg = s:navy$/;"	v
s:tabline_active_fg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_active_fg = s:foreground$/;"	v
s:tabline_active_bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_active_bg = s:window$/;"	v
s:tabline_inactive_fg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_inactive_fg = s:background$/;"	v
s:tabline_inactive_bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_inactive_bg = s:aqua$/;"	v
s:statusline_active_fg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_active_fg = s:window$/;"	v
s:statusline_active_bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_active_bg = s:navy$/;"	v
s:statusline_inactive_fg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_inactive_fg = s:foreground$/;"	v
s:statusline_inactive_bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_inactive_bg = '#dadada'$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.left = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.right = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.middle = [ [ s:statusline_active_fg, s:statusline_active_bg ]]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.right = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.left = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.middle = [ [ s:foreground, s:background ], ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.insert.left = [ [ s:blue, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.replace.left = [ [ s:background, s:pink ], [s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.visual.left = [ [ s:background, s:orange ], [s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.left = [ [s:tabline_inactive_fg, s:tabline_inactive_bg ]]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.tabsel = [ [s:tabline_active_fg, s:tabline_active_bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.middle = [ [s:tabline_bg, s:tabline_bg]]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.error = [ [ s:background, s:error ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.warning = [ [ s:background, s:olive ] ]$/;"	v
g:lightline#colorscheme#PaperColor_light#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let g:lightline#colorscheme#PaperColor_light#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#PaperColor#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor.vim	/^  let g:lightline#colorscheme#PaperColor#palette = g:lightline#colorscheme#PaperColor_light#palette$/;"	v
g:lightline#colorscheme#PaperColor#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor.vim	/^  let g:lightline#colorscheme#PaperColor#palette = g:lightline#colorscheme#PaperColor_dark#palette$/;"	v
s:base3	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base3 = '#eaeaea'$/;"	v
s:base23	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base23 = '#d0d0d0'$/;"	v
s:base2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base2 = '#c6c6c6'$/;"	v
s:base1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base1 = '#b2b2b2'$/;"	v
s:base0	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base0 = '#949494'$/;"	v
s:base00	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base00 = '#767676'$/;"	v
s:base01	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base01 = '#606060'$/;"	v
s:base02	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base02 = '#4e4e4e'$/;"	v
s:base023	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base023 = '#262626'$/;"	v
s:base03	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base03 = '#12124c'$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:red = '#d54e53'$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:orange = '#e78c45'$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:yellow = '#e7c547'$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:green = '#b9ca4a'$/;"	v
s:cyan	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:cyan = '#70c0b1'$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:blue = '#7aa6da'$/;"	v
s:magenta	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:magenta = '#c397d8'$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.error = [ [ s:red, s:base023 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base02 ] ]$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Bright#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Bright#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.left = [ ['#0000ff', '#ffffff', 21, 231, 'bold' ], [ '#ffffff', '#0000ff', 231, 21 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.right = [ [ '#303030', '#d0d0d0', 236, 252 ], [ '#303030', '#8a8a8a', 236, 245 ], [ '#bcbcbc', '#585858', 250, 240 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.right = [ [ '#121212', '#606060', 233, 241 ], [ '#121212', '#3a3a3a', 233, 237 ], [ '#121212', '#262626', 233, 235 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.insert.left =  [ ['#005f00', '#ffffff', 22, 231, 'bold' ], [ '#ffffff', '#005f00', 231, 22 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.replace.left = [ [ '#af0000', '#ffffff', 124, 231, 'bold' ], [ '#ffffff', '#af0000', 231, 124 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.visual.left = [ [ '#5f00ff', '#ffffff', 57, 231, 'bold' ], [ '#ffffff', '#5f00ff', 231, 57 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.middle = [ [ '#8a8a8a', '#303030', 245, 236 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.middle = [ [ '#303030', '#121212', 236, 233 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.left = [ [ '#d0d0d0', '#666666', 252, 242 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.tabsel = [ [ '#dadada', '#121212', 253, 233 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.middle = [ [ '#8a8a8a', '#3a3a3a', 245, 237 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.right = [ [ '#d0d0d0', '#666666', 252, 242 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.error = [ [ '#d0d0d0', '#ff0000', 252, 196 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.warning = [ [ '#262626', '#ffff00', 235, 226 ] ]$/;"	v
g:lightline#colorscheme#landscape#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let g:lightline#colorscheme#landscape#palette = s:p$/;"	v
s:base03	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base03 = [ '#808080', 8 ]$/;"	v
s:base02	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base02 = [ '#000000', 0 ]$/;"	v
s:base01	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base01 = [ '#00ff00', 10 ]$/;"	v
s:base00	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base00 = [ '#ffff00', 11  ]$/;"	v
s:base0	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base0 = [ '#0000ff', 12 ]$/;"	v
s:base1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base1 = [ '#00ffff', 14 ]$/;"	v
s:base2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base2 = [ '#c0c0c0', 7 ]$/;"	v
s:base3	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:base3 = [ '#ffffff', 15 ]$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:yellow = [ '#808000', 3 ]$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:orange = [ '#ff0000', 9 ]$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:red = [ '#800000', 1 ]$/;"	v
s:magenta	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:magenta = [ '#800080', 5 ]$/;"	v
s:violet	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:violet = [ '#ff00ff', 13 ]$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:blue = [ '#000080', 4 ]$/;"	v
s:cyan	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:cyan = [ '#008080', 6 ]$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:green = [ '#008000', 2 ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.left = [ [ s:base3, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.right = [ [ s:base02, s:base01 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.insert.left = [ [ s:base3, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.replace.left = [ [ s:base3, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.visual.left = [ [ s:base3, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base2 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.error = [ [ s:base2, s:red ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.warning = [ [ s:base02, s:yellow ] ]$/;"	v
g:lightline#colorscheme#16color#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let g:lightline#colorscheme#16color#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:black	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:black = [ '#2b2b2b', 235 ]$/;"	v
s:gray	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:gray = [ '#323232', 236 ]$/;"	v
s:white	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:white = [ '#a9b7c6', 250 ]$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:blue = [ '#6897bb' , 67 ] $/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:green = [ '#629755', 71 ] $/;"	v
s:purple	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:purple = [ '#9876aa', 104 ]$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:red = [ '#ff6b68', 204 ]$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:yellow = [ '#ffc66d', 222 ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.left = [ [ s:black, s:purple ], [ s:purple, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.right = [ [ s:black, s:purple ], [ s:purple, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.left =  [ [ s:black, s:blue ], [ s:blue, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.right = [ [ s:black, s:blue ], [ s:blue, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:green, s:gray ] ] $/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.insert.right = [ [ s:black, s:green ], [ s:green, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:red, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.replace.right = [ [ s:black, s:red ], [ s:red, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.visual.left = [ [ s:black, s:yellow ], [ s:yellow, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.visual.right = [ [ s:black, s:yellow ], [ s:yellow, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.middle = [ [ s:white, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.middle = [ [ s:white, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.left = [ [ s:blue, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.tabsel = [ [ s:black, s:blue ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.middle = [ [ s:blue, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.right = [ [ s:black, s:blue ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.error = [ [ s:red, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.warning = [ [ s:yellow, s:black ] ]$/;"	v
g:lightline#colorscheme#darcula#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let g:lightline#colorscheme#darcula#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:black	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:black = [ '#282a36', 235 ]$/;"	v
s:gray	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:gray = [ '#44475a', 236 ]$/;"	v
s:white	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:white = [ '#f8f8f2', 231 ]$/;"	v
s:darkblue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:darkblue = [ '#6272a4', 61 ]$/;"	v
s:cyan	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:cyan = [ '#8be9fd', 117 ]$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:green = [ '#50fa7b', 84 ]$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:orange = [ '#ffb86c', 215 ]$/;"	v
s:purple	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:purple = [ '#bd93f9', 141 ]$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:red = [ '#ff79c6', 212 ]$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:yellow = [ '#f1fa8c', 228 ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.normal.left = [ [ s:black, s:purple ], [ s:cyan, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.normal.right = [ [ s:black, s:purple ], [ s:white, s:darkblue ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.inactive.right = [ [ s:black, s:gray ], [ s:white, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.inactive.left =  [ [ s:cyan, s:black ], [ s:white, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:cyan, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:cyan, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.visual.left = [ [ s:black, s:orange ], [ s:cyan, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.normal.middle = [ [ s:white, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.inactive.middle = [ [ s:white, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.tabline.left = [ [ s:darkblue, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.tabline.tabsel = [ [ s:cyan, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.tabline.middle = [ [ s:darkblue, s:gray ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.normal.error = [ [ s:red, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let s:p.normal.warning = [ [ s:yellow, s:black ] ]$/;"	v
g:lightline#colorscheme#Dracula#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Dracula.vim	/^let g:lightline#colorscheme#Dracula#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:cuicolors	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:cuicolors = {$/;"	v
s:solarized_termcolors	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:solarized_termcolors = get(g:, 'solarized_termcolors', 256)$/;"	v
s:cuiindex	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 0$/;"	v
s:cuiindex	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 1$/;"	v
s:cuiindex	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 2$/;"	v
s:base03	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base03 = [ '#002b36', s:cuicolors.base03[s:cuiindex] ]$/;"	v
s:base02	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base02 = [ '#073642', s:cuicolors.base02[s:cuiindex] ]$/;"	v
s:base01	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base01 = [ '#586e75', s:cuicolors.base01[s:cuiindex] ]$/;"	v
s:base00	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base00 = [ '#657b83', s:cuicolors.base00[s:cuiindex] ]$/;"	v
s:base0	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base0 = [ '#839496', s:cuicolors.base0[s:cuiindex] ]$/;"	v
s:base1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base1 = [ '#93a1a1', s:cuicolors.base1[s:cuiindex] ]$/;"	v
s:base2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base2 = [ '#eee8d5', s:cuicolors.base2[s:cuiindex] ]$/;"	v
s:base3	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base3 = [ '#fdf6e3', s:cuicolors.base3[s:cuiindex] ]$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:yellow = [ '#b58900', s:cuicolors.yellow[s:cuiindex] ]$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:orange = [ '#cb4b16', s:cuicolors.orange[s:cuiindex] ]$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:red = [ '#dc322f', s:cuicolors.red[s:cuiindex] ]$/;"	v
s:magenta	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:magenta = [ '#d33682', s:cuicolors.magenta[s:cuiindex] ]$/;"	v
s:violet	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:violet = [ '#6c71c4', s:cuicolors.violet[s:cuiindex] ]$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:blue = [ '#268bd2', s:cuicolors.blue[s:cuiindex] ]$/;"	v
s:cyan	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:cyan = [ '#2aa198', s:cuicolors.cyan[s:cuiindex] ]$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:green = [ '#859900', s:cuicolors.green[s:cuiindex] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.left = [ [ s:base03, s:blue ], [ s:base03, s:base00 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.right = [ [ s:base03, s:base1 ], [ s:base03, s:base00 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.right = [ [ s:base03, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.insert.left = [ [ s:base03, s:green ], [ s:base03, s:base00 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.replace.left = [ [ s:base03, s:red ], [ s:base03, s:base00 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.visual.left = [ [ s:base03, s:magenta ], [ s:base03, s:base00 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.middle = [ [ s:base01, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.left = [ [ s:base03, s:base00 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.tabsel = [ [ s:base03, s:base1 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.warning = [ [ s:base03, s:yellow ] ]$/;"	v
g:lightline#colorscheme#solarized#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let g:lightline#colorscheme#solarized#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#default#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/default.vim	/^let g:lightline#colorscheme#default#palette = g:lightline#colorscheme#powerline#palette$/;"	v
s:base3	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base3 = '#c5c8c6'$/;"	v
s:base2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base2 = '#bababa'$/;"	v
s:base1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base1 = '#a0a0a0'$/;"	v
s:base0	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base0 = '#909090'$/;"	v
s:base00	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base00 = '#666666'$/;"	v
s:base01	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base01 = '#555555'$/;"	v
s:base02	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base02 = '#434343'$/;"	v
s:base023	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base023 = '#303030'$/;"	v
s:base03	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base03 = '#1d1f21'$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:red = '#cc6666'$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:orange = '#de935f'$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:yellow = '#f0c674'$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:green = '#b5bd68'$/;"	v
s:cyan	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:cyan = '#8abeb7'$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:blue = '#81a2be'$/;"	v
s:magenta	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:magenta = '#b294bb'$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.replace.left = [ [ s:base02, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base0 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.error = [ [ s:red, s:base023 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base02 ] ]$/;"	v
g:lightline#colorscheme#Tomorrow_Night#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let g:lightline#colorscheme#Tomorrow_Night#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:red = '#df0000'$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:green = '#008700'$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:blue = '#00afaf'$/;"	v
s:pink	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:pink = '#afdf00'$/;"	v
s:olive	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:olive = '#dfaf5f'$/;"	v
s:navy	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:navy = '#df875f'$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:orange = '#d75f00'$/;"	v
s:purple	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:purple = '#8959a8'$/;"	v
s:aqua	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:aqua = '#3e999f'$/;"	v
s:foreground	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:foreground = '#d0d0d0'$/;"	v
s:background	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:background = '#444444'$/;"	v
s:window	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:window = '#efefef'$/;"	v
s:status	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:status = '#c6c6c6'$/;"	v
s:error	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:error = '#5f0000'$/;"	v
s:tabline_bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_bg = '#3a3a3a'$/;"	v
s:tabline_active_fg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_active_fg = '#1c1c1c'$/;"	v
s:tabline_active_bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_active_bg = '#00afaf'$/;"	v
s:tabline_inactive_fg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_inactive_fg = '#c6c6c6'$/;"	v
s:tabline_inactive_bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_inactive_bg = '#585858'$/;"	v
s:statusline_active_fg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_active_fg = '#1c1c1c'$/;"	v
s:statusline_active_bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_active_bg = '#5f8787'$/;"	v
s:statusline_inactive_fg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_inactive_fg = '#c6c6c6'$/;"	v
s:statusline_inactive_bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_inactive_bg = '#444444'$/;"	v
s:visual_fg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:visual_fg = '#000000'$/;"	v
s:visual_bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:visual_bg = '#8787af'$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.left = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.right = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.middle = [ [ s:statusline_active_fg, s:statusline_active_bg ]]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.right = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.left = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.middle = [ [ s:foreground, s:background ], ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.insert.left = [ [ s:background, s:blue], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.replace.left = [ [ s:background, s:pink ], [s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.visual.left = [ [ s:visual_fg, s:visual_bg ], [s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.left = [ [s:tabline_inactive_fg, s:tabline_inactive_bg ]]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.tabsel = [ [s:tabline_active_fg, s:tabline_active_bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.middle = [ [s:tabline_bg, s:tabline_bg]]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.error = [ [ s:background, s:error ] ]$/;"	v
g:lightline#colorscheme#PaperColor_dark#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let g:lightline#colorscheme#PaperColor_dark#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:base3	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base3 = '#ffffff'$/;"	v
s:base23	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base23 = '#ffffff'$/;"	v
s:base2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base2 = '#ffffff'$/;"	v
s:base1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base1 = '#ffffff'$/;"	v
s:base0	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base0 = '#ffffff'$/;"	v
s:base00	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base00 = '#6060df'$/;"	v
s:base01	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base01 = '#6060af'$/;"	v
s:base02	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base02 = '#606087'$/;"	v
s:base023	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base023 = '#202087'$/;"	v
s:base03	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base03 = '#002451'$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:red = '#ff9da4'$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:orange = '#ffc58f'$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:yellow = '#ffeead'$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:green = '#d1f1a9'$/;"	v
s:cyan	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:cyan = '#99ffff'$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:blue = '#bbdaff'$/;"	v
s:magenta	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:magenta = '#ebbbff'$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base03 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.error = [ [ s:base023, s:red ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Blue#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Blue#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.left = [ ['darkestgreen', 'brightgreen', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.right = [ ['gray5', 'gray10'], ['gray9', 'gray4'], ['gray8', 'gray2'] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.inactive.right = [ ['gray1', 'gray5'], ['gray4', 'gray1'], ['gray4', 'gray0'] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.left = [ ['darkestcyan', 'white', 'bold'], ['white', 'darkblue'] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.right = [ [ 'darkestcyan', 'mediumcyan' ], [ 'mediumcyan', 'darkblue' ], [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.left = [ ['white', 'brightred', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.visual.left = [ ['darkred', 'brightorange', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.middle = [ [ 'gray7', 'gray2' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.middle = [ [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.right = s:p.normal.right$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.left = [ [ 'gray9', 'gray4' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.tabsel = [ [ 'gray9', 'gray1' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.middle = [ [ 'gray2', 'gray8' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.right = [ [ 'gray9', 'gray3' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.error = [ [ 'gray9', 'brightestred' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.warning = [ [ 'gray1', 'yellow' ] ]$/;"	v
g:lightline#colorscheme#powerline#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let g:lightline#colorscheme#powerline#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:base03	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base02	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base02 = [ '#30302c ', 236 ]$/;"	v
s:base01	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base00	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base0	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base3	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:yellow = [ '#d8af5f', 3 ]$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:orange = [ '#d7875f', 216 ]$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:red = [ '#d68787', 131 ]$/;"	v
s:magenta	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:magenta = [ '#df5f87', 168 ]$/;"	v
s:peach	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:peach = [ '#d7afaf', 181 ]$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:blue = [ '#87afaf', 109 ]$/;"	v
s:cyan	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:cyan = [ '#87d7d7', 23 ]$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:green = [ '#87af87', 108 ]$/;"	v
s:white	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:white = [ '#d0d0d0', 252 ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.replace.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.visual.left = [ [ s:base02, s:peach ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
g:lightline#colorscheme#seoul256#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let g:lightline#colorscheme#seoul256#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:base03	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base03 = '#fafafa'$/;"	v
s:base023	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base023 = '#dfdfdf'$/;"	v
s:base02	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base02 = '#c8c8c8'$/;"	v
s:base01	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base01 = '#b4b4b4'$/;"	v
s:base00	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base00 = '#808080'$/;"	v
s:base0	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base0 = '#666666'$/;"	v
s:base1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base1 = '#555555'$/;"	v
s:base2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base2 = '#4f4f4f'$/;"	v
s:base3	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base3 = '#4d4d4c'$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:red = '#c82829'$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:orange = '#f5871f'$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:yellow = '#eab700'$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:green = '#718c00'$/;"	v
s:cyan	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:cyan = '#3e999f'$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:blue = '#4271ae'$/;"	v
s:magenta	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:magenta = '#8959a8'$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.replace.left = [ [ s:base02, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base00 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.error = [ [ s:red, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base0 ] ]$/;"	v
g:lightline#colorscheme#Tomorrow#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let g:lightline#colorscheme#Tomorrow#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:base3	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base3 = '#cccccc'$/;"	v
s:base23	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base23 = '#bbbbbb'$/;"	v
s:base2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base2 = '#aaaaaa'$/;"	v
s:base1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base1 = '#999999'$/;"	v
s:base0	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base0 = '#777777'$/;"	v
s:base00	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base00 = '#666666'$/;"	v
s:base01	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base01 = '#555555'$/;"	v
s:base02	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base02 = '#444444'$/;"	v
s:base023	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base023 = '#333333'$/;"	v
s:base03	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base03 = '#2d2d2d'$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:red = '#f2777a'$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:orange = '#f99157'$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:yellow = '#ffcc66'$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:green = '#99cc99'$/;"	v
s:cyan	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:cyan = '#009999'$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:blue = '#99cccc'$/;"	v
s:magenta	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:magenta = '#cc99cc'$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base03 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.error = [ [ s:base023, s:red ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Eighties#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Eighties#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:fg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:fg     = '#abb2bf'$/;"	v
s:blue	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:blue   = '#61afef'$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:green  = '#98c379'$/;"	v
s:purple	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:purple = '#c678dd'$/;"	v
s:red1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:red1   = '#e06c75'$/;"	v
s:red2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:red2   = '#be5046'$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:yellow = '#e5c07b'$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:bg     = '#fafafa'$/;"	v
s:gray1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray1  = '#494b53'$/;"	v
s:gray2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray2  = '#f0f0f0'$/;"	v
s:gray3	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray3  = '#d0d0d0'$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.normal.left     = [ [ s:bg, s:green, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.normal.middle   = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.insert.left     = [ [ s:bg, s:blue, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:bg	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:bg     = '#282c34'$/;"	v
s:gray1	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray1  = '#5c6370'$/;"	v
s:gray2	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray2  = '#2c323d'$/;"	v
s:gray3	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray3  = '#3e4452'$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.normal.left     = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.normal.middle   = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.insert.left     = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.right   = [ [ s:bg, s:green, 'bold' ], [ s:bg, s:green, 'bold' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.error   = [ [ s:red2,   s:bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.insert.right   = [ [ s:bg, s:blue, 'bold' ], [ s:bg, s:blue, 'bold' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.left   = [ [ s:bg, s:gray3 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.right  = copy(s:p.normal.right)$/;"	v
g:lightline#colorscheme#one#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let g:lightline#colorscheme#one#palette = lightline#colorscheme#fill(s:p)$/;"	v
s:black	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:black = [ '#232526', 233 ]$/;"	v
s:gray	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:gray = [ '#808080', 244 ]$/;"	v
s:white	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:white = [ '#f8f8f2', 234 ]$/;"	v
s:cyan	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:cyan = [ '#66d9ef', 81 ]$/;"	v
s:green	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:green = [ '#a6e22e', 118 ]$/;"	v
s:orange	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:orange = [ '#ef5939', 166 ]$/;"	v
s:pink	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:pink = [ '#f92672', 161 ]$/;"	v
s:red	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:red = [ '#ff0000', 160 ]$/;"	v
s:yellow	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:yellow = [ '#e6db74', 229 ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.left = [ [ s:black, s:cyan ], [ s:orange, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.middle = [ [ s:orange, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.right = [ [ s:pink, s:black ], [ s:black, s:pink ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.error = [ [ s:pink, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.warning = [ [ s:yellow, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:green, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.visual.left = [ [ s:black, s:yellow ], [ s:yellow, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:red, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.left =  [ [ s:pink, s:black ], [ s:white, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.middle = [ [ s:gray, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.right = [ [ s:white, s:pink ], [ s:pink, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.left = [ [ s:pink, s:black ] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.middle = [ [ s:pink, s:black] ]$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.tabsel = [ [ s:black, s:pink ] ]$/;"	v
g:lightline#colorscheme#molokai#palette	sources_non_forked/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let g:lightline#colorscheme#molokai#palette = lightline#colorscheme#flatten(s:p)$/;"	v
s:save_cpo	sources_non_forked/lightline.vim/autoload/lightline/colortable.vim	/^let s:save_cpo = &cpo$/;"	v
load	sources_non_forked/lightline.vim/autoload/lightline/colortable.vim	/^function! s:load() abort$/;"	f
s:table	sources_non_forked/lightline.vim/autoload/lightline/colortable.vim	/^let s:table = s:load()$/;"	v
lightline#colortable#name_to_rgb	sources_non_forked/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#name_to_rgb(name) abort$/;"	f
lightline#colortable#gui2cui	sources_non_forked/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#gui2cui(rgb, fallback) abort$/;"	f
s:save_cpo	sources_non_forked/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:save_cpo = &cpo$/;"	v
s:cuicolor	sources_non_forked/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:cuicolor = {$/;"	v
s:guicolor	sources_non_forked/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:guicolor = {$/;"	v
convert	sources_non_forked/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:convert(rgb) abort$/;"	f
black	sources_non_forked/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:black(x) abort$/;"	f
nr	sources_non_forked/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:nr(x) abort$/;"	f
rgb	sources_non_forked/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:rgb(r, g, b) abort$/;"	f
upconvert	sources_non_forked/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:upconvert(nr) abort$/;"	f
lightline#colorscheme#fill	sources_non_forked/lightline.vim/autoload/lightline/colorscheme.vim	/^function! lightline#colorscheme#fill(p) abort$/;"	f
lightline#colorscheme#flatten	sources_non_forked/lightline.vim/autoload/lightline/colorscheme.vim	/^function! lightline#colorscheme#flatten(p) abort$/;"	f
Add	sources_non_forked/tlib/test/tlib.vim	/^fun! Add(a,b)$/;"	f
g:foo	sources_non_forked/tlib/test/tlib.vim	/^let g:foo = 1$/;"	v
g:bar	sources_non_forked/tlib/test/tlib.vim	/^let g:bar = 2$/;"	v
b:bar	sources_non_forked/tlib/test/tlib.vim	/^let b:bar = 3$/;"	v
s:bar	sources_non_forked/tlib/test/tlib.vim	/^let s:bar = 4$/;"	v
test	sources_non_forked/tlib/test/tlib.vim	/^let test = tlib#Test#New()$/;"	v
test1	sources_non_forked/tlib/test/tlib.vim	/^let test1 = tlib#Test#New()$/;"	v
testworld	sources_non_forked/tlib/test/tlib.vim	/^let testworld = tlib#World#New()$/;"	v
testc	sources_non_forked/tlib/test/tlib.vim	/^let testc = tlib#TestChild#New()$/;"	v
TestGetArg	sources_non_forked/tlib/test/tlib.vim	/^function! TestGetArg(...) "{{{3$/;"	f
TestGetArg1	sources_non_forked/tlib/test/tlib.vim	/^function! TestGetArg1(...) "{{{3$/;"	f
TestArgs	sources_non_forked/tlib/test/tlib.vim	/^function! TestArgs(...) "{{{3$/;"	f
TestArgs1	sources_non_forked/tlib/test/tlib.vim	/^function! TestArgs1(...) "{{{3$/;"	f
TestArgs2	sources_non_forked/tlib/test/tlib.vim	/^function! TestArgs2(...) "{{{3$/;"	f
TestArgs3	sources_non_forked/tlib/test/tlib.vim	/^function! TestArgs3(...)$/;"	f
s	sources_non_forked/tlib/test/tlib.vim	/^    let s = printf('%sfoo%sbar%s', c, c, c)$/;"	v
g:loaded_tlib	sources_non_forked/tlib/plugin/02tlib.vim	/^let g:loaded_tlib = 117$/;"	v
s:save_cpo	sources_non_forked/tlib/plugin/02tlib.vim	/^let s:save_cpo = &cpo$/;"	v
TLet	sources_non_forked/tlib/plugin/02tlib.vim	/^command! -nargs=+ TLet if !exists(matchstr(<q-args>, '^[^=[:space:]]\\+')) | exec 'let '. <q-args> | endif$/;"	c
TScratch	sources_non_forked/tlib/plugin/02tlib.vim	/^command! -bar -nargs=* -bang TScratch call tlib#scratch#UseScratch({'scratch_split': empty('<bang>'), <args>})$/;"	c
TVarArg	sources_non_forked/tlib/plugin/02tlib.vim	/^command! -nargs=+ TVarArg exec tlib#arg#Let([<args>])$/;"	c
TBrowseOutput	sources_non_forked/tlib/plugin/02tlib.vim	/^command! -nargs=1 -complete=command TBrowseOutput call tlib#cmd#BrowseOutput(<q-args>)$/;"	c
TBrowseScriptnames	sources_non_forked/tlib/plugin/02tlib.vim	/^command! -nargs=0 -complete=command TBrowseScriptnames call tlib#cmd#TBrowseScriptnames()$/;"	c
Tlibtrace	sources_non_forked/tlib/plugin/02tlib.vim	/^command! -nargs=+ -bang -bar Tlibtrace :$/;"	c
Tlibtraceset	sources_non_forked/tlib/plugin/02tlib.vim	/^command! -nargs=+ -bang -bar Tlibtraceset call tlib#trace#Set(<q-args>)$/;"	c
Tlibassert	sources_non_forked/tlib/plugin/02tlib.vim	/^command! -nargs=+ -bang -bar Tlibassert :$/;"	c
tlib#list#Inject	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! tlib#list#Inject(list, value, Function) "{{{3$/;"	f
tlib#list#Compact	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! tlib#list#Compact(list) "{{{3$/;"	f
tlib#list#Flatten	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! tlib#list#Flatten(list) "{{{3$/;"	f
tlib#list#FindAll	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! tlib#list#FindAll(list, filter, ...) "{{{3$/;"	f
tlib#list#Find	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! tlib#list#Find(list, filter, ...) "{{{3$/;"	f
tlib#list#Any	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! tlib#list#Any(list, expr) "{{{3$/;"	f
tlib#list#All	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! tlib#list#All(list, expr) "{{{3$/;"	f
tlib#list#Remove	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! tlib#list#Remove(list, element) "{{{3$/;"	f
tlib#list#RemoveAll	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! tlib#list#RemoveAll(list, element) "{{{3$/;"	f
tlib#list#Zip	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! tlib#list#Zip(lists, ...) "{{{3$/;"	f
GetNthElement	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! s:GetNthElement(n, lists, default) "{{{3$/;"	f
tlib#list#Uniq	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! tlib#list#Uniq(list, ...) "{{{3$/;"	f
tlib#list#ToDictionary	sources_non_forked/tlib/autoload/tlib/list.vim	/^function! tlib#list#ToDictionary(list, default, ...) "{{{3$/;"	f
s:save_cpo	sources_non_forked/tlib/autoload/tlib/textobjects.vim	/^let s:save_cpo = &cpo$/;"	v
tlib#textobjects#StandardParagraph	sources_non_forked/tlib/autoload/tlib/textobjects.vim	/^function! tlib#textobjects#StandardParagraph() "{{{3$/;"	f
tlib#textobjects#Init	sources_non_forked/tlib/autoload/tlib/textobjects.vim	/^function! tlib#textobjects#Init() "{{{3$/;"	f
tlib#grep#Do	sources_non_forked/tlib/autoload/tlib/grep.vim	/^function! tlib#grep#Do(cmd, rx, files) "{{{3$/;"	f
tlib#grep#LocList	sources_non_forked/tlib/autoload/tlib/grep.vim	/^function! tlib#grep#LocList(rx, files) "{{{3$/;"	f
tlib#grep#QuickFixList	sources_non_forked/tlib/autoload/tlib/grep.vim	/^function! tlib#grep#QuickFixList(rx, files) "{{{3$/;"	f
tlib#grep#List	sources_non_forked/tlib/autoload/tlib/grep.vim	/^function! tlib#grep#List(rx, files) "{{{3$/;"	f
tlib#tab#BufMap	sources_non_forked/tlib/autoload/tlib/tab.vim	/^function! tlib#tab#BufMap() "{{{3$/;"	f
tlib#tab#TabWinNr	sources_non_forked/tlib/autoload/tlib/tab.vim	/^function! tlib#tab#TabWinNr(buffer) "{{{3$/;"	f
tlib#tab#Set	sources_non_forked/tlib/autoload/tlib/tab.vim	/^function! tlib#tab#Set(tabnr) "{{{3$/;"	f
tlib#scratch#UseScratch	sources_non_forked/tlib/autoload/tlib/scratch.vim	/^function! tlib#scratch#UseScratch(...) "{{{3$/;"	f
tlib#scratch#CloseScratch	sources_non_forked/tlib/autoload/tlib/scratch.vim	/^function! tlib#scratch#CloseScratch(keyargs, ...) "{{{3$/;"	f
tlib#loclist#Browse	sources_non_forked/tlib/autoload/tlib/loclist.vim	/^function! tlib#loclist#Browse(...) abort "{{{3$/;"	f
s:statusline	sources_non_forked/tlib/autoload/tlib/progressbar.vim	/^let s:statusline = []$/;"	v
s:laststatus	sources_non_forked/tlib/autoload/tlib/progressbar.vim	/^let s:laststatus = []$/;"	v
s:max	sources_non_forked/tlib/autoload/tlib/progressbar.vim	/^let s:max = []$/;"	v
s:format	sources_non_forked/tlib/autoload/tlib/progressbar.vim	/^let s:format = []$/;"	v
s:width	sources_non_forked/tlib/autoload/tlib/progressbar.vim	/^let s:width = []$/;"	v
s:value	sources_non_forked/tlib/autoload/tlib/progressbar.vim	/^let s:value = []$/;"	v
s:timestamp	sources_non_forked/tlib/autoload/tlib/progressbar.vim	/^let s:timestamp = -1$/;"	v
tlib#progressbar#Init	sources_non_forked/tlib/autoload/tlib/progressbar.vim	/^function! tlib#progressbar#Init(max, ...) "{{{3$/;"	f
tlib#progressbar#Display	sources_non_forked/tlib/autoload/tlib/progressbar.vim	/^function! tlib#progressbar#Display(value, ...) "{{{3$/;"	f
tlib#progressbar#Restore	sources_non_forked/tlib/autoload/tlib/progressbar.vim	/^function! tlib#progressbar#Restore() "{{{3$/;"	f
tlib#var#Let	sources_non_forked/tlib/autoload/tlib/var.vim	/^function! tlib#var#Let(name, val) "{{{3$/;"	f
tlib#var#EGet	sources_non_forked/tlib/autoload/tlib/var.vim	/^function! tlib#var#EGet(var, namespace, ...) "{{{3$/;"	f
tlib#var#Get	sources_non_forked/tlib/autoload/tlib/var.vim	/^function! tlib#var#Get(var, namespace, ...) "{{{3$/;"	f
tlib#var#List	sources_non_forked/tlib/autoload/tlib/var.vim	/^function! tlib#var#List(rx, ...) "{{{3$/;"	f
tlib#tag#Retrieve	sources_non_forked/tlib/autoload/tlib/tag.vim	/^function! tlib#tag#Retrieve(rx, ...) "{{{3$/;"	f
tlib#tag#Collect	sources_non_forked/tlib/autoload/tlib/tag.vim	/^function! tlib#tag#Collect(constraints, ...) "{{{3$/;"	f
tlib#tag#Format	sources_non_forked/tlib/autoload/tlib/tag.vim	/^function! tlib#tag#Format(tag) "{{{3$/;"	f
tlib#win#Set	sources_non_forked/tlib/autoload/tlib/win.vim	/^function! tlib#win#Set(winnr) "{{{3$/;"	f
tlib#win#GetLayout	sources_non_forked/tlib/autoload/tlib/win.vim	/^function! tlib#win#GetLayout(...) "{{{3$/;"	f
tlib#win#SetLayout	sources_non_forked/tlib/autoload/tlib/win.vim	/^function! tlib#win#SetLayout(layout) "{{{3$/;"	f
tlib#win#List	sources_non_forked/tlib/autoload/tlib/win.vim	/^function! tlib#win#List() "{{{3$/;"	f
tlib#win#Width	sources_non_forked/tlib/autoload/tlib/win.vim	/^function! tlib#win#Width(wnr) "{{{3$/;"	f
tlib#win#WinDo	sources_non_forked/tlib/autoload/tlib/win.vim	/^function! tlib#win#WinDo(ex) "{{{3$/;"	f
g:tlib#file#drop	sources_non_forked/tlib/autoload/tlib/file.vim	/^    let g:tlib#file#drop = has('gui')   "{{{2$/;"	v
g:tlib#file#use_tabs	sources_non_forked/tlib/autoload/tlib/file.vim	/^    let g:tlib#file#use_tabs = 0   "{{{2$/;"	v
g:tlib#file#edit_cmds	sources_non_forked/tlib/autoload/tlib/file.vim	/^    let g:tlib#file#edit_cmds = g:tlib#file#use_tabs ? {'buffer': 'tab split | buffer', 'edit': 'tabedit'} : {}  "{{{2$/;"	v
g:tlib#file#absolute_filename_rx	sources_non_forked/tlib/autoload/tlib/file.vim	/^    let g:tlib#file#absolute_filename_rx = '^\\~\\?[\\\/]'   "{{{2$/;"	v
tlib#file#Split	sources_non_forked/tlib/autoload/tlib/file.vim	/^function! tlib#file#Split(filename) "{{{3$/;"	f
tlib#file#Join	sources_non_forked/tlib/autoload/tlib/file.vim	/^function! tlib#file#Join(filename_parts, ...) "{{{3$/;"	f
tlib#file#Relative	sources_non_forked/tlib/autoload/tlib/file.vim	/^function! tlib#file#Relative(filename, basedir) "{{{3$/;"	f
tlib#file#Absolute	sources_non_forked/tlib/autoload/tlib/file.vim	/^function! tlib#file#Absolute(filename, ...) "{{{3$/;"	f
tlib#file#Canonic	sources_non_forked/tlib/autoload/tlib/file.vim	/^function! tlib#file#Canonic(filename, ...) "{{{3$/;"	f
SetScrollBind	sources_non_forked/tlib/autoload/tlib/file.vim	/^function! s:SetScrollBind(world) "{{{3$/;"	f
tlib#file#With	sources_non_forked/tlib/autoload/tlib/file.vim	/^function! tlib#file#With(fcmd, bcmd, files, ...) "{{{3$/;"	f
tlib#file#Edit	sources_non_forked/tlib/autoload/tlib/file.vim	/^function! tlib#file#Edit(fileid) "{{{3$/;"	f
tlib#file#Glob	sources_non_forked/tlib/autoload/tlib/file.vim	/^    function! tlib#file#Glob(pattern) abort "{{{3$/;"	f
tlib#file#Globpath	sources_non_forked/tlib/autoload/tlib/file.vim	/^    function! tlib#file#Globpath(path, pattern) abort "{{{3$/;"	f
tlib#file#Glob	sources_non_forked/tlib/autoload/tlib/file.vim	/^    function! tlib#file#Glob(pattern) abort "{{{3$/;"	f
tlib#file#Globpath	sources_non_forked/tlib/autoload/tlib/file.vim	/^    function! tlib#file#Globpath(path, pattern) abort "{{{3$/;"	f
s:cache	sources_non_forked/tlib/autoload/tlib/cache.vim	/^let s:cache = {}$/;"	v
tlib#cache#Dir	sources_non_forked/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#Dir(...) "{{{3$/;"	f
tlib#cache#Filename	sources_non_forked/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#Filename(type, ...) "{{{3$/;"	f
s:timestamps	sources_non_forked/tlib/autoload/tlib/cache.vim	/^let s:timestamps = {}$/;"	v
SetTimestamp	sources_non_forked/tlib/autoload/tlib/cache.vim	/^function! s:SetTimestamp(cfile, type) "{{{3$/;"	f
tlib#cache#Save	sources_non_forked/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#Save(cfile, dictionary, ...) "{{{3$/;"	f
tlib#cache#MTime	sources_non_forked/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#MTime(cfile) "{{{3$/;"	f
tlib#cache#Get	sources_non_forked/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#Get(cfile, ...) "{{{3$/;"	f
tlib#cache#Value	sources_non_forked/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#Value(cfile, generator, ftime, ...) "{{{3$/;"	f
tlib#cache#MaybePurge	sources_non_forked/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#MaybePurge() "{{{3$/;"	f
tlib#cache#Purge	sources_non_forked/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#Purge() "{{{3$/;"	f
PurgeTimestamp	sources_non_forked/tlib/autoload/tlib/cache.vim	/^function! s:PurgeTimestamp(dir) "{{{3$/;"	f
tlib#cache#ListFilesInCache	sources_non_forked/tlib/autoload/tlib/cache.vim	/^function! tlib#cache#ListFilesInCache(...) "{{{3$/;"	f
ShouldPurge	sources_non_forked/tlib/autoload/tlib/cache.vim	/^function! s:ShouldPurge(partial_filename) "{{{3$/;"	f
s:save_cpo	sources_non_forked/tlib/autoload/tlib/map.vim	/^let s:save_cpo = &cpo$/;"	v
tlib#map#PumAccept	sources_non_forked/tlib/autoload/tlib/map.vim	/^function! tlib#map#PumAccept(key) "{{{3$/;"	f
tlib#comments#Comments	sources_non_forked/tlib/autoload/tlib/comments.vim	/^function! tlib#comments#Comments(...)$/;"	f
s:dir_stack	sources_non_forked/tlib/autoload/tlib/dir.vim	/^let s:dir_stack = []$/;"	v
tlib#dir#CanonicName	sources_non_forked/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#CanonicName(dirname) "{{{3$/;"	f
tlib#dir#NativeName	sources_non_forked/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#NativeName(dirname) "{{{3$/;"	f
tlib#dir#PlainName	sources_non_forked/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#PlainName(dirname) "{{{3$/;"	f
tlib#dir#Ensure	sources_non_forked/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#Ensure(dir) "{{{3$/;"	f
tlib#dir#MyRuntime	sources_non_forked/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#MyRuntime() "{{{3$/;"	f
tlib#dir#CD	sources_non_forked/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#CD(dir, ...) "{{{3$/;"	f
tlib#dir#Push	sources_non_forked/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#Push(dir, ...) "{{{3$/;"	f
tlib#dir#Pop	sources_non_forked/tlib/autoload/tlib/dir.vim	/^function! tlib#dir#Pop() "{{{3$/;"	f
s:prototype	sources_non_forked/tlib/autoload/tlib/TestChild.vim	/^let s:prototype = tlib#Test#New({'_class': ['TestChild']}) "{{{2$/;"	v
tlib#TestChild#New	sources_non_forked/tlib/autoload/tlib/TestChild.vim	/^function! tlib#TestChild#New(...) "{{{3$/;"	f
prototype.Dummy	sources_non_forked/tlib/autoload/tlib/TestChild.vim	/^function! s:prototype.Dummy() dict "{{{3$/;"	f
tlib#hook#Run	sources_non_forked/tlib/autoload/tlib/hook.vim	/^function! tlib#hook#Run(hook, ...) "{{{3$/;"	f
TLib	sources_non_forked/tlib/autoload/tlib/autocmdgroup.vim	/^augroup TLib$/;"	a
tlib#autocmdgroup#Init	sources_non_forked/tlib/autoload/tlib/autocmdgroup.vim	/^function! tlib#autocmdgroup#Init() "{{{3$/;"	f
tlib#eval#FormatValue	sources_non_forked/tlib/autoload/tlib/eval.vim	/^function! tlib#eval#FormatValue(value, ...) "{{{3$/;"	f
tlib#eval#Extend	sources_non_forked/tlib/autoload/tlib/eval.vim	/^function! tlib#eval#Extend(a, b, ...) abort "{{{3$/;"	f
tlib#type#IsNumber	sources_non_forked/tlib/autoload/tlib/type.vim	/^function! tlib#type#IsNumber(expr)$/;"	f
tlib#type#IsString	sources_non_forked/tlib/autoload/tlib/type.vim	/^function! tlib#type#IsString(expr)$/;"	f
tlib#type#IsFuncref	sources_non_forked/tlib/autoload/tlib/type.vim	/^function! tlib#type#IsFuncref(expr)$/;"	f
tlib#type#IsList	sources_non_forked/tlib/autoload/tlib/type.vim	/^function! tlib#type#IsList(expr)$/;"	f
tlib#type#IsDictionary	sources_non_forked/tlib/autoload/tlib/type.vim	/^function! tlib#type#IsDictionary(expr)$/;"	f
tlib#type#Is	sources_non_forked/tlib/autoload/tlib/type.vim	/^function! tlib#type#Is(val, type) abort "{{{3$/;"	f
tlib#type#Are	sources_non_forked/tlib/autoload/tlib/type.vim	/^function! tlib#type#Are(vals, type) abort "{{{3$/;"	f
tlib#type#Has	sources_non_forked/tlib/autoload/tlib/type.vim	/^function! tlib#type#Has(val, lst) abort "{{{3$/;"	f
tlib#type#Have	sources_non_forked/tlib/autoload/tlib/type.vim	/^function! tlib#type#Have(vals, lst) abort "{{{3$/;"	f
tlib#dictionary#Rev	sources_non_forked/tlib/autoload/tlib/dictionary.vim	/^function! tlib#dictionary#Rev(dict) abort "{{{3$/;"	f
tlib#number#ConvertBase	sources_non_forked/tlib/autoload/tlib/number.vim	/^function! tlib#number#ConvertBase(num, base, ...) "{{{3$/;"	f
tlib#persistent#Dir	sources_non_forked/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#Dir() "{{{3$/;"	f
tlib#persistent#Filename	sources_non_forked/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#Filename(type, ...) "{{{3$/;"	f
tlib#persistent#Get	sources_non_forked/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#Get(...) "{{{3$/;"	f
tlib#persistent#MTime	sources_non_forked/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#MTime(cfile) "{{{3$/;"	f
tlib#persistent#Value	sources_non_forked/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#Value(...) "{{{3$/;"	f
tlib#persistent#Save	sources_non_forked/tlib/autoload/tlib/persistent.vim	/^function! tlib#persistent#Save(cfile, dictionary) "{{{3$/;"	f
s:prototype	sources_non_forked/tlib/autoload/tlib/Filter_glob.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_glob'], 'name': 'glob'}) "{{{2$/;"	v
s:prototype	sources_non_forked/tlib/autoload/tlib/Filter_glob.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
tlib#Filter_glob#New	sources_non_forked/tlib/autoload/tlib/Filter_glob.vim	/^function! tlib#Filter_glob#New(...) "{{{3$/;"	f
s:Help	sources_non_forked/tlib/autoload/tlib/Filter_glob.vim	/^let s:Help = s:prototype.Help$/;"	v
prototype.Help	sources_non_forked/tlib/autoload/tlib/Filter_glob.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
prototype.SetFrontFilter	sources_non_forked/tlib/autoload/tlib/Filter_glob.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.PushFrontFilter	sources_non_forked/tlib/autoload/tlib/Filter_glob.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.CleanFilter	sources_non_forked/tlib/autoload/tlib/Filter_glob.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
tlib#agent#Exit	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Exit(world, selected) "{{{3$/;"	f
tlib#agent#CopyItems	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#CopyItems(world, selected) "{{{3$/;"	f
tlib#agent#PageUp	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#PageUp(world, selected) "{{{3$/;"	f
tlib#agent#PageDown	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#PageDown(world, selected) "{{{3$/;"	f
tlib#agent#Home	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Home(world, selected) "{{{3$/;"	f
tlib#agent#End	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#End(world, selected) "{{{3$/;"	f
tlib#agent#Up	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Up(world, selected, ...) "{{{3$/;"	f
tlib#agent#Down	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Down(world, selected, ...) "{{{3$/;"	f
tlib#agent#UpN	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#UpN(world, selected) "{{{3$/;"	f
tlib#agent#DownN	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#DownN(world, selected) "{{{3$/;"	f
tlib#agent#ShiftLeft	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ShiftLeft(world, selected) "{{{3$/;"	f
tlib#agent#ShiftRight	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ShiftRight(world, selected) "{{{3$/;"	f
tlib#agent#Reset	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Reset(world, selected) "{{{3$/;"	f
tlib#agent#ToggleRestrictView	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ToggleRestrictView(world, selected) "{{{3$/;"	f
tlib#agent#RestrictView	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#RestrictView(world, selected) "{{{3$/;"	f
tlib#agent#UnrestrictView	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#UnrestrictView(world, selected) "{{{3$/;"	f
tlib#agent#Input	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Input(world, selected) "{{{3$/;"	f
tlib#agent#SuspendToParentWindow	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#SuspendToParentWindow(world, selected) "{{{3$/;"	f
tlib#agent#Suspend	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Suspend(world, selected) "{{{3$/;"	f
tlib#agent#Help	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Help(world, selected) "{{{3$/;"	f
tlib#agent#OR	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#OR(world, selected) "{{{3$/;"	f
tlib#agent#AND	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#AND(world, selected) "{{{3$/;"	f
tlib#agent#ReduceFilter	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ReduceFilter(world, selected) "{{{3$/;"	f
tlib#agent#PopFilter	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#PopFilter(world, selected) "{{{3$/;"	f
tlib#agent#Debug	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Debug(world, selected) "{{{3$/;"	f
tlib#agent#Select	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Select(world, selected) "{{{3$/;"	f
tlib#agent#SelectUp	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#SelectUp(world, selected) "{{{3$/;"	f
tlib#agent#SelectDown	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#SelectDown(world, selected) "{{{3$/;"	f
tlib#agent#SelectAll	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#SelectAll(world, selected) "{{{3$/;"	f
tlib#agent#ToggleStickyList	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ToggleStickyList(world, selected) "{{{3$/;"	f
tlib#agent#EditItem	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditItem(world, selected) "{{{3$/;"	f
tlib#agent#NewItem	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#NewItem(world, selected) "{{{3$/;"	f
tlib#agent#DeleteItems	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#DeleteItems(world, selected) "{{{3$/;"	f
tlib#agent#Cut	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Cut(world, selected) "{{{3$/;"	f
tlib#agent#Copy	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Copy(world, selected) "{{{3$/;"	f
tlib#agent#Paste	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Paste(world, selected) "{{{3$/;"	f
tlib#agent#EditReturnValue	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditReturnValue(world, rv) "{{{3$/;"	f
tlib#agent#ViewFile	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ViewFile(world, selected) "{{{3$/;"	f
tlib#agent#EditFile	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditFile(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInSplit	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInSplit(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInVSplit	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInVSplit(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInTab	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInTab(world, selected) "{{{3$/;"	f
tlib#agent#ToggleScrollbind	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ToggleScrollbind(world, selected) "{{{3$/;"	f
tlib#agent#ShowInfo	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ShowInfo(world, selected)$/;"	f
tlib#agent#PreviewLine	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#PreviewLine(world, selected) "{{{3$/;"	f
tlib#agent#GotoLine	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#GotoLine(world, selected) "{{{3$/;"	f
tlib#agent#DoAtLine	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#DoAtLine(world, selected) "{{{3$/;"	f
tlib#agent#Wildcard	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Wildcard(world, selected) "{{{3$/;"	f
tlib#agent#Null	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Null(world, selected) "{{{3$/;"	f
tlib#agent#ExecAgentByName	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#ExecAgentByName(world, selected) "{{{3$/;"	f
tlib#agent#CompleteAgentNames	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#CompleteAgentNames(ArgLead, CmdLine, CursorPos)$/;"	f
tlib#agent#Complete	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! tlib#agent#Complete(world, selected) abort "{{{3$/;"	f
SortCompletions	sources_non_forked/tlib/autoload/tlib/agent.vim	/^function! s:SortCompletions(a, b) abort "{{{3$/;"	f
tlib#time#MSecs	sources_non_forked/tlib/autoload/tlib/time.vim	/^function! tlib#time#MSecs() "{{{3$/;"	f
tlib#time#Now	sources_non_forked/tlib/autoload/tlib/time.vim	/^function! tlib#time#Now() "{{{3$/;"	f
tlib#time#FormatNow	sources_non_forked/tlib/autoload/tlib/time.vim	/^function! tlib#time#FormatNow() "{{{3$/;"	f
tlib#time#Diff	sources_non_forked/tlib/autoload/tlib/time.vim	/^function! tlib#time#Diff(a, b, ...) "{{{3$/;"	f
tlib#time#DiffMSecs	sources_non_forked/tlib/autoload/tlib/time.vim	/^function! tlib#time#DiffMSecs(a, b, ...) "{{{3$/;"	f
s:save_cpo	sources_non_forked/tlib/autoload/tlib/paragraph.vim	/^let s:save_cpo = &cpo$/;"	v
tlib#paragraph#GetMetric	sources_non_forked/tlib/autoload/tlib/paragraph.vim	/^function! tlib#paragraph#GetMetric() "{{{3$/;"	f
tlib#paragraph#Move	sources_non_forked/tlib/autoload/tlib/paragraph.vim	/^function! tlib#paragraph#Move(direction, count)$/;"	f
s:restoreframecmd	sources_non_forked/tlib/autoload/tlib/vim.vim	/^let s:restoreframecmd = ''$/;"	v
s:fullscreen	sources_non_forked/tlib/autoload/tlib/vim.vim	/^let s:fullscreen = 0$/;"	v
g:tlib#vim#simalt_maximize	sources_non_forked/tlib/autoload/tlib/vim.vim	/^        let g:tlib#vim#simalt_maximize = 'x'   "{{{2$/;"	v
g:tlib#vim#simalt_restore	sources_non_forked/tlib/autoload/tlib/vim.vim	/^        let g:tlib#vim#simalt_restore = 'r'   "{{{2$/;"	v
g:tlib#vim#use_vimtweak	sources_non_forked/tlib/autoload/tlib/vim.vim	/^        let g:tlib#vim#use_vimtweak = 0   "{{{2$/;"	v
tlib#vim#Maximize	sources_non_forked/tlib/autoload/tlib/vim.vim	/^    fun! tlib#vim#Maximize(fullscreen) "{{{3$/;"	f
tlib#vim#RestoreWindow	sources_non_forked/tlib/autoload/tlib/vim.vim	/^    function! tlib#vim#RestoreWindow() "{{{3$/;"	f
g:tlib#vim#use_wmctrl	sources_non_forked/tlib/autoload/tlib/vim.vim	/^        let g:tlib#vim#use_wmctrl = executable('wmctrl')  "{{{2$/;"	v
tlib#vim#Maximize	sources_non_forked/tlib/autoload/tlib/vim.vim	/^    fun! tlib#vim#Maximize(fullscreen) "{{{3$/;"	f
tlib#vim#RestoreWindow	sources_non_forked/tlib/autoload/tlib/vim.vim	/^    function! tlib#vim#RestoreWindow() "{{{3$/;"	f
SaveFrameParams	sources_non_forked/tlib/autoload/tlib/vim.vim	/^function! s:SaveFrameParams() "{{{3$/;"	f
RestoreFrameParams	sources_non_forked/tlib/autoload/tlib/vim.vim	/^function! s:RestoreFrameParams() "{{{3$/;"	f
tlib#vim#CopyFunction	sources_non_forked/tlib/autoload/tlib/vim.vim	/^function! tlib#vim#CopyFunction(old, new, ...) "{{{3$/;"	f
g:tlib#sys#special_protocols	sources_non_forked/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#special_protocols = ['https\\?', 'nntp', 'mailto']   "{{{2$/;"	v
g:tlib#sys#special_suffixes	sources_non_forked/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#special_suffixes = ['xlsx\\?', 'docx\\?', 'pptx\\?', 'accdb', 'mdb', 'sqlite', 'pdf', 'jpg', 'png', 'gif']    "{{{2$/;"	v
g:tlib#sys#system_rx	sources_non_forked/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#system_rx = printf('\\V\\%(\\^\\%(%s\\):\\|.\\%(%s\\)\\)', join(g:tlib#sys#special_protocols, '\\|'), join(g:tlib#sys#special_suffixes, '\\|'))   "{{{2$/;"	v
g:tlib#sys#system_browser	sources_non_forked/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !'. g:netrw_browsex_viewer shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	sources_non_forked/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent ! RunDll32.EXE URL.DLL,FileProtocolHandler' shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	sources_non_forked/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !open' shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	sources_non_forked/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !xdg-open' shellescape('%s') '&'"$/;"	v
g:tlib#sys#system_browser	sources_non_forked/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !gnome-open' shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	sources_non_forked/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !kfmclient exec' shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	sources_non_forked/tlib/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = ''$/;"	v
g:tlib#sys#windows	sources_non_forked/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#windows = &shell !~ 'sh' && (has('win16') || has('win32') || has('win64'))   "{{{2$/;"	v
g:tlib#sys#null	sources_non_forked/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#null = g:tlib#sys#windows ? 'NUL' : (filereadable('\/dev\/null') ? '\/dev\/null' : '')    "{{{2$/;"	v
s:cygwin	sources_non_forked/tlib/autoload/tlib/sys.vim	/^let s:cygwin = {}$/;"	v
tlib#sys#IsCygwinBin	sources_non_forked/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#IsCygwinBin(cmd) "{{{3$/;"	f
s:executables	sources_non_forked/tlib/autoload/tlib/sys.vim	/^let s:executables = {}$/;"	v
tlib#sys#IsExecutable	sources_non_forked/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#IsExecutable(cmd, ...) "{{{3$/;"	f
g:tlib#sys#check_cygpath	sources_non_forked/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#check_cygpath = g:tlib#sys#windows && tlib#sys#IsExecutable('cygpath', 1)   "{{{2$/;"	v
g:tlib#sys#cygwin_path_rx	sources_non_forked/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#cygwin_path_rx = '\/cygwin\/'   "{{{2$/;"	v
g:tlib#sys#cygwin_expr	sources_non_forked/tlib/autoload/tlib/sys.vim	/^    let g:tlib#sys#cygwin_expr = '"bash -c ''". escape(%s, "''\\\\") ."''"'   "{{{2$/;"	v
tlib#sys#GetCmd	sources_non_forked/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#GetCmd(cmd) "{{{3$/;"	f
tlib#sys#MaybeUseCygpath	sources_non_forked/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#MaybeUseCygpath(cmd) "{{{3$/;"	f
tlib#sys#ConvertPath	sources_non_forked/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#ConvertPath(converter, filename) "{{{3$/;"	f
s:native_filenames	sources_non_forked/tlib/autoload/tlib/sys.vim	/^let s:native_filenames = {}$/;"	v
tlib#sys#FileArgs	sources_non_forked/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#FileArgs(cmd, files) "{{{3$/;"	f
tlib#sys#IsSpecial	sources_non_forked/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#IsSpecial(filename) abort "{{{3$/;"	f
tlib#sys#Open	sources_non_forked/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#Open(filename) abort "{{{3$/;"	f
tlib#sys#SystemInDir	sources_non_forked/tlib/autoload/tlib/sys.vim	/^function! tlib#sys#SystemInDir(dir, ...) abort "{{{3$/;"	f
g:tlib#hash#use_crc32	sources_non_forked/tlib/autoload/tlib/hash.vim	/^    let g:tlib#hash#use_crc32 = ''   "{{{2$/;"	v
g:tlib#hash#use_adler32	sources_non_forked/tlib/autoload/tlib/hash.vim	/^    let g:tlib#hash#use_adler32 = ''   "{{{2$/;"	v
tlib#hash#CRC32B	sources_non_forked/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#CRC32B(chars) "{{{3$/;"	f
tlib#hash#CRC32B_ruby	sources_non_forked/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#CRC32B_ruby(chars) "{{{3$/;"	f
tlib#hash#CRC32B_vim	sources_non_forked/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#CRC32B_vim(chars) "{{{3$/;"	f
tlib#hash#CreateCrcTable	sources_non_forked/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#CreateCrcTable() "{{{3$/;"	f
tlib#hash#Adler32	sources_non_forked/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#Adler32(chars) "{{{3$/;"	f
tlib#hash#Adler32_vim	sources_non_forked/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#Adler32_vim(chars) "{{{3$/;"	f
tlib#hash#Adler32_tlib	sources_non_forked/tlib/autoload/tlib/hash.vim	/^function! tlib#hash#Adler32_tlib(chars) "{{{3$/;"	f
tlib#syntax#Collect	sources_non_forked/tlib/autoload/tlib/syntax.vim	/^function! tlib#syntax#Collect() "{{{3$/;"	f
tlib#syntax#Names	sources_non_forked/tlib/autoload/tlib/syntax.vim	/^function! tlib#syntax#Names(...) "{{{3$/;"	f
tlib#bitwise#Num2Bits	sources_non_forked/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#Num2Bits(num) "{{{3$/;"	f
tlib#bitwise#Bits2Num	sources_non_forked/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#Bits2Num(bits, ...) "{{{3$/;"	f
tlib#bitwise#AND	sources_non_forked/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#AND(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#OR	sources_non_forked/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#OR(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#XOR	sources_non_forked/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#XOR(num1, num2, ...) "{{{3$/;"	f
BitwiseComparison	sources_non_forked/tlib/autoload/tlib/bitwise.vim	/^function! s:BitwiseComparison(num1, num2, rtype, expr) "{{{3$/;"	f
tlib#bitwise#ShiftRight	sources_non_forked/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#ShiftRight(bits, n) "{{{3$/;"	f
tlib#bitwise#ShiftLeft	sources_non_forked/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#ShiftLeft(bits, n) "{{{3$/;"	f
tlib#bitwise#Add	sources_non_forked/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#Add(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#Sub	sources_non_forked/tlib/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#Sub(num1, num2, ...) "{{{3$/;"	f
s:prototype	sources_non_forked/tlib/autoload/tlib/World.vim	/^let s:prototype = tlib#Object#New({$/;"	v
tlib#World#New	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! tlib#World#New(...)$/;"	f
prototype.Set_display_format	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.Set_display_format(value) dict "{{{3$/;"	f
prototype.DisplayFormat	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.DisplayFormat(list) dict "{{{3$/;"	f
prototype.Set_highlight_filename	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.Set_highlight_filename() dict "{{{3$/;"	f
prototype.Highlight_filename	sources_non_forked/tlib/autoload/tlib/World.vim	/^    function! s:prototype.Highlight_filename() dict "{{{3$/;"	f
prototype.FormatFilename	sources_non_forked/tlib/autoload/tlib/World.vim	/^    function! s:prototype.FormatFilename(file) dict "{{{3$/;"	f
prototype.Highlight_filename	sources_non_forked/tlib/autoload/tlib/World.vim	/^    function! s:prototype.Highlight_filename() dict "{{{3$/;"	f
prototype.UseFilenameIndicators	sources_non_forked/tlib/autoload/tlib/World.vim	/^    function! s:prototype.UseFilenameIndicators() dict "{{{3$/;"	f
prototype.InitFormatName	sources_non_forked/tlib/autoload/tlib/World.vim	/^    function! s:prototype.InitFormatName() dict "{{{3 $/;"	f
prototype.FormatFilename	sources_non_forked/tlib/autoload/tlib/World.vim	/^    function! s:prototype.FormatFilename(file) dict "{{{3$/;"	f
prototype.GetSelectedItems	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetSelectedItems(current) dict "{{{3$/;"	f
InsertSelectedItems	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:InsertSelectedItems(rv, current) "{{{3$/;"	f
prototype.SelectItemsByNames	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.SelectItemsByNames(mode, items) dict "{{{3$/;"	f
prototype.SelectItem	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.SelectItem(mode, index) dict "{{{3$/;"	f
prototype.FormatBaseFromData	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.FormatBaseFromData() abort dict "{{{3$/;"	f
prototype.FormatArgs	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.FormatArgs(format_string, arg) dict "{{{3$/;"	f
prototype.GetRx	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetRx(filter) dict "{{{3$/;"	f
prototype.GetRx0	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetRx0(...) dict "{{{3$/;"	f
prototype.FormatName	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.FormatName(cache, format, value) dict "{{{3$/;"	f
prototype.GetItem	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetItem(idx) dict "{{{3$/;"	f
prototype.GetListIdx	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetListIdx(baseidx) dict "{{{3$/;"	f
prototype.GetBaseIdx	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetBaseIdx(idx) dict "{{{3$/;"	f
prototype.GetBaseIdx0	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetBaseIdx0(idx) dict "{{{3$/;"	f
prototype.GetBaseItem	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetBaseItem(idx) dict "{{{3$/;"	f
prototype.SetBaseItem	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetBaseItem(idx, item) dict "{{{3$/;"	f
prototype.GetLineIdx	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetLineIdx(lnum) dict "{{{3$/;"	f
prototype.SetPrefIdx	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetPrefIdx() dict "{{{3$/;"	f
prototype.CurrentItem	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.CurrentItem() dict "{{{3$/;"	f
prototype.FilterRxPrefix	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.FilterRxPrefix() dict "{{{3$/;"	f
prototype.SetFilter	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetFilter() dict "{{{3$/;"	f
prototype.IsValidFilter	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.IsValidFilter() dict "{{{3$/;"	f
prototype.SetMatchMode	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetMatchMode(match_mode) dict "{{{3$/;"	f
prototype.MatchBaseIdx	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.MatchBaseIdx(idx) dict "{{{3$/;"	f
prototype.BuildTableList	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.BuildTableList() dict "{{{3$/;"	f
prototype.ReduceFilter	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.ReduceFilter() dict "{{{3$/;"	f
prototype.SetInitialFilter	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetInitialFilter(filter) dict "{{{3$/;"	f
prototype.PopFilter	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.PopFilter() dict "{{{3$/;"	f
prototype.FilterIsEmpty	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.FilterIsEmpty() dict "{{{3$/;"	f
prototype.DisplayFilter	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.DisplayFilter() dict "{{{3$/;"	f
prototype.SetFrontFilter	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetFrontFilter(pattern) dict "{{{3$/;"	f
prototype.PushFrontFilter	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.PushFrontFilter(char) dict "{{{3$/;"	f
prototype.CleanFilter	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.UseScratch	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.UseScratch() dict "{{{3$/;"	f
prototype.CloseScratch	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.CloseScratch(...) dict "{{{3$/;"	f
prototype.Initialize	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.Initialize() dict "{{{3$/;"	f
prototype.Leave	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.Leave() dict "{{{3$/;"	f
prototype.UseInputListScratch	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.UseInputListScratch() dict "{{{3$/;"	f
prototype.Reset	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.Reset(...) dict "{{{3$/;"	f
prototype.ResetSelected	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.ResetSelected() dict "{{{3$/;"	f
prototype.Retrieve	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.Retrieve(anyway) dict "{{{3$/;"	f
FormatHelp	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:FormatHelp(help) "{{{3$/;"	f
FormatHelpItem	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:FormatHelpItem(item, fmt) "{{{3$/;"	f
prototype.InitHelp	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.InitHelp() dict "{{{3$/;"	f
prototype.PushHelp	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.PushHelp(...) dict "{{{3$/;"	f
prototype.DisplayHelp	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.DisplayHelp() dict "{{{3$/;"	f
prototype.PrintLines	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.PrintLines() dict "{{{3$/;"	f
prototype.Resize	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.Resize(hsize, vsize) dict "{{{3$/;"	f
prototype.GetResize	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.GetResize(size) dict "{{{3$/;"	f
prototype.DisplayList	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.DisplayList(...) dict "{{{3$/;"	f
prototype.SetStatusline	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetStatusline(query) dict "{{{3$/;"	f
prototype.Query	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.Query() dict "{{{3$/;"	f
prototype.ScrollToOffset	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.ScrollToOffset() dict "{{{3$/;"	f
prototype.SetOffset	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetOffset() dict "{{{3$/;"	f
prototype.ClearAllMarks	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.ClearAllMarks() dict "{{{3$/;"	f
prototype.MarkCurrent	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.MarkCurrent(y) dict "{{{3$/;"	f
prototype.DisplayListMark	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.DisplayListMark(x, y, mark) dict "{{{3$/;"	f
prototype.SwitchWindow	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.SwitchWindow(where) dict "{{{3$/;"	f
prototype.FollowCursor	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.FollowCursor() dict "{{{3$/;"	f
prototype.SetOrigin	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.SetOrigin(...) dict "{{{3$/;"	f
prototype.RestoreOrigin	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.RestoreOrigin(...) dict "{{{3$/;"	f
prototype.Suspend	sources_non_forked/tlib/autoload/tlib/World.vim	/^function! s:prototype.Suspend() dict "{{{3$/;"	f
tlib#fixes#Winpos	sources_non_forked/tlib/autoload/tlib/fixes.vim	/^function! tlib#fixes#Winpos() "{{{3$/;"	f
s:prototype	sources_non_forked/tlib/autoload/tlib/Test.vim	/^let s:prototype = tlib#Object#New({'_class': ['Test']}) "{{{2$/;"	v
tlib#Test#New	sources_non_forked/tlib/autoload/tlib/Test.vim	/^function! tlib#Test#New(...) "{{{3$/;"	f
prototype.Dummy	sources_non_forked/tlib/autoload/tlib/Test.vim	/^function! s:prototype.Dummy() dict "{{{3$/;"	f
tlib#arg#Get	sources_non_forked/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#Get(n, var, ...) "{{{3$/;"	f
tlib#arg#Let	sources_non_forked/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#Let(list, ...) "{{{3$/;"	f
tlib#arg#StringAsKeyArgs	sources_non_forked/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#StringAsKeyArgs(string, ...) "{{{1$/;"	f
tlib#arg#StringAsKeyArgsEqual	sources_non_forked/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#StringAsKeyArgsEqual(string) "{{{1$/;"	f
tlib#arg#GetOpts	sources_non_forked/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#GetOpts(args, ...) abort "{{{3$/;"	f
GetValueType	sources_non_forked/tlib/autoload/tlib/arg.vim	/^function! s:GetValueType(def) abort "{{{3$/;"	f
SetOpt	sources_non_forked/tlib/autoload/tlib/arg.vim	/^function! s:SetOpt(def, opts, idx, opt) abort "{{{3$/;"	f
SetFlag	sources_non_forked/tlib/autoload/tlib/arg.vim	/^function! s:SetFlag(def, opts, idx, flag, rest, flagdefs) abort "{{{3$/;"	f
Validate	sources_non_forked/tlib/autoload/tlib/arg.vim	/^function! s:Validate(def, name, value) abort "{{{3$/;"	f
tlib#arg#CComplete	sources_non_forked/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#CComplete(def, ArgLead) abort "{{{3$/;"	f
tlib#arg#Ex	sources_non_forked/tlib/autoload/tlib/arg.vim	/^function! tlib#arg#Ex(arg, ...) "{{{3$/;"	f
g:tlib#input#keyagents_InputList_s	sources_non_forked/tlib/autoload/tlib/input.vim	/^    let g:tlib#input#keyagents_InputList_s = extend(g:tlib#input#keyagents_InputList_s, g:tlib_extend_keyagents_InputList_s)$/;"	v
g:tlib#input#keyagents_InputList_m	sources_non_forked/tlib/autoload/tlib/input.vim	/^    let g:tlib#input#keyagents_InputList_m = extend(g:tlib#input#keyagents_InputList_m, g:tlib_extend_keyagents_InputList_m)$/;"	v
tlib#input#List	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! tlib#input#List(type, ...) "{{{3$/;"	f
tlib#input#ListD	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! tlib#input#ListD(dict) "{{{3$/;"	f
tlib#input#ListW	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! tlib#input#ListW(world, ...) "{{{3$/;"	f
CallAgent	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! s:CallAgent(handler, world, list) abort "{{{3$/;"	f
GetModdedChar	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! s:GetModdedChar(world) "{{{3$/;"	f
Init	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! s:Init(world, cmd) "{{{3$/;"	f
ExtendKeyMap	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! s:ExtendKeyMap(world, key_mode, key_handlers) "{{{3$/;"	f
PopupmenuExists	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! s:PopupmenuExists()$/;"	f
BuildMenu	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! s:BuildMenu(world) "{{{3$/;"	f
BuildItem	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! s:BuildItem(menu, def) "{{{3$/;"	f
RunStateHandlers	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! s:RunStateHandlers(world) "{{{3$/;"	f
CheckAgentReturnValue	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! s:CheckAgentReturnValue(name, value) "{{{3$/;"	f
SetOffset	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! s:SetOffset(world) "{{{3$/;"	f
tlib#input#EditList	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! tlib#input#EditList(query, list, ...) "{{{3$/;"	f
tlib#input#Resume	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! tlib#input#Resume(name, pick, bufnr) "{{{3$/;"	f
tlib#input#CommandSelect	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! tlib#input#CommandSelect(command, ...) "{{{3$/;"	f
tlib#input#Edit	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! tlib#input#Edit(name, value, callback, ...) "{{{3$/;"	f
EditCallback	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! s:EditCallback(...) "{{{3$/;"	f
tlib#input#Dialog	sources_non_forked/tlib/autoload/tlib/input.vim	/^function! tlib#input#Dialog(text, options, default) "{{{3$/;"	f
s:prototype	sources_non_forked/tlib/autoload/tlib/Filter_cnfd.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_cnfd'], 'name': 'cnfd'}) "{{{2$/;"	v
s:prototype	sources_non_forked/tlib/autoload/tlib/Filter_cnfd.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
tlib#Filter_cnfd#New	sources_non_forked/tlib/autoload/tlib/Filter_cnfd.vim	/^function! tlib#Filter_cnfd#New(...) "{{{3$/;"	f
prototype.Init	sources_non_forked/tlib/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.Init(world) dict "{{{3$/;"	f
s:Help	sources_non_forked/tlib/autoload/tlib/Filter_cnfd.vim	/^let s:Help = s:prototype.Help$/;"	v
prototype.Help	sources_non_forked/tlib/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
prototype.SetFrontFilter	sources_non_forked/tlib/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.PushFrontFilter	sources_non_forked/tlib/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.CleanFilter	sources_non_forked/tlib/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
s:id_counter	sources_non_forked/tlib/autoload/tlib/Object.vim	/^let s:id_counter = 0$/;"	v
s:prototype	sources_non_forked/tlib/autoload/tlib/Object.vim	/^let s:prototype  = {'_class': ['object'], '_super': [], '_id': 0} "{{{2$/;"	v
tlib#Object#New	sources_non_forked/tlib/autoload/tlib/Object.vim	/^function! tlib#Object#New(...) "{{{3$/;"	f
prototype.New	sources_non_forked/tlib/autoload/tlib/Object.vim	/^function! s:prototype.New(...) dict "{{{3$/;"	f
prototype.Inherit	sources_non_forked/tlib/autoload/tlib/Object.vim	/^function! s:prototype.Inherit(object) dict "{{{3$/;"	f
prototype.Extend	sources_non_forked/tlib/autoload/tlib/Object.vim	/^function! s:prototype.Extend(dictionary) dict "{{{3$/;"	f
prototype.IsA	sources_non_forked/tlib/autoload/tlib/Object.vim	/^function! s:prototype.IsA(class) dict "{{{3$/;"	f
prototype.IsRelated	sources_non_forked/tlib/autoload/tlib/Object.vim	/^function! s:prototype.IsRelated(object) dict "{{{3$/;"	f
prototype.RespondTo	sources_non_forked/tlib/autoload/tlib/Object.vim	/^function! s:prototype.RespondTo(name) dict "{{{3$/;"	f
prototype.Super	sources_non_forked/tlib/autoload/tlib/Object.vim	/^function! s:prototype.Super(method, arglist) dict "{{{3$/;"	f
tlib#Object#Methods	sources_non_forked/tlib/autoload/tlib/Object.vim	/^function! tlib#Object#Methods(object, ...) "{{{3$/;"	f
tlib#char#Get	sources_non_forked/tlib/autoload/tlib/char.vim	/^function! tlib#char#Get(...) "{{{3$/;"	f
tlib#char#IsAvailable	sources_non_forked/tlib/autoload/tlib/char.vim	/^function! tlib#char#IsAvailable() "{{{3$/;"	f
tlib#char#GetWithTimeout	sources_non_forked/tlib/autoload/tlib/char.vim	/^function! tlib#char#GetWithTimeout(timeout, ...) "{{{3$/;"	f
s:save_cpo	sources_non_forked/tlib/autoload/tlib/signs.vim	/^let s:save_cpo = &cpo$/;"	v
s:base	sources_non_forked/tlib/autoload/tlib/signs.vim	/^let s:base = 2327$/;"	v
s:register	sources_non_forked/tlib/autoload/tlib/signs.vim	/^let s:register = {}$/;"	v
tlib#signs#ClearAll	sources_non_forked/tlib/autoload/tlib/signs.vim	/^function! tlib#signs#ClearAll(sign) "{{{3$/;"	f
tlib#signs#ClearBuffer	sources_non_forked/tlib/autoload/tlib/signs.vim	/^function! tlib#signs#ClearBuffer(sign, bufnr) "{{{3$/;"	f
tlib#signs#Mark	sources_non_forked/tlib/autoload/tlib/signs.vim	/^function! tlib#signs#Mark(sign, list) "{{{3$/;"	f
SignId	sources_non_forked/tlib/autoload/tlib/signs.vim	/^function! s:SignId(item) "{{{3$/;"	f
tlib#string#RemoveBackslashes	sources_non_forked/tlib/autoload/tlib/string.vim	/^function! tlib#string#RemoveBackslashes(text, ...) "{{{3$/;"	f
tlib#string#Chomp	sources_non_forked/tlib/autoload/tlib/string.vim	/^function! tlib#string#Chomp(string, ...) "{{{3$/;"	f
tlib#string#Format	sources_non_forked/tlib/autoload/tlib/string.vim	/^function! tlib#string#Format(template, dict) "{{{3$/;"	f
tlib#string#Printf1	sources_non_forked/tlib/autoload/tlib/string.vim	/^function! tlib#string#Printf1(format, string) "{{{3$/;"	f
PrintFormat	sources_non_forked/tlib/autoload/tlib/string.vim	/^function! s:PrintFormat(format, string) "{{{3$/;"	f
RewriteFormatString	sources_non_forked/tlib/autoload/tlib/string.vim	/^function! s:RewriteFormatString(format, pattern, string) "{{{3$/;"	f
tlib#string#TrimLeft	sources_non_forked/tlib/autoload/tlib/string.vim	/^function! tlib#string#TrimLeft(string) "{{{3$/;"	f
tlib#string#TrimRight	sources_non_forked/tlib/autoload/tlib/string.vim	/^function! tlib#string#TrimRight(string) "{{{3$/;"	f
tlib#string#Strip	sources_non_forked/tlib/autoload/tlib/string.vim	/^function! tlib#string#Strip(string) "{{{3$/;"	f
tlib#string#Count	sources_non_forked/tlib/autoload/tlib/string.vim	/^function! tlib#string#Count(string, rx) "{{{3$/;"	f
CountHelper	sources_non_forked/tlib/autoload/tlib/string.vim	/^function! s:CountHelper() "{{{3$/;"	f
tlib#string#SplitCommaList	sources_non_forked/tlib/autoload/tlib/string.vim	/^function! tlib#string#SplitCommaList(text, ...) abort "{{{3$/;"	f
s:save_cpo	sources_non_forked/tlib/autoload/tlib/normal.vim	/^let s:save_cpo = &cpo$/;"	v
tlib#normal#WithRegister	sources_non_forked/tlib/autoload/tlib/normal.vim	/^function! tlib#normal#WithRegister(cmd, ...) "{{{3$/;"	f
g:tlib#cmd#last_output	sources_non_forked/tlib/autoload/tlib/cmd.vim	/^let g:tlib#cmd#last_output = []$/;"	v
tlib#cmd#OutputAsList	sources_non_forked/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#OutputAsList(command) "{{{3$/;"	f
tlib#cmd#BrowseOutput	sources_non_forked/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#BrowseOutput(command) "{{{3$/;"	f
tlib#cmd#BrowseOutputWithCallback	sources_non_forked/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#BrowseOutputWithCallback(callback, command) "{{{3$/;"	f
tlib#cmd#DefaultBrowseOutput	sources_non_forked/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#DefaultBrowseOutput(cmd) "{{{3$/;"	f
tlib#cmd#ParseScriptname	sources_non_forked/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#ParseScriptname(line) "{{{3$/;"	f
tlib#cmd#TBrowseScriptnames	sources_non_forked/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#TBrowseScriptnames() abort "{{{3$/;"	f
tlib#cmd#UseVertical	sources_non_forked/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#UseVertical(...) "{{{3$/;"	f
tlib#cmd#Time	sources_non_forked/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#Time(cmd) "{{{3$/;"	f
tlib#cmd#Capture	sources_non_forked/tlib/autoload/tlib/cmd.vim	/^function! tlib#cmd#Capture(cmd) "{{{3$/;"	f
s:save_cpo	sources_non_forked/tlib/autoload/tlib/notify.vim	/^let s:save_cpo = &cpo$/;"	v
tlib#notify#Echo	sources_non_forked/tlib/autoload/tlib/notify.vim	/^function! tlib#notify#Echo(text, ...)$/;"	f
tlib#notify#TrimMessage	sources_non_forked/tlib/autoload/tlib/notify.vim	/^function! tlib#notify#TrimMessage(message) "{{{3$/;"	f
s:bmru	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^let s:bmru = []$/;"	v
tlib#buffer#EnableMRU	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#EnableMRU() "{{{3$/;"	f
tlib#buffer#DisableMRU	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#DisableMRU() "{{{3$/;"	f
BMRU_Push	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! s:BMRU_Push(bnr) "{{{3$/;"	f
CompareBuffernameByBasename	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! s:CompareBuffernameByBasename(a, b) "{{{3$/;"	f
CompareBufferNrByMRU	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! s:CompareBufferNrByMRU(a, b) "{{{3$/;"	f
tlib#buffer#Set	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#Set(buffer) "{{{3$/;"	f
tlib#buffer#Eval	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#Eval(buffer, code) "{{{3$/;"	f
tlib#buffer#GetList	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#GetList(...)$/;"	f
tlib#buffer#ViewLine	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#ViewLine(line, ...) "{{{3$/;"	f
UndoHighlightLine	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! s:UndoHighlightLine() "{{{3$/;"	f
tlib#buffer#HighlightLine	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#HighlightLine(...) "{{{3$/;"	f
tlib#buffer#DeleteRange	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#DeleteRange(line1, line2) "{{{3$/;"	f
tlib#buffer#ReplaceRange	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#ReplaceRange(line1, line2, lines)$/;"	f
tlib#buffer#ScratchStart	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#ScratchStart() "{{{3$/;"	f
tlib#buffer#ScratchEnd	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#ScratchEnd() "{{{3$/;"	f
tlib#buffer#BufDo	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#BufDo(exec) "{{{3$/;"	f
tlib#buffer#InsertText	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#InsertText(text, ...) "{{{3$/;"	f
tlib#buffer#InsertText0	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#InsertText0(text, ...) "{{{3$/;"	f
tlib#buffer#CurrentByte	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#CurrentByte() "{{{3$/;"	f
tlib#buffer#KeepCursorPosition	sources_non_forked/tlib/autoload/tlib/buffer.vim	/^function! tlib#buffer#KeepCursorPosition(cmd) "{{{3$/;"	f
g:tlib#date#dayshift	sources_non_forked/tlib/autoload/tlib/date.vim	/^let g:tlib#date#dayshift = 60 * 60 * 24$/;"	v
g:tlib#date#date_rx	sources_non_forked/tlib/autoload/tlib/date.vim	/^let g:tlib#date#date_rx = '\\<\\(\\d\\{4}\\)-\\(\\d\\d\\)-\\(\\d\\d\\)\\>'$/;"	v
g:tlib#date#date_format	sources_non_forked/tlib/autoload/tlib/date.vim	/^let g:tlib#date#date_format = '%Y-%m-%d'$/;"	v
tlib#date#IsDate	sources_non_forked/tlib/autoload/tlib/date.vim	/^function! tlib#date#IsDate(text) abort "{{{3$/;"	f
tlib#date#Format	sources_non_forked/tlib/autoload/tlib/date.vim	/^function! tlib#date#Format(secs1970) abort "{{{3$/;"	f
tlib#date#DiffInDays	sources_non_forked/tlib/autoload/tlib/date.vim	/^function! tlib#date#DiffInDays(date, ...)$/;"	f
tlib#date#Parse	sources_non_forked/tlib/autoload/tlib/date.vim	/^function! tlib#date#Parse(date, ...) "{{{3$/;"	f
tlib#date#SecondsSince1970	sources_non_forked/tlib/autoload/tlib/date.vim	/^function! tlib#date#SecondsSince1970(date, ...) "{{{3$/;"	f
tlib#date#Shift	sources_non_forked/tlib/autoload/tlib/date.vim	/^function! tlib#date#Shift(date, shift) abort "{{{3$/;"	f
tlib#balloon#Register	sources_non_forked/tlib/autoload/tlib/balloon.vim	/^function! tlib#balloon#Register(expr) "{{{3$/;"	f
tlib#balloon#Remove	sources_non_forked/tlib/autoload/tlib/balloon.vim	/^function! tlib#balloon#Remove(expr) "{{{3$/;"	f
tlib#balloon#Expr	sources_non_forked/tlib/autoload/tlib/balloon.vim	/^function! tlib#balloon#Expr() "{{{3$/;"	f
tlib#balloon#Expand	sources_non_forked/tlib/autoload/tlib/balloon.vim	/^function! tlib#balloon#Expand(expr) abort "{{{3$/;"	f
tlib#rx#Escape	sources_non_forked/tlib/autoload/tlib/rx.vim	/^function! tlib#rx#Escape(text, ...) "{{{3$/;"	f
tlib#rx#EscapeReplace	sources_non_forked/tlib/autoload/tlib/rx.vim	/^function! tlib#rx#EscapeReplace(text, ...) "{{{3$/;"	f
tlib#rx#Suffixes	sources_non_forked/tlib/autoload/tlib/rx.vim	/^function! tlib#rx#Suffixes(...) "{{{3$/;"	f
tlib#rx#LooksLikeRegexp	sources_non_forked/tlib/autoload/tlib/rx.vim	/^function! tlib#rx#LooksLikeRegexp(text) abort "{{{3$/;"	f
s:cmd1	sources_non_forked/tlib/autoload/tlib/vcs.vim	/^            let s:cmd1 = printf(g:tlib#vcs#check, s:cmd)$/;"	v
g:tlib#vcs#executables	sources_non_forked/tlib/autoload/tlib/vcs.vim	/^            let g:tlib#vcs#executables[s:cmd] = executable(s:cmd1) ? s:cmd1 : ''$/;"	v
tlib#vcs#Executable	sources_non_forked/tlib/autoload/tlib/vcs.vim	/^function! tlib#vcs#Executable(type) "{{{3$/;"	f
tlib#vcs#FindVCS	sources_non_forked/tlib/autoload/tlib/vcs.vim	/^function! tlib#vcs#FindVCS(filename) "{{{3$/;"	f
GetCmd	sources_non_forked/tlib/autoload/tlib/vcs.vim	/^function! s:GetCmd(vcstype, cmd)$/;"	f
tlib#vcs#Ls	sources_non_forked/tlib/autoload/tlib/vcs.vim	/^function! tlib#vcs#Ls(...) "{{{3$/;"	f
tlib#vcs#Diff	sources_non_forked/tlib/autoload/tlib/vcs.vim	/^function! tlib#vcs#Diff(filename, ...) "{{{3$/;"	f
tlib#vcs#GitLsPostprocess	sources_non_forked/tlib/autoload/tlib/vcs.vim	/^function! tlib#vcs#GitLsPostprocess(filename) abort "{{{3$/;"	f
s:prototype	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^let s:prototype = tlib#Object#New({'_class': ['Filter_cnf'], 'name': 'cnf'}) "{{{2$/;"	v
s:prototype	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
tlib#Filter_cnf#New	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^function! tlib#Filter_cnf#New(...) "{{{3$/;"	f
prototype.Init	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Init(world) dict "{{{3$/;"	f
prototype.Help	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
prototype.AssessName	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.AssessName(world, name) dict "{{{3$/;"	f
prototype.Match	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Match(world, text) dict "{{{3$/;"	f
prototype.DisplayFilter	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/;"	f
prototype.Pretty	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Pretty(filter) dict "{{{3$/;"	f
prototype.SetFrontFilter	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.PushFrontFilter	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.ReduceFrontFilter	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
prototype.FilterRxPrefix	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.FilterRxPrefix() dict "{{{3$/;"	f
prototype.CleanFilter	sources_non_forked/tlib/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
s:prototype	sources_non_forked/tlib/autoload/tlib/Filter_fuzzy.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_fuzzy'], 'name': 'fuzzy'}) "{{{2$/;"	v
s:prototype	sources_non_forked/tlib/autoload/tlib/Filter_fuzzy.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
tlib#Filter_fuzzy#New	sources_non_forked/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! tlib#Filter_fuzzy#New(...) "{{{3$/;"	f
prototype.Init	sources_non_forked/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.Init(world) dict "{{{3$/;"	f
s:Help	sources_non_forked/tlib/autoload/tlib/Filter_fuzzy.vim	/^let s:Help = s:prototype.Help$/;"	v
prototype.Help	sources_non_forked/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
prototype.DisplayFilter	sources_non_forked/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/;"	f
prototype.SetFrontFilter	sources_non_forked/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.PushFrontFilter	sources_non_forked/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.ReduceFrontFilter	sources_non_forked/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
prototype.CleanFilter	sources_non_forked/tlib/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
tlib#qfl#FormatQFLE	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#FormatQFLE(qfe) dict abort "{{{3$/;"	f
tlib#qfl#QfeFilename	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#QfeFilename(qfe) abort "{{{3$/;"	f
tlib#qfl#InitListBuffer	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#InitListBuffer(world) "{{{3$/;"	f
tlib#qfl#SetSyntax	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#SetSyntax() dict abort "{{{3$/;"	f
tlib#qfl#Balloon	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#Balloon() "{{{3$/;"	f
tlib#qfl#AgentEditQFE	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentEditQFE(world, selected, ...) "{{{3$/;"	f
tlib#qfl#AgentPreviewQFE	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentPreviewQFE(world, selected) "{{{3$/;"	f
tlib#qfl#AgentGotoQFE	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentGotoQFE(world, selected) "{{{3$/;"	f
tlib#qfl#AgentWithSelected	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentWithSelected(world, selected, ...) "{{{3$/;"	f
tlib#qfl#RunCmdOnSelected	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#RunCmdOnSelected(world, selected, cmd, ...) "{{{3$/;"	f
tlib#qfl#AgentSplitBuffer	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentSplitBuffer(world, selected) "{{{3$/;"	f
tlib#qfl#AgentTabBuffer	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentTabBuffer(world, selected) "{{{3$/;"	f
tlib#qfl#AgentVSplitBuffer	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentVSplitBuffer(world, selected) "{{{3$/;"	f
tlib#qfl#AgentEditLine	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentEditLine(world, selected) "{{{3$/;"	f
tlib#qfl#EditLine	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#EditLine(lnum) "{{{3$/;"	f
tlib#qfl#SetFollowCursor	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#SetFollowCursor(world, selected) "{{{3$/;"	f
tlib#qfl#QflList	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#QflList(list, ...) abort "{{{3$/;"	f
tlib#qfl#Browse	sources_non_forked/tlib/autoload/tlib/qfl.vim	/^function! tlib#qfl#Browse(...) abort "{{{3$/;"	f
tlib#assert#Enable	sources_non_forked/tlib/autoload/tlib/assert.vim	/^function! tlib#assert#Enable() abort "{{{3$/;"	f
tlib#assert#Disable	sources_non_forked/tlib/autoload/tlib/assert.vim	/^function! tlib#assert#Disable() abort "{{{3$/;"	f
tlib#assert#Assert	sources_non_forked/tlib/autoload/tlib/assert.vim	/^function! tlib#assert#Assert(caller, check, vals) abort "{{{3$/;"	f
tlib#assert#Map	sources_non_forked/tlib/autoload/tlib/assert.vim	/^function! tlib#assert#Map(vals, expr) abort "{{{3$/;"	f
tlib#assert#All	sources_non_forked/tlib/autoload/tlib/assert.vim	/^function! tlib#assert#All(vals) abort "{{{3$/;"	f
g:tlib#trace#backtrace	sources_non_forked/tlib/autoload/tlib/trace.vim	/^    let g:tlib#trace#backtrace = 2   "{{{2$/;"	v
g:tlib#trace#printf	sources_non_forked/tlib/autoload/tlib/trace.vim	/^    let g:tlib#trace#printf = 'echom %s'   "{{{2$/;"	v
s:trace_hl	sources_non_forked/tlib/autoload/tlib/trace.vim	/^let s:trace_hl = {'error': 'ErrorMsg', 'fatal': 'ErrorMsg', 'warning': 'WarningMsg'}$/;"	v
tlib#trace#PrintToFile	sources_non_forked/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#PrintToFile(filename) abort "{{{3$/;"	f
tlib#trace#Set	sources_non_forked/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Set(vars) abort "{{{3$/;"	f
tlib#trace#Backtrace	sources_non_forked/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Backtrace(caller) abort "{{{3$/;"	f
tlib#trace#Print	sources_non_forked/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Print(caller, vars, values) abort "{{{3$/;"	f
tlib#trace#Enable	sources_non_forked/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Enable() abort "{{{3$/;"	f
tlib#trace#Disable	sources_non_forked/tlib/autoload/tlib/trace.vim	/^function! tlib#trace#Disable() abort "{{{3$/;"	f
tlib#url#Decode	sources_non_forked/tlib/autoload/tlib/url.vim	/^function! tlib#url#Decode(url) "{{{3$/;"	f
tlib#url#DecodeChar	sources_non_forked/tlib/autoload/tlib/url.vim	/^function! tlib#url#DecodeChar(char) "{{{3$/;"	f
tlib#url#EncodeChar	sources_non_forked/tlib/autoload/tlib/url.vim	/^function! tlib#url#EncodeChar(char) "{{{3$/;"	f
tlib#url#Encode	sources_non_forked/tlib/autoload/tlib/url.vim	/^function! tlib#url#Encode(url, ...) "{{{3$/;"	f
g:loaded_surround	sources_non_forked/vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
getchar	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
inputtarget	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
inputreplacement	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
beep	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
redraw	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
extractbefore	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
extractafter	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
fixindent	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
process	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
wrap	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,removed,special)$/;"	f
wrapreg	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,removed,special)$/;"	f
insert	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
reindent	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
dosurround	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
changesurround	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:changesurround(...) " {{{1$/;"	f
opfunc	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:opfunc2(arg)$/;"	f
closematch	sources_non_forked/vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
<Plug>SurroundRepeat	sources_non_forked/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>Dsurround	sources_non_forked/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>Csurround	sources_non_forked/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>CSurround	sources_non_forked/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>Yssurround	sources_non_forked/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>YSsurround	sources_non_forked/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>Ysurround	sources_non_forked/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<Plug>YSurround	sources_non_forked/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>VSurround	sources_non_forked/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>$/;"	m
<Plug>VgSurround	sources_non_forked/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>$/;"	m
<Plug>Isurround	sources_non_forked/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>ISurround	sources_non_forked/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
ds	sources_non_forked/vim-surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
cs	sources_non_forked/vim-surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
cS	sources_non_forked/vim-surround/plugin/surround.vim	/^  nmap cS  <Plug>CSurround$/;"	m
ys	sources_non_forked/vim-surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
yS	sources_non_forked/vim-surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
yss	sources_non_forked/vim-surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
ySs	sources_non_forked/vim-surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
ySS	sources_non_forked/vim-surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
<C-S>	sources_non_forked/vim-surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<C-G>s	sources_non_forked/vim-surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-G>S	sources_non_forked/vim-surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
ai	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^onoremap <silent>ai :<C-u>cal <Sid>HandleTextObjectMapping(0, 0, 0, [line("."), line("."), col("."), col(".")])<CR>$/;"	m
ii	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^onoremap <silent>ii :<C-u>cal <Sid>HandleTextObjectMapping(1, 0, 0, [line("."), line("."), col("."), col(".")])<CR>$/;"	m
ai	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^vnoremap <silent>ai :<C-u>cal <Sid>HandleTextObjectMapping(0, 0, 1, [line("'<"), line("'>"), col("'<"), col("'>")])<CR><Esc>gv$/;"	m
ii	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^vnoremap <silent>ii :<C-u>cal <Sid>HandleTextObjectMapping(1, 0, 1, [line("'<"), line("'>"), col("'<"), col("'>")])<CR><Esc>gv$/;"	m
aI	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^onoremap <silent>aI :<C-u>cal <Sid>HandleTextObjectMapping(0, 1, 0, [line("."), line("."), col("."), col(".")])<CR>$/;"	m
iI	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^onoremap <silent>iI :<C-u>cal <Sid>HandleTextObjectMapping(1, 1, 0, [line("."), line("."), col("."), col(".")])<CR>$/;"	m
aI	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^vnoremap <silent>aI :<C-u>cal <Sid>HandleTextObjectMapping(0, 1, 1, [line("'<"), line("'>"), col("'<"), col("'>")])<CR><Esc>gv$/;"	m
iI	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^vnoremap <silent>iI :<C-u>cal <Sid>HandleTextObjectMapping(1, 1, 1, [line("'<"), line("'>"), col("'<"), col("'>")])<CR><Esc>gv$/;"	m
s:l0	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^let s:l0 = -1$/;"	v
s:l1	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^let s:l1 = -1$/;"	v
s:c0	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^let s:c0 = -1$/;"	v
s:c1	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^let s:c1 = -1$/;"	v
g:indent_object_except_first_level	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^	let g:indent_object_except_first_level = 1$/;"	v
TextObject	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^function! <Sid>TextObject(inner, incbelow, vis, range, count)$/;"	f
HandleTextObjectMapping	sources_non_forked/vim-indent-object/plugin/indent-object.vim	/^function! <Sid>HandleTextObjectMapping(inner, incbelow, vis, range)$/;"	f
g:loaded_fastfold	sources_non_forked/FastFold/plugin/fastfold.vim	/^let g:loaded_fastfold = 1$/;"	v
s:keepcpo	sources_non_forked/FastFold/plugin/fastfold.vim	/^let s:keepcpo         = &cpo$/;"	v
g:fastfold_fold_command_suffixes	sources_non_forked/FastFold/plugin/fastfold.vim	/^  let g:fastfold_fold_command_suffixes = ['x','X','a','A','o','O','c','C']$/;"	v
g:fastfold_fold_movement_commands	sources_non_forked/FastFold/plugin/fastfold.vim	/^  let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']$/;"	v
EnterWin	sources_non_forked/FastFold/plugin/fastfold.vim	/^function! s:EnterWin()$/;"	f
LeaveWin	sources_non_forked/FastFold/plugin/fastfold.vim	/^function! s:LeaveWin()$/;"	f
WinDo	sources_non_forked/FastFold/plugin/fastfold.vim	/^function! s:WinDo( command )$/;"	f
UpdateWin	sources_non_forked/FastFold/plugin/fastfold.vim	/^function! s:UpdateWin(check)$/;"	f
UpdateBuf	sources_non_forked/FastFold/plugin/fastfold.vim	/^function! s:UpdateBuf(feedback)$/;"	f
UpdateTab	sources_non_forked/FastFold/plugin/fastfold.vim	/^function! s:UpdateTab()$/;"	f
Skip	sources_non_forked/FastFold/plugin/fastfold.vim	/^function! s:Skip()$/;"	f
isReasonable	sources_non_forked/FastFold/plugin/fastfold.vim	/^function! s:isReasonable()$/;"	f
inSkipList	sources_non_forked/FastFold/plugin/fastfold.vim	/^function! s:inSkipList()$/;"	f
FastFoldUpdate	sources_non_forked/FastFold/plugin/fastfold.vim	/^command! -bar -bang FastFoldUpdate call s:UpdateBuf(<bang>0)$/;"	c
<Plug>(FastFoldUpdate)	sources_non_forked/FastFold/plugin/fastfold.vim	/^nnoremap <silent> <Plug>(FastFoldUpdate) :<c-u>FastFoldUpdate!<CR>$/;"	m
zuz	sources_non_forked/FastFold/plugin/fastfold.vim	/^  nmap zuz <Plug>(FastFoldUpdate)$/;"	m
FastFold	sources_non_forked/FastFold/plugin/fastfold.vim	/^augroup FastFold$/;"	a
init	sources_non_forked/FastFold/plugin/fastfold.vim	/^function! s:init()$/;"	f
Goyo	sources_non_forked/goyo.vim/plugin/goyo.vim	/^command! -nargs=? -bar -bang Goyo call goyo#execute(<bang>0, <q-args>)$/;"	c
s:cpo_save	sources_non_forked/goyo.vim/autoload/goyo.vim	/^let s:cpo_save = &cpo$/;"	v
const	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:const(val, min, max)$/;"	f
get_color	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:get_color(group, attr)$/;"	f
set_color	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:set_color(group, attr, color)$/;"	f
blank	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:blank(repel)$/;"	f
init_pad	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:init_pad(command)$/;"	f
setup_pad	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:setup_pad(bufnr, vert, size, repel)$/;"	f
resize_pads	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:resize_pads()$/;"	f
tranquilize	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:tranquilize()$/;"	f
hide_statusline	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:hide_statusline()$/;"	f
hide_linenr	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:hide_linenr()$/;"	f
maps_nop	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:maps_nop()$/;"	f
maps_resize	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:maps_resize()$/;"	f
<plug>(goyo-resize)	sources_non_forked/goyo.vim/autoload/goyo.vim	/^nnoremap <silent> <plug>(goyo-resize) :<c-u>call <sid>resize_pads()<cr>$/;"	m
goyo_on	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:goyo_on(dim)$/;"	f
goyo_off	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:goyo_off()$/;"	f
relsz	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:relsz(expr, limit)$/;"	f
parse_arg	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! s:parse_arg(arg)$/;"	f
goyo#execute	sources_non_forked/goyo.vim/autoload/goyo.vim	/^function! goyo#execute(bang, dim)$/;"	f
yank_entries	sources_non_forked/vim-yankstack/spec/yankstack/yankstack_spec.rb	/^  def yank_entries$/;"	f
g:loaded_repeat	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:repeat_tick	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:repeat_reg	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^let g:repeat_reg = ['', '']$/;"	v
repeat#invalidate	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^function! repeat#invalidate()$/;"	f
repeat#set	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeat#setreg	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^function! repeat#setreg(sequence,register)$/;"	f
repeat#run	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^function! repeat#run(count)$/;"	f
repeat#wrap	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^function! repeat#wrap(command,count)$/;"	f
.	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^nnoremap <silent> .     :<C-U>call repeat#run(v:count)<CR>$/;"	m
u	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^nnoremap <silent> u     :<C-U>call repeat#wrap('u',v:count)<CR>$/;"	m
U	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^    nnoremap <silent> U     :<C-U>call repeat#wrap('U',v:count)<CR>$/;"	m
<C-R>	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^nnoremap <silent> <C-R> :<C-U>call repeat#wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
repeatPlugin	sources_non_forked/vim-yankstack/spec/fixtures/repeat.vim	/^augroup repeatPlugin$/;"	a
s:yankstack_tail	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^let s:yankstack_tail = []$/;"	v
g:yankstack_size	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^let g:yankstack_size = 30$/;"	v
s:last_paste	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^let s:last_paste = { 'changedtick': -1, 'key': '', 'mode': 'n', 'count': 1, 'register': '' }$/;"	v
g:yankstack_yank_keys	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^  let g:yankstack_yank_keys = ['c', 'C', 'd', 'D', 's', 'S', 'x', 'X', 'y', 'Y']$/;"	v
yank_with_key	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:yank_with_key(key)$/;"	f
paste_with_key	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:paste_with_key(key, mode, register, count)$/;"	f
paste_from_yankstack	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:paste_from_yankstack(key, mode, register, count, is_new)$/;"	f
substitute_paste	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:substitute_paste(offset, current_mode)$/;"	f
before_yank	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:before_yank()$/;"	f
yankstack_rotate	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:yankstack_rotate(offset)$/;"	f
get_yankstack_head	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:get_yankstack_head()$/;"	f
set_yankstack_head	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:set_yankstack_head(entry)$/;"	f
after_paste	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:after_paste()$/;"	f
last_change_was_paste	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:last_change_was_paste()$/;"	f
default_register	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:default_register()$/;"	f
default_paste_key	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:default_paste_key(mode)$/;"	f
Yankstack	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! g:Yankstack()$/;"	f
Yanks	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^command! -nargs=0 Yanks call s:show_yanks()$/;"	c
show_yanks	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:show_yanks()$/;"	f
show_yank	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! s:show_yank(yank, index)$/;"	f
yankstack#setup	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^function! yankstack#setup()$/;"	f
<Plug>yankstack_substitute_older_paste	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^nnoremap <silent> <Plug>yankstack_substitute_older_paste :<C-u>call <SID>substitute_paste(v:count1, 'n')<CR>$/;"	m
<Plug>yankstack_substitute_newer_paste	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^nnoremap <silent> <Plug>yankstack_substitute_newer_paste :<C-u>call <SID>substitute_paste(-v:count1, 'n')<CR>$/;"	m
<Plug>yankstack_substitute_older_paste	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^inoremap <silent> <Plug>yankstack_substitute_older_paste <C-r>=<SID>substitute_paste(v:count1, 'i')<CR>$/;"	m
<Plug>yankstack_substitute_newer_paste	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^inoremap <silent> <Plug>yankstack_substitute_newer_paste <C-r>=<SID>substitute_paste(-v:count1, 'i')<CR>$/;"	m
<Plug>yankstack_after_paste	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^nnoremap <silent> <Plug>yankstack_after_paste :call <SID>after_paste()<CR>$/;"	m
<Plug>yankstack_after_paste	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^inoremap <silent> <Plug>yankstack_after_paste <C-o>:call <SID>after_paste()<CR>$/;"	m
<M-p>	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^  nmap <M-p> <Plug>yankstack_substitute_older_paste$/;"	m
<M-p>	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^  imap <M-p> <Plug>yankstack_substitute_older_paste$/;"	m
<M-P>	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^  nmap <M-P> <Plug>yankstack_substitute_newer_paste$/;"	m
<M-P>	sources_non_forked/vim-yankstack/autoload/yankstack.vim	/^  imap <M-P> <Plug>yankstack_substitute_newer_paste$/;"	m
b:did_indent	sources_non_forked/vim-snipmate/indent/snippets.vim	/^let b:did_indent = 1$/;"	v
GetSnippetIndent	sources_non_forked/vim-snipmate/indent/snippets.vim	/^function! GetSnippetIndent()$/;"	f
b:did_ftplugin	sources_non_forked/vim-snipmate/ftplugin/snippets.vim	/^let b:did_ftplugin = 1$/;"	v
b:undo_ftplugin	sources_non_forked/vim-snipmate/ftplugin/snippets.vim	/^let b:undo_ftplugin = "setl et< sts< cms< fdm< fde<"$/;"	v
RetabSnip	sources_non_forked/vim-snipmate/ftplugin/snippets.vim	/^command! -buffer -range=% RetabSnip$/;"	c
s:did_snip_helper	sources_non_forked/vim-snipmate/ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
Close	sources_non_forked/vim-snipmate/ftplugin/html_snip_helper.vim	/^fun! Close() abort$/;"	f
loaded_snips	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
s:save_cpo	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^let s:save_cpo = &cpo$/;"	v
g:snipMateSources	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^  let g:snipMateSources = {}$/;"	v
g:snipMateSources	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^  let g:snipMateSources['default'] = funcref#Function('snipMate#DefaultPool')$/;"	v
SnipMateDetect	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^augroup SnipMateDetect$/;"	a
<Plug>snipMateNextOrTrigger	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^inoremap <silent> <Plug>snipMateNextOrTrigger  <C-R>=snipMate#TriggerSnippet()<CR>$/;"	m
<Plug>snipMateTrigger	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^inoremap <silent> <Plug>snipMateTrigger        <C-R>=snipMate#TriggerSnippet(1)<CR>$/;"	m
<Plug>snipMateBack	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^inoremap <silent> <Plug>snipMateBack           <C-R>=snipMate#BackwardsSnippet()<CR>$/;"	m
<Plug>snipMateShow	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^inoremap <silent> <Plug>snipMateShow           <C-R>=snipMate#ShowAvailableSnips()<CR>$/;"	m
g:snips_author	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snips_author = 'Me'$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate = {}$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^let g:snipMate['no_match_completion_feedkeys_chars'] =$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^let g:snipMate.scope_aliases = get(g:snipMate, 'scope_aliases', {})$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.objc =$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.cpp =$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.cu =$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.xhtml =$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.html =$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.php =$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.ur =$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.mxml =$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.eruby =$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.scss =$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.less =$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^let g:snipMate['get_snippets'] = get(g:snipMate, 'get_snippets', funcref#Function("snipMate#GetSnippets"))$/;"	v
g:snipMate	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^let g:snipMate['get_scopes'] = get(g:snipMate, 'get_scopes', funcref#Function('return split(&ft,"\\\\.")+[&syntax, "_"]'))$/;"	v
grab_visual	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^function! s:grab_visual() abort$/;"	f
load_scopes	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^function! s:load_scopes(bang, ...) abort$/;"	f
SnipMateLoadScope	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^command! -bang -bar -nargs=+ SnipMateLoadScope$/;"	c
SnipMateOpenSnippetFiles	sources_non_forked/vim-snipmate/plugin/snipMate.vim	/^command! SnipMateOpenSnippetFiles call snipMate#OpenSnippetFiles()$/;"	c
Parse	sources_non_forked/vim-snipmate/t/parser.vim	/^        function! Parse(snippet, ...)$/;"	f
b:snipmate_visual	sources_non_forked/vim-snipmate/t/parser.vim	/^        let b:snipmate_visual = 'testvisual'$/;"	v
expect	sources_non_forked/vim-snipmate/t/parser.vim	/^        let expect = [[[1234567890]]]$/;"	v
InstanceFound	sources_non_forked/vim-snipmate/t/parser.vim	/^        function! InstanceFound(list)$/;"	f
CheckList	sources_non_forked/vim-snipmate/t/parser.vim	/^        function! CheckList(list)$/;"	f
expect	sources_non_forked/vim-snipmate/t/parser.vim	/^        let expect = [[[1, { 'pat' : 'abc', 'sub' : 'def' }]]]$/;"	v
expect	sources_non_forked/vim-snipmate/t/parser.vim	/^        let expect[0][0][1].flags = ''$/;"	v
expect	sources_non_forked/vim-snipmate/t/parser.vim	/^        let expect[0][0][1].flags = 'g'$/;"	v
text	sources_non_forked/vim-snipmate/t/parser.vim	/^        let text = 'a `fnamemodify("x.y", ":r")` ${2:(${3\/a\/b})}'$/;"	v
expect	sources_non_forked/vim-snipmate/t/parser.vim	/^        let expect = ['a x ', [2, '(', [3, { 'pat' : 'a', 'sub' : 'b' }], ')']]$/;"	v
g:foo	sources_non_forked/vim-snipmate/t/parser.vim	/^        let g:foo = 'bar'$/;"	v
b:snipmate_visual	sources_non_forked/vim-snipmate/t/parser.vim	/^        let b:snipmate_visual = "  foo\\nbar\\n  baz"$/;"	v
b:snipmate_visual	sources_non_forked/vim-snipmate/t/parser.vim	/^        let b:snipmate_visual = "1\\n2\\n"$/;"	v
b:snipmate_visual	sources_non_forked/vim-snipmate/t/parser.vim	/^        let b:snipmate_visual = "1\\n2\\n3"$/;"	v
Setup	sources_non_forked/vim-snipmate/t/jumping.vim	/^function! Setup(snip) abort$/;"	f
to_be_file	sources_non_forked/vim-snipmate/t/jumping.vim	/^function! s:to_be_file(expected) abort$/;"	f
to_be_in	sources_non_forked/vim-snipmate/t/jumping.vim	/^function! s:to_be_in(item, list) abort$/;"	f
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^        let b:snip_state = snipmate#jumping#state()$/;"	v
ReadAutocmds	sources_non_forked/vim-snipmate/t/jumping.vim	/^            function! ReadAutocmds()$/;"	f
snipmate_changes	sources_non_forked/vim-snipmate/t/jumping.vim	/^            aug snipmate_changes$/;"	a
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = { 1 : {}, 2 : {} }$/;"	v
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stop_no = 1$/;"	v
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stop_count = 4$/;"	v
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = { 3 : {} }$/;"	v
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stop_count = 6$/;"	v
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stop_no = 1$/;"	v
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stop_no = 5$/;"	v
mirror	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let mirror = { 'line' : 0 }$/;"	v
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = { 1 : { 'placeholder' : [[2, mirror]] },$/;"	v
stop	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let stop = [2, 'abc']$/;"	v
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = { 1 : { 'placeholder' : [stop] },$/;"	v
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = {$/;"	v
stop	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let stop = b:snip_state.stops[1]$/;"	v
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = {$/;"	v
stop	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let stop = b:snip_state.stops[1]$/;"	v
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = {$/;"	v
stop	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let stop = b:snip_state.stops[1]$/;"	v
b:snip_state	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = {$/;"	v
stop	sources_non_forked/vim-snipmate/t/jumping.vim	/^            let stop = b:snip_state.stops[1]$/;"	v
snipMate_python_demo#Activate	sources_non_forked/vim-snipmate/autoload/snipMate_python_demo.vim	/^fun! snipMate_python_demo#Activate() abort$/;"	f
Add	sources_non_forked/vim-snipmate/autoload/snipMate_python_demo.vim	/^fun! s:Add(dict, line, source, trigger) abort$/;"	f
snipMate_python_demo#FunctionsFromCurrentFileAndTags	sources_non_forked/vim-snipmate/autoload/snipMate_python_demo.vim	/^fun! snipMate_python_demo#FunctionsFromCurrentFileAndTags(scopes, trigger, result) abort$/;"	f
s:sigil	sources_non_forked/vim-snipmate/autoload/snipmate/legacy.vim	/^let s:sigil = nr2char(31)$/;"	v
snipmate#legacy#sigil	sources_non_forked/vim-snipmate/autoload/snipmate/legacy.vim	/^let snipmate#legacy#sigil = s:sigil$/;"	v
snipmate#legacy#process_snippet	sources_non_forked/vim-snipmate/autoload/snipmate/legacy.vim	/^function! snipmate#legacy#process_snippet(snip) abort$/;"	f
snipmate#legacy#build_stops	sources_non_forked/vim-snipmate/autoload/snipmate/legacy.vim	/^function! snipmate#legacy#build_stops(snip, lnum, col, indent) abort$/;"	f
substitute_visual	sources_non_forked/vim-snipmate/autoload/snipmate/legacy.vim	/^function! s:substitute_visual(snippet, visual) abort$/;"	f
count	sources_non_forked/vim-snipmate/autoload/snipmate/legacy.vim	/^function! s:count(haystack, needle) abort$/;"	f
sfile	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:sfile() abort$/;"	f
s:parser_proto	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^let s:parser_proto = {}$/;"	v
s:special_chars	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^let s:special_chars = "$`\\n"$/;"	v
new_parser	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:new_parser(text) abort$/;"	f
parser_advance	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_advance(...) dict abort$/;"	f
parser_same	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_same(tok) dict abort$/;"	f
parser_id	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_id() dict abort$/;"	f
parser_add_var	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_add_var(var) dict abort$/;"	f
parser_var	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_var() dict abort$/;"	f
parser_varend	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_varend() dict abort$/;"	f
parser_placeholder	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_placeholder() dict abort$/;"	f
parser_subst	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_subst() dict abort$/;"	f
parser_pat	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_pat(...) dict abort$/;"	f
parser_expr	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_expr() dict abort$/;"	f
parser_string	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_string(till, ...) dict abort$/;"	f
join_consecutive_strings	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:join_consecutive_strings(list) abort$/;"	f
parser_text	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_text(till) dict abort$/;"	f
parser_line	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_line() dict abort$/;"	f
parser_parse	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_parse() dict abort$/;"	f
indent	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:indent(count) abort$/;"	f
visual_placeholder	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:visual_placeholder(var, indent) abort$/;"	f
parser_create_stubs	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_create_stubs() dict abort$/;"	f
create_mirror_stub	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:create_mirror_stub(mirror, dict)$/;"	f
snipmate#parse#snippet	sources_non_forked/vim-snipmate/autoload/snipmate/parse.vim	/^function! snipmate#parse#snippet(text, ...) abort$/;"	f
sfile	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:sfile() abort$/;"	f
s:state_proto	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^let s:state_proto = {}$/;"	v
snipmate#jumping#state	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! snipmate#jumping#state() abort$/;"	f
listize_mirror	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:listize_mirror(mirrors) abort$/;"	f
state_remove	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_remove() dict abort$/;"	f
state_find_next_stop	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_find_next_stop(backwards) dict abort$/;"	f
state_set_stop	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_set_stop(backwards) dict abort$/;"	f
state_jump_stop	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_jump_stop(backwards) dict abort$/;"	f
state_remove_nested	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_remove_nested(...) dict abort$/;"	f
state_select_word	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_select_word() dict abort$/;"	f
state_update_changes	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_update_changes() dict abort$/;"	f
state_update_mirrors	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_update_mirrors(change) dict abort$/;"	f
state_find_update_objects	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_find_update_objects(item) dict abort$/;"	f
state_update	sources_non_forked/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_update(item, change_len, mirror_change) dict abort$/;"	f
snipmate#util#add_methods	sources_non_forked/vim-snipmate/autoload/snipmate/util.vim	/^function! snipmate#util#add_methods(sfile, namespace, methods) abort$/;"	f
snipmate#util#eval	sources_non_forked/vim-snipmate/autoload/snipmate/util.vim	/^function! snipmate#util#eval(arg)$/;"	f
snipmate#util#tabwidth	sources_non_forked/vim-snipmate/autoload/snipmate/util.vim	/^function! snipmate#util#tabwidth()$/;"	f
g:snipMate	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^  let g:snipMate = {}$/;"	v
Filename	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^fun! Filename(...) abort$/;"	f
s:cache	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^let s:cache = {}$/;"	v
snipMate#expandSnip	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#expandSnip(snip, version, col) abort$/;"	f
insert_snippet_text	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! s:insert_snippet_text(snippet, lnum, col, indent)$/;"	f
snipMate#placeholder_str	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#placeholder_str(num, stops) abort$/;"	f
snipMate#sniplist_str	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#sniplist_str(snippet, stops) abort$/;"	f
build_stops	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! s:build_stops(snippet, stops, lnum, col, indent) abort$/;"	f
build_loc_info	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! s:build_loc_info(snippet, stops, lnum, col, seen_items) abort$/;"	f
add_update_objects	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! s:add_update_objects(object, targets) abort$/;"	f
snipMate#ReadSnippetsFile	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#ReadSnippetsFile(file) abort$/;"	f
GetScopes	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! s:GetScopes() abort$/;"	f
AddScopeAliases	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^fun! s:AddScopeAliases(list) abort$/;"	f
SnipMateSource	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^augroup SnipMateSource$/;"	a
info_from_filename	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! s:info_from_filename(file) abort$/;"	f
source_snippet	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! s:source_snippet() abort$/;"	f
CachedSnips	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! s:CachedSnips(file) abort$/;"	f
snippet_filenames	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! s:snippet_filenames(scope, trigger) abort$/;"	f
snipMate#SetByPath	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#SetByPath(dict, trigger, path, snippet, bang, snipversion) abort$/;"	f
Glob	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^	function! s:Glob(path, expr)$/;"	f
Glob	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^	function! s:Glob(path, expr)$/;"	f
snipMate#DefaultPool	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#DefaultPool(scopes, trigger, result) abort$/;"	f
snipMate#GetSnippets	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#GetSnippets(scopes, trigger) abort$/;"	f
snippet_dirs	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! s:snippet_dirs() abort$/;"	f
snipMate#OpenSnippetFiles	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#OpenSnippetFiles() abort$/;"	f
snipMate#ScopesByFile	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#ScopesByFile() abort$/;"	f
snipMate#GetSnippetsForWordBelowCursor	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#GetSnippetsForWordBelowCursor(word, exact) abort$/;"	f
ChooseSnippet	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^fun! s:ChooseSnippet(snippets) abort$/;"	f
snipMate#WordBelowCursor	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#WordBelowCursor() abort$/;"	f
snipMate#GetSnippetsForWordBelowCursorForComplete	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#GetSnippetsForWordBelowCursorForComplete(word) abort$/;"	f
snipMate#CanBeTriggered	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#CanBeTriggered() abort$/;"	f
snipMate#ShowAvailableSnips	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#ShowAvailableSnips() abort$/;"	f
snipMate#TriggerSnippet	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#TriggerSnippet(...) abort$/;"	f
snipMate#BackwardsSnippet	sources_non_forked/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#BackwardsSnippet() abort$/;"	f
s:save_cpo	sources_non_forked/vim-snipmate/after/plugin/snipMate.vim	/^let s:save_cpo = &cpo$/;"	v
map_if_not_mapped	sources_non_forked/vim-snipmate/after/plugin/snipMate.vim	/^function! s:map_if_not_mapped(lhs, rhs, mode) abort$/;"	f
s:overwrite	sources_non_forked/vim-snipmate/after/plugin/snipMate.vim	/^		let s:overwrite = maparg('<Tab>', 'i') ==? '<Plug>SuperTabForward'$/;"	v
s:overwrite	sources_non_forked/vim-snipmate/after/plugin/snipMate.vim	/^		let s:overwrite = 0$/;"	v
s:overwrite	sources_non_forked/vim-snipmate/after/plugin/snipMate.vim	/^		let s:overwrite = maparg('<S-Tab>', 'i') ==? '<Plug>SuperTabBackward'$/;"	v
s:overwrite	sources_non_forked/vim-snipmate/after/plugin/snipMate.vim	/^		let s:overwrite = 0$/;"	v
b:current_syntax	sources_non_forked/textx.vim/syntax/textx.vim	/^let b:current_syntax = "textx"$/;"	v
RunTest	sources_non_forked/vim-gitgutter/test/runner.vim	/^function RunTest(test)$/;"	f
Log	sources_non_forked/vim-gitgutter/test/runner.vim	/^function Log(msg)$/;"	f
Exception	sources_non_forked/vim-gitgutter/test/runner.vim	/^function Exception()$/;"	f
Shuffle	sources_non_forked/vim-gitgutter/test/runner.vim	/^function Shuffle(list)$/;"	f
Random	sources_non_forked/vim-gitgutter/test/runner.vim	/^function Random(min, max)$/;"	f
FriendlyName	sources_non_forked/vim-gitgutter/test/runner.vim	/^function FriendlyName(test_name)$/;"	f
Align	sources_non_forked/vim-gitgutter/test/runner.vim	/^function Align(left, right)$/;"	f
g:testname	sources_non_forked/vim-gitgutter/test/runner.vim	/^let g:testname = expand('%')$/;"	v
s:errored	sources_non_forked/vim-gitgutter/test/runner.vim	/^let s:errored = 0$/;"	v
s:done	sources_non_forked/vim-gitgutter/test/runner.vim	/^let s:done = 0$/;"	v
s:fail	sources_non_forked/vim-gitgutter/test/runner.vim	/^let s:fail = 0$/;"	v
s:errors	sources_non_forked/vim-gitgutter/test/runner.vim	/^let s:errors = 0$/;"	v
s:messages	sources_non_forked/vim-gitgutter/test/runner.vim	/^let s:messages = []$/;"	v
s:indent	sources_non_forked/vim-gitgutter/test/runner.vim	/^let s:indent = ''$/;"	v
s:errors	sources_non_forked/vim-gitgutter/test/runner.vim	/^  let s:errors += 1$/;"	v
s:tests	sources_non_forked/vim-gitgutter/test/runner.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k*()\\)', '\\1', 'g'))$/;"	v
s:tests	sources_non_forked/vim-gitgutter/test/runner.vim	/^  let s:tests = filter(s:tests, 'v:val =~ argv(1)')$/;"	v
s:indent	sources_non_forked/vim-gitgutter/test/runner.vim	/^let s:indent = max(map(copy(s:tests), {_, val -> len(FriendlyName(val))}))$/;"	v
s:done	sources_non_forked/vim-gitgutter/test/runner.vim	/^  let s:done += 1$/;"	v
friendly_name	sources_non_forked/vim-gitgutter/test/runner.vim	/^  let friendly_name = FriendlyName(test)$/;"	v
s:errors	sources_non_forked/vim-gitgutter/test/runner.vim	/^      let s:errors += 1$/;"	v
s:errored	sources_non_forked/vim-gitgutter/test/runner.vim	/^      let s:errored = 0$/;"	v
s:fail	sources_non_forked/vim-gitgutter/test/runner.vim	/^      let s:fail += 1$/;"	v
i	sources_non_forked/vim-gitgutter/test/runner.vim	/^    let i = 0$/;"	v
i	sources_non_forked/vim-gitgutter/test/runner.vim	/^      let i += 1$/;"	v
summary	sources_non_forked/vim-gitgutter/test/runner.vim	/^let summary = [$/;"	v
s:current_dir	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^let s:current_dir = expand('%:p:h')$/;"	v
s:test_repo	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^let s:test_repo   = s:current_dir.'\/test-repo'$/;"	v
s:bufnr	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^let s:bufnr       = bufnr('')$/;"	v
signs	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function s:signs(filename)$/;"	f
git_diff	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff()$/;"	f
git_diff_staged	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff_staged()$/;"	f
SetUp	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function SetUp()$/;"	f
TearDown	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function TearDown()$/;"	f
Test_add_lines	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines()$/;"	f
Test_add_lines_fish	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines_fish()$/;"	f
Test_modify_lines	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_modify_lines()$/;"	f
Test_remove_lines	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_lines()$/;"	f
Test_remove_first_lines	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_first_lines()$/;"	f
Test_edit_file_with_same_name_as_a_branch	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_edit_file_with_same_name_as_a_branch()$/;"	f
Test_file_added_to_git	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_file_added_to_git()$/;"	f
Test_filename_with_equals	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_equals()$/;"	f
Test_filename_with_square_brackets	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_square_brackets()$/;"	f
Test_follow_symlink	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_follow_symlink()$/;"	f
Test_keep_alt	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_alt()$/;"	f
Test_keep_modified	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_modified()$/;"	f
Test_keep_op_marks	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_op_marks()$/;"	f
Test_no_modifications	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_no_modifications()$/;"	f
Test_orphaned_signs	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_orphaned_signs()$/;"	f
Test_sign_column_always	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_sign_column_always()$/;"	f
Test_untracked_file_outside_repo	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_outside_repo()$/;"	f
Test_untracked_file_within_repo	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_within_repo()$/;"	f
Test_untracked_file_square_brackets_within_repo	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_square_brackets_within_repo()$/;"	f
Test_hunk_outside_noop	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_outside_noop()$/;"	f
Test_hunk_stage	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage()$/;"	f
Test_hunk_stage_nearby_hunk	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_nearby_hunk()$/;"	f
Test_hunk_undo	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo()$/;"	f
Test_undo_nearby_hunk	sources_non_forked/vim-gitgutter/test/test_gitgutter.vim	/^function Test_undo_nearby_hunk()$/;"	f
g:loaded_gitgutter	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^let g:loaded_gitgutter = 1$/;"	v
g:gitgutter_realtime	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_realtime = 0$/;"	v
g:gitgutter_eager	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_eager = 0$/;"	v
set	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^function! s:set(var, default) abort$/;"	f
g:gitgutter_sign_column_always	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_column_always = 0$/;"	v
g:gitgutter_sign_removed_first_line	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_removed_first_line = '_^'$/;"	v
GitGutterAll	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterAll call gitgutter#all()$/;"	c
GitGutter	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutter    call gitgutter#process_buffer(bufnr(''), 0)$/;"	c
GitGutterDisable	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterDisable call gitgutter#disable()$/;"	c
GitGutterEnable	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterEnable  call gitgutter#enable()$/;"	c
GitGutterToggle	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterToggle  call gitgutter#toggle()$/;"	c
GitGutterLineHighlightsDisable	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterLineHighlightsDisable call gitgutter#line_highlights_disable()$/;"	c
GitGutterLineHighlightsEnable	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterLineHighlightsEnable  call gitgutter#line_highlights_enable()$/;"	c
GitGutterLineHighlightsToggle	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterLineHighlightsToggle  call gitgutter#line_highlights_toggle()$/;"	c
GitGutterSignsEnable	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterSignsEnable  call gitgutter#signs_enable()$/;"	c
GitGutterSignsDisable	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterSignsDisable call gitgutter#signs_disable()$/;"	c
GitGutterSignsToggle	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterSignsToggle  call gitgutter#signs_toggle()$/;"	c
GitGutterNextHunk	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar -count=1 GitGutterNextHunk call gitgutter#hunk#next_hunk(<count>)$/;"	c
GitGutterPrevHunk	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar -count=1 GitGutterPrevHunk call gitgutter#hunk#prev_hunk(<count>)$/;"	c
GitGutterStageHunk	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterStageHunk   call gitgutter#stage_hunk()$/;"	c
GitGutterUndoHunk	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterUndoHunk    call gitgutter#undo_hunk()$/;"	c
GitGutterRevertHunk	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterRevertHunk  echomsg 'GitGutterRevertHunk is deprecated. Use GitGutterUndoHunk'<Bar>call gitgutter#undo_hunk()$/;"	c
GitGutterPreviewHunk	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterPreviewHunk call gitgutter#preview_hunk()$/;"	c
<Plug>GitGutterTextObjectInnerPending	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>GitGutterTextObjectInnerPending :<C-U>call gitgutter#hunk#text_object(1)<CR>$/;"	m
<Plug>GitGutterTextObjectOuterPending	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>GitGutterTextObjectOuterPending :<C-U>call gitgutter#hunk#text_object(0)<CR>$/;"	m
GitGutterGetHunks	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunks()$/;"	f
GitGutterGetHunkSummary	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunkSummary()$/;"	f
GitGutterDebug	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^command -bar GitGutterDebug call gitgutter#debug#debug()$/;"	c
<Plug>GitGutterNextHunk	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterNextHunk &diff ? ']c' : ":\\<C-U>execute v:count1 . 'GitGutterNextHunk'\\<CR>"$/;"	m
<Plug>GitGutterPrevHunk	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterPrevHunk &diff ? '[c' : ":\\<C-U>execute v:count1 . 'GitGutterPrevHunk'\\<CR>"$/;"	m
[c	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^    nmap [c <Plug>GitGutterPrevHunk$/;"	m
]c	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^    nmap ]c <Plug>GitGutterNextHunk$/;"	m
<Plug>GitGutterStageHunk	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterStageHunk   :GitGutterStageHunk<CR>$/;"	m
<Plug>GitGutterUndoHunk	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterUndoHunk    :GitGutterUndoHunk<CR>$/;"	m
<Plug>GitGutterPreviewHunk	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterPreviewHunk :GitGutterPreviewHunk<CR>$/;"	m
<Leader>hs	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^    nmap <Leader>hs <Plug>GitGutterStageHunk$/;"	m
<Leader>hu	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^    nmap <Leader>hu <Plug>GitGutterUndoHunk$/;"	m
<Leader>hr	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^    nmap <Leader>hr <Plug>GitGutterUndoHunk:echomsg '<Leader>hr is deprecated. Use <Leader>hu'<CR>$/;"	m
<Leader>hp	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^    nmap <Leader>hp <Plug>GitGutterPreviewHunk$/;"	m
ic	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^    omap ic <Plug>GitGutterTextObjectInnerPending$/;"	m
ac	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^    omap ac <Plug>GitGutterTextObjectOuterPending$/;"	m
gitgutter	sources_non_forked/vim-gitgutter/plugin/gitgutter.vim	/^augroup gitgutter$/;"	a
s:nomodeline	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''$/;"	v
gitgutter#all	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#all() abort$/;"	f
gitgutter#process_buffer	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#process_buffer(bufnr, realtime) abort$/;"	f
gitgutter#handle_diff	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#handle_diff(diff) abort$/;"	f
gitgutter#disable	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#disable() abort$/;"	f
gitgutter#enable	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#enable() abort$/;"	f
gitgutter#toggle	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#toggle() abort$/;"	f
gitgutter#line_highlights_disable	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#line_highlights_disable() abort$/;"	f
gitgutter#line_highlights_enable	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#line_highlights_enable() abort$/;"	f
gitgutter#line_highlights_toggle	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#line_highlights_toggle() abort$/;"	f
gitgutter#signs_enable	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#signs_enable() abort$/;"	f
gitgutter#signs_disable	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#signs_disable() abort$/;"	f
gitgutter#signs_toggle	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#signs_toggle() abort$/;"	f
gitgutter#stage_hunk	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#stage_hunk() abort$/;"	f
gitgutter#undo_hunk	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#undo_hunk() abort$/;"	f
gitgutter#preview_hunk	sources_non_forked/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#preview_hunk() abort$/;"	f
s:first_sign_id	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:first_sign_id = 3000$/;"	v
s:next_sign_id	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:next_sign_id  = s:first_sign_id$/;"	v
s:dummy_sign_id	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:dummy_sign_id = s:first_sign_id - 1$/;"	v
s:supports_star	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:supports_star = v:version > 703 || (v:version == 703 && has("patch596"))$/;"	v
gitgutter#sign#clear_signs	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#clear_signs() abort$/;"	f
gitgutter#sign#update_signs	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#update_signs(modified_lines) abort$/;"	f
gitgutter#sign#add_dummy_sign	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#add_dummy_sign() abort$/;"	f
gitgutter#sign#remove_dummy_sign	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#remove_dummy_sign(force) abort$/;"	f
gitgutter#sign#find_current_signs	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#find_current_signs() abort$/;"	f
gitgutter#sign#obsolete_gitgutter_signs_to_remove	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#obsolete_gitgutter_signs_to_remove(new_gitgutter_signs_line_numbers) abort$/;"	f
gitgutter#sign#remove_signs	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#remove_signs(sign_ids, all_signs) abort$/;"	f
gitgutter#sign#upsert_new_gitgutter_signs	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#upsert_new_gitgutter_signs(modified_lines) abort$/;"	f
gitgutter#sign#next_sign_id	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#next_sign_id() abort$/;"	f
gitgutter#sign#reset	sources_non_forked/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#reset()$/;"	f
s:plugin_dir	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:plugin_dir  = expand('<sfile>:p:h:h:h').'\/'$/;"	v
s:log_file	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:log_file    = s:plugin_dir.'gitgutter.log'$/;"	v
s:channel_log	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:channel_log = s:plugin_dir.'channel.log'$/;"	v
s:new_log_session	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:new_log_session = 1$/;"	v
gitgutter#debug#debug	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#debug()$/;"	f
gitgutter#debug#separator	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#separator()$/;"	f
gitgutter#debug#vim_version	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#vim_version()$/;"	f
gitgutter#debug#git_version	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#git_version()$/;"	f
gitgutter#debug#grep_version	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#grep_version()$/;"	f
gitgutter#debug#option	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#option(name)$/;"	f
gitgutter#debug#output	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#output(text)$/;"	f
gitgutter#debug#log	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#log(message, ...) abort$/;"	f
format_for_log	sources_non_forked/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:format_for_log(data) abort$/;"	f
gitgutter#highlight#define_sign_column_highlight	sources_non_forked/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_column_highlight() abort$/;"	f
gitgutter#highlight#define_highlights	sources_non_forked/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_highlights() abort$/;"	f
gitgutter#highlight#define_signs	sources_non_forked/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_signs() abort$/;"	f
gitgutter#highlight#define_sign_text	sources_non_forked/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_text() abort$/;"	f
gitgutter#highlight#define_sign_text_highlights	sources_non_forked/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_text_highlights() abort$/;"	f
gitgutter#highlight#define_sign_line_highlights	sources_non_forked/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_line_highlights() abort$/;"	f
gitgutter#highlight#get_background_colors	sources_non_forked/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#get_background_colors(group) abort$/;"	f
gitgutter#highlight#match_highlight	sources_non_forked/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#match_highlight(highlight, pattern) abort$/;"	f
s:jobs	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:jobs = {}$/;"	v
s:available	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:available = has('nvim') || ($/;"	v
gitgutter#async#available	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#available()$/;"	f
gitgutter#async#execute	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#execute(cmd) abort$/;"	f
gitgutter#async#handle_diff_job_nvim	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#handle_diff_job_nvim(job_id, data, event) dict abort$/;"	f
gitgutter#async#handle_diff_job_vim	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#handle_diff_job_vim(channel, line) abort$/;"	f
gitgutter#async#handle_diff_job_vim_close	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#handle_diff_job_vim_close(channel) abort$/;"	f
channel_id	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:channel_id(channel) abort$/;"	f
job_started	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:job_started(id, ...) abort$/;"	f
is_job_started	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:is_job_started(id) abort$/;"	f
accumulate_job_output	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:accumulate_job_output(id, line) abort$/;"	f
job_output	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:job_output(id) abort$/;"	f
job_buffer	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:job_buffer(id) abort$/;"	f
job_finished	sources_non_forked/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:job_finished(id) abort$/;"	f
s:file	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^let s:file = ''$/;"	v
s:using_xolox_shell	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^let s:using_xolox_shell = -1$/;"	v
s:exit_code	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^let s:exit_code = 0$/;"	v
gitgutter#utility#setbufvar	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#setbufvar(buffer, varname, val)$/;"	f
gitgutter#utility#getbufvar	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#getbufvar(buffer, varname, ...)$/;"	f
gitgutter#utility#warn	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn(message) abort$/;"	f
gitgutter#utility#warn_once	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn_once(message, key) abort$/;"	f
gitgutter#utility#is_active	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#is_active() abort$/;"	f
gitgutter#utility#not_git_dir	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#not_git_dir() abort$/;"	f
gitgutter#utility#is_file_buffer	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#is_file_buffer() abort$/;"	f
gitgutter#utility#shellescape	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#shellescape(arg) abort$/;"	f
gitgutter#utility#set_buffer	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#set_buffer(bufnr) abort$/;"	f
gitgutter#utility#bufnr	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#bufnr()$/;"	f
gitgutter#utility#file	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#file()$/;"	f
gitgutter#utility#filename	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#filename() abort$/;"	f
gitgutter#utility#extension	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#extension() abort$/;"	f
gitgutter#utility#full_path_to_directory_of_file	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#full_path_to_directory_of_file() abort$/;"	f
gitgutter#utility#directory_of_file	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#directory_of_file() abort$/;"	f
gitgutter#utility#exists_file	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#exists_file() abort$/;"	f
gitgutter#utility#has_unsaved_changes	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#has_unsaved_changes() abort$/;"	f
gitgutter#utility#has_fresh_changes	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#has_fresh_changes() abort$/;"	f
gitgutter#utility#save_last_seen_change	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#save_last_seen_change() abort$/;"	f
gitgutter#utility#shell_error	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#shell_error() abort$/;"	f
gitgutter#utility#using_xolox_shell	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#using_xolox_shell() abort$/;"	f
gitgutter#utility#system	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#system(cmd, ...) abort$/;"	f
gitgutter#utility#file_relative_to_repo_root	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#file_relative_to_repo_root() abort$/;"	f
gitgutter#utility#command_in_directory_of_file	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#command_in_directory_of_file(cmd) abort$/;"	f
gitgutter#utility#highlight_name_for_change	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#highlight_name_for_change(text) abort$/;"	f
gitgutter#utility#dedup	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#dedup(list)$/;"	f
gitgutter#utility#strip_trailing_new_line	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#strip_trailing_new_line(line) abort$/;"	f
gitgutter#utility#git_supports_command_line_config_override	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#git_supports_command_line_config_override() abort$/;"	f
gitgutter#utility#stringify	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#stringify(list) abort$/;"	f
gitgutter#utility#use_known_shell	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#use_known_shell() abort$/;"	f
gitgutter#utility#restore_shell	sources_non_forked/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#restore_shell() abort$/;"	f
gitgutter#hunk#set_hunks	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#set_hunks(hunks) abort$/;"	f
gitgutter#hunk#hunks	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#hunks() abort$/;"	f
gitgutter#hunk#reset	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#reset() abort$/;"	f
gitgutter#hunk#summary	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#summary(bufnr) abort$/;"	f
reset_summary	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:reset_summary() abort$/;"	f
gitgutter#hunk#increment_lines_added	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_added(count) abort$/;"	f
gitgutter#hunk#increment_lines_modified	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_modified(count) abort$/;"	f
gitgutter#hunk#increment_lines_removed	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_removed(count) abort$/;"	f
gitgutter#hunk#next_hunk	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#next_hunk(count) abort$/;"	f
gitgutter#hunk#prev_hunk	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#prev_hunk(count) abort$/;"	f
gitgutter#hunk#current_hunk	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#current_hunk() abort$/;"	f
gitgutter#hunk#cursor_in_hunk	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#cursor_in_hunk(hunk) abort$/;"	f
gitgutter#hunk#line_adjustment_for_current_hunk	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#line_adjustment_for_current_hunk() abort$/;"	f
gitgutter#hunk#text_object	sources_non_forked/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#text_object(inner) abort$/;"	f
s:grep_available	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^  let s:grep_available = 1$/;"	v
s:grep_command	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^  let s:grep_command = g:gitgutter_grep_command$/;"	v
s:grep_available	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^  let s:grep_available = executable('grep')$/;"	v
s:grep_command	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^    let s:grep_command = 'grep'$/;"	v
s:grep_command	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^      let s:grep_command .= ' --color=never'$/;"	v
s:hunk_re	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:hunk_re = '^@@ -\\(\\d\\+\\),\\?\\(\\d*\\) +\\(\\d\\+\\),\\?\\(\\d*\\) @@'$/;"	v
s:c_flag	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:c_flag = gitgutter#utility#git_supports_command_line_config_override()$/;"	v
s:temp_index	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_index = tempname()$/;"	v
s:temp_buffer	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_buffer = tempname()$/;"	v
gitgutter#diff#run_diff	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#run_diff(realtime, preserve_full_diff) abort$/;"	f
gitgutter#diff#parse_diff	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_diff(diff) abort$/;"	f
gitgutter#diff#parse_hunk	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_hunk(line) abort$/;"	f
gitgutter#diff#process_hunks	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_hunks(hunks) abort$/;"	f
gitgutter#diff#process_hunk	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_hunk(hunk) abort$/;"	f
gitgutter#diff#is_added	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#is_added(from_count, to_count) abort$/;"	f
gitgutter#diff#is_removed	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#is_removed(from_count, to_count) abort$/;"	f
gitgutter#diff#is_modified	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#is_modified(from_count, to_count) abort$/;"	f
gitgutter#diff#is_modified_and_added	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#is_modified_and_added(from_count, to_count) abort$/;"	f
gitgutter#diff#is_modified_and_removed	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#is_modified_and_removed(from_count, to_count) abort$/;"	f
gitgutter#diff#process_added	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_added(modifications, from_count, to_count, to_line) abort$/;"	f
gitgutter#diff#process_removed	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_removed(modifications, from_count, to_count, to_line) abort$/;"	f
gitgutter#diff#process_modified	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_modified(modifications, from_count, to_count, to_line) abort$/;"	f
gitgutter#diff#process_modified_and_added	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_modified_and_added(modifications, from_count, to_count, to_line) abort$/;"	f
gitgutter#diff#process_modified_and_removed	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_modified_and_removed(modifications, from_count, to_count, to_line) abort$/;"	f
gitgutter#diff#generate_diff_for_hunk	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#generate_diff_for_hunk(diff, type) abort$/;"	f
gitgutter#diff#discard_hunks	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#discard_hunks(diff, keep_header) abort$/;"	f
gitgutter#diff#adjust_hunk_summary	sources_non_forked/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#adjust_hunk_summary(diff_for_hunk, staging) abort$/;"	f
b:loaded_flake8_ftplugin	sources_non_forked/vim-flake8/ftplugin/python_flake8.vim	/^let b:loaded_flake8_ftplugin=1$/;"	v
s:save_cpo	sources_non_forked/vim-flake8/ftplugin/python_flake8.vim	/^let s:save_cpo = &cpo$/;"	v
Flake8	sources_non_forked/vim-flake8/ftplugin/python_flake8.vim	/^function! Flake8()$/;"	f
<F7>	sources_non_forked/vim-flake8/ftplugin/python_flake8.vim	/^        noremap <buffer> <F7> :call flake8#Flake8()<CR>$/;"	m
s:save_cpo	sources_non_forked/vim-flake8/autoload/flake8.vim	/^let s:save_cpo = &cpo$/;"	v
flake8#Flake8	sources_non_forked/vim-flake8/autoload/flake8.vim	/^function! flake8#Flake8()$/;"	f
flake8#Flake8UnplaceMarkers	sources_non_forked/vim-flake8/autoload/flake8.vim	/^function! flake8#Flake8UnplaceMarkers()$/;"	f
s:displayed_warnings	sources_non_forked/vim-flake8/autoload/flake8.vim	/^let s:displayed_warnings = 0$/;"	v
Warnings	sources_non_forked/vim-flake8/autoload/flake8.vim	/^function s:Warnings()$/;"	f
DeclareOption	sources_non_forked/vim-flake8/autoload/flake8.vim	/^function! s:DeclareOption(name, globalPrefix, default)  " {{{$/;"	f
Setup	sources_non_forked/vim-flake8/autoload/flake8.vim	/^function! s:Setup()  " {{{$/;"	f
Flake8	sources_non_forked/vim-flake8/autoload/flake8.vim	/^function! s:Flake8()  " {{{$/;"	f
PlaceMarkers	sources_non_forked/vim-flake8/autoload/flake8.vim	/^function! s:PlaceMarkers(results)  " {{{$/;"	f
UnplaceMarkers	sources_non_forked/vim-flake8/autoload/flake8.vim	/^function! s:UnplaceMarkers()  " {{{$/;"	f
loaded_mru	sources_non_forked/mru.vim/plugin/mru.vim	/^let loaded_mru=1$/;"	v
s:cpo_save	sources_non_forked/mru.vim/plugin/mru.vim	/^let s:cpo_save = &cpo$/;"	v
MRU_Max_Entries	sources_non_forked/mru.vim/plugin/mru.vim	/^    let MRU_Max_Entries = 100$/;"	v
MRU_Exclude_Files	sources_non_forked/mru.vim/plugin/mru.vim	/^    let MRU_Exclude_Files = ''$/;"	v
MRU_Include_Files	sources_non_forked/mru.vim/plugin/mru.vim	/^    let MRU_Include_Files = ''$/;"	v
MRU_Window_Height	sources_non_forked/mru.vim/plugin/mru.vim	/^    let MRU_Window_Height = 8$/;"	v
MRU_Use_Current_Window	sources_non_forked/mru.vim/plugin/mru.vim	/^    let MRU_Use_Current_Window = 0$/;"	v
MRU_Auto_Close	sources_non_forked/mru.vim/plugin/mru.vim	/^    let MRU_Auto_Close = 1$/;"	v
MRU_File	sources_non_forked/mru.vim/plugin/mru.vim	/^        let MRU_File = $HOME . '\/.vim_mru_files'$/;"	v
MRU_File	sources_non_forked/mru.vim/plugin/mru.vim	/^        let MRU_File = $VIM . '\/_vim_mru_files'$/;"	v
MRU_File	sources_non_forked/mru.vim/plugin/mru.vim	/^                let MRU_File = $USERPROFILE . '\\_vim_mru_files'$/;"	v
MRU_Add_Menu	sources_non_forked/mru.vim/plugin/mru.vim	/^    let MRU_Add_Menu = 1$/;"	v
MRU_Max_Menu_Entries	sources_non_forked/mru.vim/plugin/mru.vim	/^    let MRU_Max_Menu_Entries = 10$/;"	v
MRU_Max_Submenu_Entries	sources_non_forked/mru.vim/plugin/mru.vim	/^    let MRU_Max_Submenu_Entries = 10$/;"	v
MRU_Window_Open_Always	sources_non_forked/mru.vim/plugin/mru.vim	/^    let MRU_Window_Open_Always = 0$/;"	v
MRU_Open_File_Use_Tabs	sources_non_forked/mru.vim/plugin/mru.vim	/^    let MRU_Open_File_Use_Tabs = 0$/;"	v
MRU_Filename_Format	sources_non_forked/mru.vim/plugin/mru.vim	/^    let MRU_Filename_Format = {$/;"	v
s:mru_list_locked	sources_non_forked/mru.vim/plugin/mru.vim	/^let s:mru_list_locked = 0$/;"	v
MRU_LoadList	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_LoadList()$/;"	f
MRU_SaveList	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_SaveList()$/;"	f
MRU_AddFile	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_AddFile(acmd_bufnr)$/;"	f
s:esc_filename_chars	sources_non_forked/mru.vim/plugin/mru.vim	/^let s:esc_filename_chars = ' *?[{`$%#"|!<>();&' . "'\\t\\n"$/;"	v
MRU_escape_filename	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_escape_filename(fname)$/;"	f
MRU_Edit_File	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_Edit_File(filename, sanitized)$/;"	f
MRU_Open_File_In_Tab	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_Open_File_In_Tab(fname, esc_fname)$/;"	f
MRU_Window_Edit_File	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_Window_Edit_File(fname, multi, edit_type, open_type)$/;"	f
MRU_Select_File_Cmd	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_Select_File_Cmd(opt) range$/;"	f
MRU_Warn_Msg	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_Warn_Msg(msg)$/;"	f
MRU_Open_Window	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_Open_Window(...)$/;"	f
MRU_Complete	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_Complete(ArgLead, CmdLine, CursorPos)$/;"	f
MRU_Cmd	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_Cmd(pat)$/;"	f
MRU_add_files_to_menu	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_add_files_to_menu(prefix, file_list)$/;"	f
MRU_Refresh_Menu	sources_non_forked/mru.vim/plugin/mru.vim	/^function! s:MRU_Refresh_Menu()$/;"	f
MRU	sources_non_forked/mru.vim/plugin/mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete MRU$/;"	c
Mru	sources_non_forked/mru.vim/plugin/mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete Mru$/;"	c
g:loaded_zenroom2_plugin	sources_non_forked/vim-zenroom2/plugin/zenroom2.vim	/^let g:loaded_zenroom2_plugin = 1$/;"	v
s:save_background	sources_non_forked/vim-zenroom2/plugin/zenroom2.vim	/^let s:save_background = ""$/;"	v
s:save_background	sources_non_forked/vim-zenroom2/plugin/zenroom2.vim	/^    let s:save_background = &background$/;"	v
markdown_room	sources_non_forked/vim-zenroom2/plugin/zenroom2.vim	/^function! s:markdown_room()$/;"	f
zenroom_goyo_before	sources_non_forked/vim-zenroom2/plugin/zenroom2.vim	/^function! s:zenroom_goyo_before()$/;"	f
zenroom_goyo_after	sources_non_forked/vim-zenroom2/plugin/zenroom2.vim	/^function! s:zenroom_goyo_after()$/;"	f
g:goyo_callbacks	sources_non_forked/vim-zenroom2/plugin/zenroom2.vim	/^let g:goyo_callbacks = [ function('s:zenroom_goyo_before'), function('s:zenroom_goyo_after') ]$/;"	v
g:tabular_loaded	sources_non_forked/tabular/plugin/Tabular.vim	/^let g:tabular_loaded = 1$/;"	v
s:savecpo	sources_non_forked/tabular/plugin/Tabular.vim	/^let s:savecpo = &cpo$/;"	v
s:TabularCommands	sources_non_forked/tabular/plugin/Tabular.vim	/^let s:TabularCommands = {}$/;"	v
CompleteTabularizeCommand	sources_non_forked/tabular/plugin/Tabular.vim	/^function! s:CompleteTabularizeCommand(argstart, cmdline, cursorpos)$/;"	f
ChooseCommandMap	sources_non_forked/tabular/plugin/Tabular.vim	/^function! s:ChooseCommandMap(commandline)$/;"	f
ParsePattern	sources_non_forked/tabular/plugin/Tabular.vim	/^function! s:ParsePattern(string)$/;"	f
SplitCommands	sources_non_forked/tabular/plugin/Tabular.vim	/^function! s:SplitCommands(string)$/;"	f
AddTabularPattern	sources_non_forked/tabular/plugin/Tabular.vim	/^com! -nargs=+ -bang AddTabularPattern$/;"	c
AddTabularPattern	sources_non_forked/tabular/plugin/Tabular.vim	/^function! AddTabularPattern(command, force)$/;"	f
AddTabularPipeline	sources_non_forked/tabular/plugin/Tabular.vim	/^com! -nargs=+ -bang AddTabularPipeline$/;"	c
AddTabularPipeline	sources_non_forked/tabular/plugin/Tabular.vim	/^function! AddTabularPipeline(command, force)$/;"	f
Tabularize	sources_non_forked/tabular/plugin/Tabular.vim	/^   \\ Tabularize <line1>,<line2>call Tabularize(<q-args>)$/;"	c
Tabularize	sources_non_forked/tabular/plugin/Tabular.vim	/^function! Tabularize(command, ...) range$/;"	f
GTabularize	sources_non_forked/tabular/plugin/Tabular.vim	/^   \\ GTabularize <line1>,<line2>$/;"	c
s:savecpo	sources_non_forked/tabular/autoload/tabular.vim	/^let s:savecpo = &cpo$/;"	v
s:Strlen	sources_non_forked/tabular/autoload/tabular.vim	/^  let s:Strlen = function("strdisplaywidth")$/;"	v
Strlen	sources_non_forked/tabular/autoload/tabular.vim	/^  function! s:Strlen(string)$/;"	f
Right	sources_non_forked/tabular/autoload/tabular.vim	/^function! s:Right(string, fieldwidth)$/;"	f
Left	sources_non_forked/tabular/autoload/tabular.vim	/^function! s:Left(string, fieldwidth)$/;"	f
Center	sources_non_forked/tabular/autoload/tabular.vim	/^function! s:Center(string, fieldwidth)$/;"	f
StripTrailingSpaces	sources_non_forked/tabular/autoload/tabular.vim	/^function! s:StripTrailingSpaces(string)$/;"	f
StripLeadingSpaces	sources_non_forked/tabular/autoload/tabular.vim	/^function! s:StripLeadingSpaces(string)$/;"	f
SplitDelim	sources_non_forked/tabular/autoload/tabular.vim	/^function! s:SplitDelim(string, delim)$/;"	f
SetLines	sources_non_forked/tabular/autoload/tabular.vim	/^function! s:SetLines(start, len, strings)$/;"	f
FilterString	sources_non_forked/tabular/autoload/tabular.vim	/^function! s:FilterString(lines, commandstring)$/;"	f
g:tabular_default_format	sources_non_forked/tabular/autoload/tabular.vim	/^  let g:tabular_default_format = "l1"$/;"	v
s:formatelempat	sources_non_forked/tabular/autoload/tabular.vim	/^let s:formatelempat = '\\%([lrc]\\d\\+\\)'$/;"	v
tabular#ElementFormatPattern	sources_non_forked/tabular/autoload/tabular.vim	/^function! tabular#ElementFormatPattern()$/;"	f
tabular#TabularizeStrings	sources_non_forked/tabular/autoload/tabular.vim	/^function! tabular#TabularizeStrings(strings, delim, ...)$/;"	f
tabular#PipeRange	sources_non_forked/tabular/autoload/tabular.vim	/^function! tabular#PipeRange(includepat, ...) range$/;"	f
tabular#PipeRangeWithOptions	sources_non_forked/tabular/autoload/tabular.vim	/^function! tabular#PipeRangeWithOptions(includepat, filterlist, options) range$/;"	f
tabular#DoGTabularize	sources_non_forked/tabular/autoload/tabular.vim	/^function! tabular#DoGTabularize()$/;"	f
SplitDelimTest	sources_non_forked/tabular/autoload/tabular.vim	/^function! s:SplitDelimTest(string, delim, expected)$/;"	f
tabular#SplitDelimUnitTest	sources_non_forked/tabular/autoload/tabular.vim	/^function! tabular#SplitDelimUnitTest()$/;"	f
s:save_cpo	sources_non_forked/tabular/after/plugin/TabularMaps.vim	/^let s:save_cpo = &cpo$/;"	v
SplitCDeclarations	sources_non_forked/tabular/after/plugin/TabularMaps.vim	/^function! SplitCDeclarations(lines)$/;"	f
b:did_indent	sources_non_forked/vim-elixir/indent/elixir.vim	/^let b:did_indent = 1$/;"	v
elixir#indent	sources_non_forked/vim-elixir/indent/elixir.vim	/^function! elixir#indent(lnum)$/;"	f
s:cpo_save	sources_non_forked/vim-elixir/indent/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
b:eelixir_subtype_indentexpr	sources_non_forked/vim-elixir/indent/eelixir.vim	/^let b:eelixir_subtype_indentexpr = &l:indentexpr$/;"	v
b:did_indent	sources_non_forked/vim-elixir/indent/eelixir.vim	/^let b:did_indent = 1$/;"	v
GetEelixirIndent	sources_non_forked/vim-elixir/indent/eelixir.vim	/^function! GetEelixirIndent(...)$/;"	f
b:did_ftplugin	sources_non_forked/vim-elixir/ftplugin/elixir.vim	/^let b:did_ftplugin = 1$/;"	v
b:match_ignorecase	sources_non_forked/vim-elixir/ftplugin/elixir.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_words	sources_non_forked/vim-elixir/ftplugin/elixir.vim	/^  let b:match_words = '\\:\\@<!\\<\\%(do\\|fn\\)\\:\\@!\\>' .$/;"	v
b:undo_ftplugin	sources_non_forked/vim-elixir/ftplugin/elixir.vim	/^let b:undo_ftplugin = 'setlocal sw< sts< et< isk< com< cms< path< inex< sua< '.$/;"	v
s:save_cpo	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^let s:save_cpo = &cpo$/;"	v
s:undo_ftplugin	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^let s:undo_ftplugin = ""$/;"	v
s:browsefilter	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:match_words	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^let s:match_words = ""$/;"	v
g:eelixir_default_subtype	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
s:lines	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let s:lines = join(getline(1, 5) + [getline('$')], "\\n")$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.eelixir\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
s:undo_ftplugin	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:browsefilter	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:match_words	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words$/;"	v
b:did_ftplugin	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^let b:did_ftplugin = 1$/;"	v
s:undo_ftplugin	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:browsefilter	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:match_words	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
b:match_words	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let b:match_words = s:match_words$/;"	v
b:surround_45	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_45 = "<% \\r %>"$/;"	v
b:surround_61	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_61 = "<%= \\r %>"$/;"	v
b:surround_35	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_35 = "<%# \\r %>"$/;"	v
b:surround_5	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_5 = "<% \\r %>\\n<% end %>"$/;"	v
b:undo_ftplugin	sources_non_forked/vim-elixir/ftplugin/eelixir.vim	/^let b:undo_ftplugin = "setl cms< " .$/;"	v
bm	sources_non_forked/vim-elixir/bin/test_indent	/^def bm$/;"	f
detect_change	sources_non_forked/vim-elixir/bin/test_indent	/^def detect_change(f)$/;"	f
strip_doc_blocks	sources_non_forked/vim-elixir/bin/test_indent	/^def strip_doc_blocks(body)$/;"	f
setf	sources_non_forked/vim-elixir/ftdetect/elixir.vim	/^function! s:setf(filetype) abort$/;"	f
DetectElixir	sources_non_forked/vim-elixir/ftdetect/elixir.vim	/^function! s:DetectElixir()$/;"	f
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func
some_other_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func
some_other_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func
some_other_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func
some_other_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func
some_other_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func
some_other_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func
some_func	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func
hello	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func
hello	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello
hello	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello
hello	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello
hello	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello
hello	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello
hello	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hello	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^      def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hello	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^      def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hi	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def hi do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hello	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hi	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def hi do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hi	sources_non_forked/vim-elixir/spec/indent/basic_spec.rb	/^    def hi do$/;"	f	class:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hello	sources_non_forked/vim-elixir/spec/indent/binary_operator_spec.rb	/^  def hello do$/;"	f
hello	sources_non_forked/vim-elixir/spec/indent/binary_operator_spec.rb	/^  def hello do$/;"	f	class:hello
test	sources_non_forked/vim-elixir/spec/indent/if_spec.rb	/^    def test do$/;"	f
exec	sources_non_forked/vim-elixir/spec/indent/if_spec.rb	/^  def exec(command, progress_func \\\\ fn(_, state) -> state end, key \\\\ nil, output \\\\ nil) do$/;"	f
handle_call	sources_non_forked/vim-elixir/spec/indent/keyword_spec.rb	/^  def handle_call({:get_in_line_for_lock, key}, from, state) do$/;"	f
handle_call	sources_non_forked/vim-elixir/spec/indent/def_spec.rb	/^    def handle_call({:release_lock, key}, _from, state) do$/;"	f
hello	sources_non_forked/vim-elixir/spec/indent/def_spec.rb	/^    def hello do$/;"	f	class:handle_call
world	sources_non_forked/vim-elixir/spec/indent/def_spec.rb	/^    def world do$/;"	f	class:handle_call.hello
do	sources_non_forked/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^      def do$/;"	f
do	sources_non_forked/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^      def do$/;"	f
test	sources_non_forked/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^      def test do$/;"	f
lol	sources_non_forked/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^        def lol do$/;"	f
lol	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^      def lol do$/;"	f
name	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^      def name, do: IO.puts "bobmarley"$/;"	f
name	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^      def name(param) do$/;"	f	class:name
name	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^      def name, do: IO.puts "bobmarley"$/;"	f
name	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^      def name(param) do$/;"	f	class:name
fun	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^      def fun(a) when is_atom(a) do$/;"	f
f	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^    def f do$/;"	f
f	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^    def f do$/;"	f	class:f
test	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^      def test do$/;"	f	class:f
how_are_you	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^      def how_are_you do$/;"	f	class:f
how_are_you	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^        def how_are_you do$/;"	f	class:f
hello	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^    def hello do$/;"	f	class:f
handle_info	sources_non_forked/vim-elixir/spec/indent/blocks_spec.rb	/^  def handle_info(:tick, state = %{policy_iteration: []) do$/;"	f	class:f.hello
do_query	sources_non_forked/vim-elixir/spec/indent/ecto_queries_spec.rb	/^      def do_query do$/;"	f
smth	sources_non_forked/vim-elixir/spec/indent/ecto_queries_spec.rb	/^    def smth do$/;"	f
do_query	sources_non_forked/vim-elixir/spec/indent/ecto_queries_spec.rb	/^    def do_query do$/;"	f
alphabetical	sources_non_forked/vim-elixir/spec/indent/ecto_queries_spec.rb	/^  def alphabetical(query) do$/;"	f
xpto	sources_non_forked/vim-elixir/spec/indent/tuples_spec.rb	/^    def xpto do$/;"	f
method	sources_non_forked/vim-elixir/spec/indent/tuples_spec.rb	/^    def method do$/;"	f
example	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^    def example do$/;"	f
project	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^    def project do$/;"	f
config	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^    def config do$/;"	f
test	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^    def test do$/;"	f
test	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^    def test do$/;"	f
test	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^    def test do$/;"	f
project	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^    def project do$/;"	f
project	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^    def project do$/;"	f
test	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^    def test do$/;"	f
create	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^    def create(conn, %{$/;"	f
double	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^    def double(x) do$/;"	f
double	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^    def double(x) do$/;"	f
double	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^      def double(x) do$/;"	f
test_another_feature	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^      def test_another_feature do$/;"	f
test	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^        def test do$/;"	f
fun	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^      def fun do$/;"	f
fun	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^      def fun do$/;"	f
init	sources_non_forked/vim-elixir/spec/indent/lists_spec.rb	/^  def init(_) do$/;"	f
obtain_lock	sources_non_forked/vim-elixir/spec/indent/receive_spec.rb	/^  def obtain_lock(pid, key, timeout \\\\ 60_000) do$/;"	f
test	sources_non_forked/vim-elixir/spec/indent/pipeline_spec.rb	/^    def test do$/;"	f
test	sources_non_forked/vim-elixir/spec/indent/pipeline_spec.rb	/^    def test do$/;"	f
test	sources_non_forked/vim-elixir/spec/indent/pipeline_spec.rb	/^    def test do$/;"	f
export_info	sources_non_forked/vim-elixir/spec/indent/pipeline_spec.rb	/^      def export_info(users) do$/;"	f
build_command	sources_non_forked/vim-elixir/spec/indent/pipeline_spec.rb	/^    def build_command(input, output) do$/;"	f
build_command	sources_non_forked/vim-elixir/spec/indent/pipeline_spec.rb	/^    def build_command(input, output) do$/;"	f
build_command	sources_non_forked/vim-elixir/spec/indent/pipeline_spec.rb	/^    def build_command(input, output) do$/;"	f
build_command	sources_non_forked/vim-elixir/spec/indent/pipeline_spec.rb	/^      def build_command(input, output) do$/;"	f
hello	sources_non_forked/vim-elixir/spec/indent/pipeline_spec.rb	/^  def hello do$/;"	f
do_stuff	sources_non_forked/vim-elixir/spec/indent/pipeline_spec.rb	/^    def do_stuff do$/;"	f	class:hello
run	sources_non_forked/vim-elixir/spec/indent/comment_spec.rb	/^      def run do$/;"	f
run	sources_non_forked/vim-elixir/spec/indent/comment_spec.rb	/^      def run(task) when task in [:t1, :t2] do$/;"	f
Buffer	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^class Buffer$/;"	c
initialize	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def initialize(vim, type)$/;"	f	class:Buffer
reindent	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def reindent(content)$/;"	f	class:Buffer
type	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def type(content)$/;"	f	class:Buffer
syntax	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def syntax(content, pattern)$/;"	f	class:Buffer
with_file	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def with_file(content = nil)$/;"	f	class:Buffer
edit_file	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def edit_file(content)$/;"	f	class:Buffer
Differ	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^class Differ$/;"	c
diff	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def self.diff(result, expected)$/;"	F	class:Differ
instance	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def self.instance$/;"	F	class:Differ
initialize	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def initialize$/;"	f	class:Differ
diff	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def diff(result, expected)$/;"	f	class:Differ.initialize
ExBuffer	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^module ExBuffer$/;"	m	class:Differ
new	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def self.new$/;"	F	class:Differ.ExBuffer
EexBuffer	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^module EexBuffer$/;"	m	class:Differ
new	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def self.new$/;"	F	class:Differ.EexBuffer
i	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def i(str)$/;"	f	class:Differ
ip	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def ip(str)$/;"	f	class:Differ
gen_tests	sources_non_forked/vim-elixir/spec/spec_helper.rb	/^  def gen_tests(method, str)$/;"	f	class:Differ
handle_call	sources_non_forked/vim-elixir/spec/syntax/variable_spec.rb	/^      def handle_call(:pop, _from, [h|stack]) do$/;"	f
handle_call	sources_non_forked/vim-elixir/spec/syntax/variable_spec.rb	/^    def handle_call(:pop)$/;"	f
handle_call	sources_non_forked/vim-elixir/spec/syntax/variable_spec.rb	/^      def handle_call(:pop,$/;"	f
call	sources_non_forked/vim-elixir/spec/syntax/variable_spec.rb	/^      def call(:pop, _, [h|stack]) do$/;"	f
sign_in	sources_non_forked/vim-elixir/spec/syntax/variable_spec.rb	/^    def sign_in(conn, %{$/;"	f
hello	sources_non_forked/vim-elixir/spec/syntax/kernel_function_spec.rb	/^    def hello(name) when length(name) > 20 do$/;"	f
fun	sources_non_forked/vim-elixir/spec/syntax/guard_spec.rb	/^    def fun(a) when is_atom(a), do:$/;"	f
exec	sources_non_forked/vim-elixir/spec/syntax/anonymous_function_spec.rb	/^      def exec(func \\\\ fn(_, state) -> state end) do$/;"	f
exec	sources_non_forked/vim-elixir/spec/syntax/anonymous_function_spec.rb	/^        def exec(func \\\\ fn(_, state) -> state end) do$/;"	f
function	sources_non_forked/vim-elixir/spec/syntax/strings_spec.rb	/^      def function do$/;"	f
function	sources_non_forked/vim-elixir/spec/syntax/strings_spec.rb	/^      def function do$/;"	f
function	sources_non_forked/vim-elixir/spec/syntax/strings_spec.rb	/^      def function do$/;"	f
foo	sources_non_forked/vim-elixir/spec/syntax/operator_spec.rb	/^      def foo(bar \\\\ :baz)$/;"	f
foo	sources_non_forked/vim-elixir/spec/syntax/operator_spec.rb	/^      def foo(bar \/\/ :baz)$/;"	f	class:foo
some_fun	sources_non_forked/vim-elixir/spec/syntax/doc_spec.rb	/^        def some_fun(x), do: x$/;"	f
some_fun	sources_non_forked/vim-elixir/spec/syntax/doc_spec.rb	/^        def some_fun(x), do: x$/;"	f
some_fun	sources_non_forked/vim-elixir/spec/syntax/doc_spec.rb	/^        def some_fun(x), do: x$/;"	f
some_fun	sources_non_forked/vim-elixir/spec/syntax/doc_spec.rb	/^        def some_fun(x), do: x$/;"	f
MyTest	sources_non_forked/vim-elixir/spec/syntax/exunit_spec.rb	/^    module MyTest do$/;"	m
g:elixir_indent_max_lookbehind	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^  let g:elixir_indent_max_lookbehind = 30$/;"	v
sw	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:sw()$/;"	f
elixir#indent#indent	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#indent(lnum)$/;"	f
debug	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:debug(str)$/;"	f
starts_with	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:starts_with(text, expr, lnum)$/;"	f
ends_with	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:ends_with(text, expr, lnum)$/;"	f
is_string_or_comment	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:is_string_or_comment(line, col)$/;"	f
elixir#indent#searchpair_back_skip	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#searchpair_back_skip()$/;"	f
keyword	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:keyword(expr)$/;"	f
find_last_pos	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:find_last_pos(lnum, text, match)$/;"	f
elixir#indent#handle_top_of_file	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_top_of_file(_lnum, _text, prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_follow_prev_nb	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_follow_prev_nb(_lnum, _text, prev_nb_lnum, prev_nb_text)$/;"	f
get_base_indent	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:get_base_indent(lnum, text)$/;"	f
elixir#indent#handle_following_trailing_do	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_do(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_following_trailing_binary_operator	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_binary_operator(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_following_prev_end	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_prev_end(_lnum, _text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_pipe	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_pipe(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_comment	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_comment(_lnum, text, prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_end	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_end(lnum, text, _prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_mid_or_end_block_keyword	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_mid_or_end_block_keyword(lnum, text, _prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_close_bracket	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_close_bracket(lnum, text, _prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_binary_operator	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_binary_operator(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_inside_nested_construct	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_nested_construct(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_with	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:do_handle_inside_with(pair_lnum, pair_col, lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_keyword_block	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:do_handle_inside_keyword_block(pair_lnum, _pair_col, _lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_pattern_match_block	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:do_handle_inside_pattern_match_block(block_start_lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_fn	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:do_handle_inside_fn(pair_lnum, _pair_col, lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_square_brace	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:do_handle_inside_square_brace(pair_lnum, pair_col, _lnum, _text, _prev_nb_lnum, _prev_nb_text)$/;"	f
do_handle_inside_curly_brace	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:do_handle_inside_curly_brace(pair_lnum, _pair_col, _lnum, _text, _prev_nb_lnum, _prev_nb_text)$/;"	f
do_handle_inside_parens	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! s:do_handle_inside_parens(pair_lnum, pair_col, _lnum, _text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_inside_generic_block	sources_non_forked/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_generic_block(lnum, _text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#util#get_filename	sources_non_forked/vim-elixir/autoload/elixir/util.vim	/^function! elixir#util#get_filename(word) abort$/;"	f
s:cpo_save	sources_non_forked/vim-elixir/syntax/elixir.vim	/^let s:cpo_save = &cpo$/;"	v
g:elixir_use_markdown_for_docs	sources_non_forked/vim-elixir/syntax/elixir.vim	/^  let g:elixir_use_markdown_for_docs = 0$/;"	v
b:current_syntax	sources_non_forked/vim-elixir/syntax/elixir.vim	/^let b:current_syntax = "elixir"$/;"	v
s:cpo_save	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
main_syntax	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^  let main_syntax = 'eelixir'$/;"	v
g:eelixir_default_subtype	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
s:lines	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.eelixir\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:current_syntax	sources_non_forked/vim-elixir/syntax/eelixir.vim	/^let b:current_syntax = 'eelixir'$/;"	v
current_compiler	sources_non_forked/vim-elixir/compiler/exunit.vim	/^let current_compiler = "exunit"$/;"	v
CompilerSet	sources_non_forked/vim-elixir/compiler/exunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cpo_save	sources_non_forked/vim-elixir/compiler/exunit.vim	/^let s:cpo_save = &cpo$/;"	v
g:loaded_repeat	sources_non_forked/vim-repeat/autoload/repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:repeat_tick	sources_non_forked/vim-repeat/autoload/repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:repeat_reg	sources_non_forked/vim-repeat/autoload/repeat.vim	/^let g:repeat_reg = ['', '']$/;"	v
repeat#invalidate	sources_non_forked/vim-repeat/autoload/repeat.vim	/^function! repeat#invalidate()$/;"	f
repeat#set	sources_non_forked/vim-repeat/autoload/repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeat#setreg	sources_non_forked/vim-repeat/autoload/repeat.vim	/^function! repeat#setreg(sequence,register)$/;"	f
repeat#run	sources_non_forked/vim-repeat/autoload/repeat.vim	/^function! repeat#run(count)$/;"	f
repeat#wrap	sources_non_forked/vim-repeat/autoload/repeat.vim	/^function! repeat#wrap(command,count)$/;"	f
<Plug>(RepeatDot)	sources_non_forked/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatDot)      :<C-U>exe repeat#run(v:count)<CR>$/;"	m
<Plug>(RepeatUndo)	sources_non_forked/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndo)     :<C-U>call repeat#wrap('u',v:count)<CR>$/;"	m
<Plug>(RepeatUndoLine)	sources_non_forked/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndoLine) :<C-U>call repeat#wrap('U',v:count)<CR>$/;"	m
<Plug>(RepeatRedo)	sources_non_forked/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatRedo)     :<C-U>call repeat#wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
.	sources_non_forked/vim-repeat/autoload/repeat.vim	/^    nmap . <Plug>(RepeatDot)$/;"	m
u	sources_non_forked/vim-repeat/autoload/repeat.vim	/^    nmap u <Plug>(RepeatUndo)$/;"	m
U	sources_non_forked/vim-repeat/autoload/repeat.vim	/^    nmap U <Plug>(RepeatUndoLine)$/;"	m
<C-R>	sources_non_forked/vim-repeat/autoload/repeat.vim	/^    nmap <C-R> <Plug>(RepeatRedo)$/;"	m
repeatPlugin	sources_non_forked/vim-repeat/autoload/repeat.vim	/^augroup repeatPlugin$/;"	a
colors_name	sources_non_forked/vim-pyte/colors/pyte.vim	/^let colors_name = "pyte"$/;"	v
colors_name	sources_non_forked/mayansmoke/colors/mayansmoke.vim	/^let colors_name = "mayansmoke"$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/litcoffee.vim	/^let b:did_indent = 1$/;"	v
GetLitCoffeeIndent	sources_non_forked/vim-polyglot/indent/litcoffee.vim	/^function GetLitCoffeeIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/elm.vim	/^let b:did_indent = 1$/;"	v
FindPair	sources_non_forked/vim-polyglot/indent/elm.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
GetElmIndent	sources_non_forked/vim-polyglot/indent/elm.vim	/^function! GetElmIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/purescript.vim	/^let b:did_indent = 1$/;"	v
g:purescript_indent_if	sources_non_forked/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_if = 3$/;"	v
g:purescript_indent_case	sources_non_forked/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_case = 5$/;"	v
g:purescript_indent_let	sources_non_forked/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_let = 4$/;"	v
g:purescript_indent_in	sources_non_forked/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_in = 1$/;"	v
g:purescript_indent_where	sources_non_forked/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_where = 6$/;"	v
g:purescript_indent_do	sources_non_forked/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_do = 3$/;"	v
g:purescript_indent_dot	sources_non_forked/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_dot = 1$/;"	v
GetSynStack	sources_non_forked/vim-polyglot/indent/purescript.vim	/^function! s:GetSynStack(lnum, col)$/;"	f
GetPurescriptIndent	sources_non_forked/vim-polyglot/indent/purescript.vim	/^function! GetPurescriptIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/javascript.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	sources_non_forked/vim-polyglot/indent/javascript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:bvars	sources_non_forked/vim-polyglot/indent/javascript.vim	/^let s:bvars = {$/;"	v
GetVars	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:GetVars()$/;"	f
sw	sources_non_forked/vim-polyglot/indent/javascript.vim	/^  function s:sw()$/;"	f
sw	sources_non_forked/vim-polyglot/indent/javascript.vim	/^  function s:sw()$/;"	f
s:z	sources_non_forked/vim-polyglot/indent/javascript.vim	/^let s:z = has('patch-7.4.984') ? 'z' : ''$/;"	v
s:skip_expr	sources_non_forked/vim-polyglot/indent/javascript.vim	/^let s:skip_expr = "s:SynAt(line('.'),col('.')) =~? b:syng_strcom"$/;"	v
s:in_comm	sources_non_forked/vim-polyglot/indent/javascript.vim	/^let s:in_comm = s:skip_expr[:-14] . "'comment\\\\|doc'"$/;"	v
s:rel	sources_non_forked/vim-polyglot/indent/javascript.vim	/^let s:rel = has('reltime')$/;"	v
GetPair	sources_non_forked/vim-polyglot/indent/javascript.vim	/^  function s:GetPair(start,end,flags,skip)$/;"	f
GetPair	sources_non_forked/vim-polyglot/indent/javascript.vim	/^  function s:GetPair(start,end,flags,skip)$/;"	f
SynAt	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:SynAt(l,c)$/;"	f
ParseCino	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:ParseCino(f)$/;"	f
SkipFunc	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:SkipFunc()$/;"	f
AlternatePair	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:AlternatePair()$/;"	f
Nat	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:Nat(int)$/;"	f
LookingAt	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:LookingAt()$/;"	f
Token	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:Token()$/;"	f
PreviousToken	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:PreviousToken(...)$/;"	f
Pure	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:Pure(f,...)$/;"	f
SearchLoop	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:SearchLoop(pat,flags,expr)$/;"	f
ExprCol	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:ExprCol()$/;"	f
s:opfirst	sources_non_forked/vim-polyglot/indent/javascript.vim	/^let s:opfirst = '^' . get(g:,'javascript_opfirst',$/;"	v
s:continuation	sources_non_forked/vim-polyglot/indent/javascript.vim	/^let s:continuation = get(g:,'javascript_continuation',$/;"	v
Continues	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:Continues()$/;"	f
Balanced	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:Balanced(lnum,line)$/;"	f
OneScope	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:OneScope()$/;"	f
DoWhile	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:DoWhile()$/;"	f
IsContOne	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:IsContOne(cont)$/;"	f
IsSwitch	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:IsSwitch()$/;"	f
IsBlock	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function s:IsBlock()$/;"	f
GetJavascriptIndent	sources_non_forked/vim-polyglot/indent/javascript.vim	/^function GetJavascriptIndent()$/;"	f
b:html_indent_usestate	sources_non_forked/vim-polyglot/indent/handlebars.vim	/^let b:html_indent_usestate = 0$/;"	v
b:handlebars_subtype_indentexpr	sources_non_forked/vim-polyglot/indent/handlebars.vim	/^let b:handlebars_subtype_indentexpr = &l:indentexpr$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/handlebars.vim	/^let b:did_indent = 1$/;"	v
b:did_indent_hbs	sources_non_forked/vim-polyglot/indent/handlebars.vim	/^let b:did_indent_hbs = 1$/;"	v
GetHandlebarsIndent	sources_non_forked/vim-polyglot/indent/handlebars.vim	/^function! GetHandlebarsIndent(...)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/cabal.vim	/^let b:did_indent = 1$/;"	v
g:cabal_indent_section	sources_non_forked/vim-polyglot/indent/cabal.vim	/^  let g:cabal_indent_section = 2$/;"	v
g:cabal_indent_section	sources_non_forked/vim-polyglot/indent/cabal.vim	/^  let g:cabal_indent_section = 4$/;"	v
GetCabalIndent	sources_non_forked/vim-polyglot/indent/cabal.vim	/^function! GetCabalIndent()$/;"	f
b:jst_subtype_indentexpr	sources_non_forked/vim-polyglot/indent/jst.vim	/^let b:jst_subtype_indentexpr = &l:indentexpr$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/jst.vim	/^let b:did_indent = 1$/;"	v
GetJstIndent	sources_non_forked/vim-polyglot/indent/jst.vim	/^function! GetJstIndent(...)$/;"	f
get_indentexpr	sources_non_forked/vim-polyglot/indent/vue.vim	/^function! s:get_indentexpr(language)$/;"	f
s:languages	sources_non_forked/vim-polyglot/indent/vue.vim	/^let s:languages = [$/;"	v
s:language	sources_non_forked/vim-polyglot/indent/vue.vim	/^    let s:language.indentexpr = s:get_indentexpr(s:language.name)$/;"	v
s:html_indent	sources_non_forked/vim-polyglot/indent/vue.vim	/^let s:html_indent = s:get_indentexpr('html')$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/vue.vim	/^let b:did_indent = 1$/;"	v
GetVueIndent	sources_non_forked/vim-polyglot/indent/vue.vim	/^function! GetVueIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/cython.vim	/^let b:did_indent = 1$/;"	v
g:python_pep8_indent_multiline_string	sources_non_forked/vim-polyglot/indent/cython.vim	/^    let g:python_pep8_indent_multiline_string = 0$/;"	v
s:block_rules	sources_non_forked/vim-polyglot/indent/cython.vim	/^let s:block_rules = {$/;"	v
s:block_rules_multiple	sources_non_forked/vim-polyglot/indent/cython.vim	/^let s:block_rules_multiple = {$/;"	v
s:paren_pairs	sources_non_forked/vim-polyglot/indent/cython.vim	/^let s:paren_pairs = {'()': 50, '[]': 100, '{}': 1000}$/;"	v
b:control_statement	sources_non_forked/vim-polyglot/indent/cython.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except|cdef|cpdef)>'$/;"	v
b:control_statement	sources_non_forked/vim-polyglot/indent/cython.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except)>'$/;"	v
s:stop_statement	sources_non_forked/vim-polyglot/indent/cython.vim	/^let s:stop_statement = '^\\s*\\(break\\|continue\\|raise\\|return\\|pass\\)\\>'$/;"	v
s:skip_special_chars	sources_non_forked/vim-polyglot/indent/cython.vim	/^let s:skip_special_chars = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
s:skip_after_opening_paren	sources_non_forked/vim-polyglot/indent/cython.vim	/^let s:skip_after_opening_paren = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
is_concealed	sources_non_forked/vim-polyglot/indent/cython.vim	/^function! s:is_concealed(line, col)$/;"	f
s:skip_special_chars	sources_non_forked/vim-polyglot/indent/cython.vim	/^    let s:skip_special_chars .= '|| s:is_concealed(line("."), col("."))'$/;"	v
s:skip_search	sources_non_forked/vim-polyglot/indent/cython.vim	/^let s:skip_search = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
sw	sources_non_forked/vim-polyglot/indent/cython.vim	/^    function! s:sw()$/;"	f
sw	sources_non_forked/vim-polyglot/indent/cython.vim	/^    function! s:sw()$/;"	f
pair_sort	sources_non_forked/vim-polyglot/indent/cython.vim	/^function! s:pair_sort(x, y)$/;"	f
find_opening_paren	sources_non_forked/vim-polyglot/indent/cython.vim	/^function! s:find_opening_paren(...)$/;"	f
find_start_of_multiline_statement	sources_non_forked/vim-polyglot/indent/cython.vim	/^function! s:find_start_of_multiline_statement(lnum)$/;"	f
find_start_of_block	sources_non_forked/vim-polyglot/indent/cython.vim	/^function! s:find_start_of_block(lnum, types, multiple)$/;"	f
match_expr_on_line	sources_non_forked/vim-polyglot/indent/cython.vim	/^function! s:match_expr_on_line(expr, lnum, start, ...)$/;"	f
indent_like_opening_paren	sources_non_forked/vim-polyglot/indent/cython.vim	/^function! s:indent_like_opening_paren(lnum)$/;"	f
indent_like_block	sources_non_forked/vim-polyglot/indent/cython.vim	/^function! s:indent_like_block(lnum)$/;"	f
indent_like_previous_line	sources_non_forked/vim-polyglot/indent/cython.vim	/^function! s:indent_like_previous_line(lnum)$/;"	f
is_dedented_already	sources_non_forked/vim-polyglot/indent/cython.vim	/^function! s:is_dedented_already(current, base)$/;"	f
is_python_string	sources_non_forked/vim-polyglot/indent/cython.vim	/^function! s:is_python_string(lnum, ...)$/;"	f
GetPythonPEPIndent	sources_non_forked/vim-polyglot/indent/cython.vim	/^function! GetPythonPEPIndent(lnum)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/nim.vim	/^let b:did_indent = 1$/;"	v
FindStartLine	sources_non_forked/vim-polyglot/indent/nim.vim	/^function! s:FindStartLine(fromln, pattern)$/;"	f
GetNimIndent	sources_non_forked/vim-polyglot/indent/nim.vim	/^function! GetNimIndent(lnum)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/pug.vim	/^let b:did_indent = 1$/;"	v
s:attributes	sources_non_forked/vim-polyglot/indent/pug.vim	/^let s:attributes = '\\%((.\\{-\\})\\)'$/;"	v
s:tag	sources_non_forked/vim-polyglot/indent/pug.vim	/^let s:tag = '\\([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
g:pug_self_closing_tags	sources_non_forked/vim-polyglot/indent/pug.vim	/^  let g:pug_self_closing_tags = 'meta|link|img|hr|br|input'$/;"	v
GetPugIndent	sources_non_forked/vim-polyglot/indent/pug.vim	/^function! GetPugIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/rust.vim	/^let b:did_indent = 1$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/indent/rust.vim	/^let s:save_cpo = &cpo$/;"	v
get_line_trimmed	sources_non_forked/vim-polyglot/indent/rust.vim	/^function! s:get_line_trimmed(lnum)$/;"	f
is_string_comment	sources_non_forked/vim-polyglot/indent/rust.vim	/^function! s:is_string_comment(lnum, col)$/;"	f
GetRustIndent	sources_non_forked/vim-polyglot/indent/rust.vim	/^function GetRustIndent(lnum)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/puppet.vim	/^let b:did_indent = 1$/;"	v
PartOfInclude	sources_non_forked/vim-polyglot/indent/puppet.vim	/^function! s:PartOfInclude(lnum)$/;"	f
OpenBrace	sources_non_forked/vim-polyglot/indent/puppet.vim	/^function! s:OpenBrace(lnum)$/;"	f
GetPuppetIndent	sources_non_forked/vim-polyglot/indent/puppet.vim	/^function! GetPuppetIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/haskell.vim	/^let b:did_indent = 1$/;"	v
g:haskell_indent_if	sources_non_forked/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_if = 3$/;"	v
g:haskell_indent_case	sources_non_forked/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_case = 2$/;"	v
g:haskell_indent_let	sources_non_forked/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_let = 4$/;"	v
g:haskell_indent_where	sources_non_forked/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_where = 6$/;"	v
g:haskell_indent_do	sources_non_forked/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_do = 3$/;"	v
g:haskell_indent_in	sources_non_forked/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_in = 1$/;"	v
g:haskell_indent_guard	sources_non_forked/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_guard = 2$/;"	v
isInBlock	sources_non_forked/vim-polyglot/indent/haskell.vim	/^function! s:isInBlock(hlstack)$/;"	f
stripComment	sources_non_forked/vim-polyglot/indent/haskell.vim	/^function! s:stripComment(line)$/;"	f
isSYN	sources_non_forked/vim-polyglot/indent/haskell.vim	/^function! s:isSYN(grp, line, col)$/;"	f
getNesting	sources_non_forked/vim-polyglot/indent/haskell.vim	/^function! s:getNesting(hlstack)$/;"	f
getHLStack	sources_non_forked/vim-polyglot/indent/haskell.vim	/^function! s:getHLStack(line, col)$/;"	f
indentMatching	sources_non_forked/vim-polyglot/indent/haskell.vim	/^function! s:indentMatching(char)$/;"	f
indentGuard	sources_non_forked/vim-polyglot/indent/haskell.vim	/^function! s:indentGuard(pos, prevline)$/;"	f
GetHaskellIndent	sources_non_forked/vim-polyglot/indent/haskell.vim	/^function! GetHaskellIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/slime.vim	/^let b:did_indent = 1$/;"	v
s:attributes	sources_non_forked/vim-polyglot/indent/slime.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:tag	sources_non_forked/vim-polyglot/indent/slime.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
g:haml_self_closing_tags	sources_non_forked/vim-polyglot/indent/slime.vim	/^  let g:haml_self_closing_tags = 'meta|link|img|hr|br'$/;"	v
GetSlimeIndent	sources_non_forked/vim-polyglot/indent/slime.vim	/^function! GetSlimeIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let b:did_indent = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:cpo_save = &cpo$/;"	v
s:js_keywords	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:js_keywords = '^\\s*\\(break\\|case\\|catch\\|continue\\|debugger\\|default\\|delete\\|do\\|else\\|finally\\|for\\|function\\|if\\|in\\|instanceof\\|new\\|return\\|switch\\|this\\|throw\\|try\\|typeof\\|var\\|void\\|while\\|with\\)'$/;"	v
s:syng_strcom	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:syng_strcom = 'string\\|regex\\|comment\\c'$/;"	v
s:syng_string	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:syng_string = 'regex\\c'$/;"	v
s:syng_multiline	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:syng_multiline = 'comment\\c'$/;"	v
s:syng_linecom	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:syng_linecom = 'linecomment\\c'$/;"	v
s:skip_expr	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~ '".s:syng_strcom."'"$/;"	v
s:line_term	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:continuation_regex	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:continuation_regex = '\\%([\\\\*+\/.:]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)' . s:line_term$/;"	v
s:msl_regex	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:msl_regex = '\\%([\\\\*+\/.:([]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)' . s:line_term$/;"	v
s:one_line_scope_regex	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:one_line_scope_regex = '\\<\\%(if\\|else\\|for\\|while\\)\\>[^{;]*' . s:line_term$/;"	v
s:block_regex	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:block_regex = '\\%([{[]\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\)\\=' . s:line_term$/;"	v
s:var_stmt	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:var_stmt = '^\\s*var'$/;"	v
s:comma_first	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:comma_first = '^\\s*,'$/;"	v
s:comma_last	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:comma_last = ',\\s*$'$/;"	v
s:ternary	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:ternary = '^\\s\\+[?|:]'$/;"	v
s:ternary_q	sources_non_forked/vim-polyglot/indent/solidity.vim	/^let s:ternary_q = '^\\s\\+?'$/;"	v
IsInStringOrComment	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInString	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInMultilineComment	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:IsInMultilineComment(lnum, col)$/;"	f
IsLineComment	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:IsLineComment(lnum, col)$/;"	f
PrevNonBlankNonString	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
GetMSL	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:GetMSL(lnum, in_one_line_scope)$/;"	f
RemoveTrailingComments	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:RemoveTrailingComments(content)$/;"	f
InMultiVarStatement	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:InMultiVarStatement(lnum)$/;"	f
GetVarIndent	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:GetVarIndent(lnum)$/;"	f
LineHasOpeningBrackets	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
Match	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:Match(lnum, regex)$/;"	f
IndentWithContinuation	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:IndentWithContinuation(lnum, ind, width)$/;"	f
InOneLineScope	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:InOneLineScope(lnum)$/;"	f
ExitingOneLineScope	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function s:ExitingOneLineScope(lnum)$/;"	f
GetSolidityIndent	sources_non_forked/vim-polyglot/indent/solidity.vim	/^function GetSolidityIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/haml.vim	/^let b:did_indent = 1$/;"	v
s:attributes	sources_non_forked/vim-polyglot/indent/haml.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:tag	sources_non_forked/vim-polyglot/indent/haml.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
g:haml_self_closing_tags	sources_non_forked/vim-polyglot/indent/haml.vim	/^  let g:haml_self_closing_tags = 'base|link|meta|br|hr|img|input'$/;"	v
GetHamlIndent	sources_non_forked/vim-polyglot/indent/haml.vim	/^function! GetHamlIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/fsharp.vim	/^let b:did_indent = 1$/;"	v
GetLineWithoutFullComment	sources_non_forked/vim-polyglot/indent/fsharp.vim	/^function! s:GetLineWithoutFullComment(lnum)$/;"	f
GetInd	sources_non_forked/vim-polyglot/indent/fsharp.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
FindPair	sources_non_forked/vim-polyglot/indent/fsharp.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindLet	sources_non_forked/vim-polyglot/indent/fsharp.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
GetFsharpIndent	sources_non_forked/vim-polyglot/indent/fsharp.vim	/^function! GetFsharpIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/nix.vim	/^let b:did_indent = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/nix.vim	/^let s:cpo_save = &cpo$/;"	v
s:skip_syntax	sources_non_forked/vim-polyglot/indent/nix.vim	/^let s:skip_syntax = '\\%(Comment\\|String\\)$'$/;"	v
s:binding_open	sources_non_forked/vim-polyglot/indent/nix.vim	/^let s:binding_open = '\\%(\\<let\\>\\|{\\)'$/;"	v
s:binding_close	sources_non_forked/vim-polyglot/indent/nix.vim	/^let s:binding_close = '\\%(\\<in\\>\\|}\\)'$/;"	v
s:block_open	sources_non_forked/vim-polyglot/indent/nix.vim	/^let s:block_open  = '\\%({\\|[\\)'$/;"	v
s:block_close	sources_non_forked/vim-polyglot/indent/nix.vim	/^let s:block_close = '\\%(}\\|]\\)'$/;"	v
GetNixIndent	sources_non_forked/vim-polyglot/indent/nix.vim	/^function! GetNixIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/perl.vim	/^let b:did_indent = 1$/;"	v
b:indent_use_syntax	sources_non_forked/vim-polyglot/indent/perl.vim	/^let b:indent_use_syntax = has("syntax")$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/perl.vim	/^let s:cpo_save = &cpo$/;"	v
GetPerlIndent	sources_non_forked/vim-polyglot/indent/perl.vim	/^function! GetPerlIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/scala.vim	/^let b:did_indent = 1$/;"	v
s:defMatcher	sources_non_forked/vim-polyglot/indent/scala.vim	/^let s:defMatcher = '\\%(\\%(private\\|protected\\)\\%(\\[[^\\]]*\\]\\)\\?\\s\\+\\|abstract\\s\\+\\|override\\s\\+\\)*\\<def\\>'$/;"	v
s:funcNameMatcher	sources_non_forked/vim-polyglot/indent/scala.vim	/^let s:funcNameMatcher = '\\w\\+'$/;"	v
s:typeSpecMatcher	sources_non_forked/vim-polyglot/indent/scala.vim	/^let s:typeSpecMatcher = '\\%(\\s*\\[\\_[^\\]]*\\]\\)'$/;"	v
s:defArgMatcher	sources_non_forked/vim-polyglot/indent/scala.vim	/^let s:defArgMatcher = '\\%((\\_.\\{-})\\)'$/;"	v
s:returnTypeMatcher	sources_non_forked/vim-polyglot/indent/scala.vim	/^let s:returnTypeMatcher = '\\%(:\\s*\\w\\+' . s:typeSpecMatcher . '\\?\\)'$/;"	v
g:fullDefMatcher	sources_non_forked/vim-polyglot/indent/scala.vim	/^let g:fullDefMatcher = '^\\s*' . s:defMatcher . '\\s\\+' . s:funcNameMatcher . '\\s*' . s:typeSpecMatcher . '\\?\\s*' . s:defArgMatcher . '\\?\\s*' . s:returnTypeMatcher . '\\?\\s*[={]'$/;"	v
scala#ConditionalConfirm	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#ConditionalConfirm(msg)$/;"	f
scala#GetLine	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#GetLine(lnum)$/;"	f
scala#CountBrackets	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#CountBrackets(line, openBracket, closedBracket)$/;"	f
scala#CountParens	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#CountParens(line)$/;"	f
scala#CountCurlies	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#CountCurlies(line)$/;"	f
scala#LineEndsInIncomplete	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#LineEndsInIncomplete(line)$/;"	f
scala#LineIsAClosingXML	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#LineIsAClosingXML(line)$/;"	f
scala#LineCompletesXML	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesXML(lnum, line)$/;"	f
scala#IsParentCase	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#IsParentCase()$/;"	f
scala#CurlyMatcher	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#CurlyMatcher()$/;"	f
scala#GetLineAndColumnThatMatchesCurly	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#GetLineAndColumnThatMatchesCurly()$/;"	f
scala#GetLineAndColumnThatMatchesParen	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#GetLineAndColumnThatMatchesParen()$/;"	f
scala#GetLineAndColumnThatMatchesBracket	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#GetLineAndColumnThatMatchesBracket(openBracket, closedBracket)$/;"	f
scala#GetLineThatMatchesCurly	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#GetLineThatMatchesCurly()$/;"	f
scala#GetLineThatMatchesParen	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#GetLineThatMatchesParen()$/;"	f
scala#GetLineThatMatchesBracket	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#GetLineThatMatchesBracket(openBracket, closedBracket)$/;"	f
scala#NumberOfBraceGroups	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#NumberOfBraceGroups(line)$/;"	f
scala#MatchesIncompleteDefValr	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#MatchesIncompleteDefValr(line)$/;"	f
scala#LineIsCompleteIf	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#LineIsCompleteIf(line)$/;"	f
scala#LineCompletesIfElse	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesIfElse(lnum, line)$/;"	f
scala#GetPrevCodeLine	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#GetPrevCodeLine(lnum)$/;"	f
scala#InvertBracketType	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#InvertBracketType(openBracket, closedBracket)$/;"	f
scala#Testhelper	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#Testhelper(lnum, line, openBracket, closedBracket, iteration)$/;"	f
scala#Test	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#Test(lnum, line, openBracket, closedBracket)$/;"	f
scala#LineCompletesDefValr	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesDefValr(lnum, line)$/;"	f
scala#SpecificLineCompletesBrackets	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#SpecificLineCompletesBrackets(lnum, openBracket, closedBracket)$/;"	f
scala#LineCompletesBrackets	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesBrackets(openBracket, closedBracket)$/;"	f
GetScalaIndent	sources_non_forked/vim-polyglot/indent/scala.vim	/^function! GetScalaIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let b:did_indent = 1$/;"	v
g:ruby_indent_access_modifier_style	sources_non_forked/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_access_modifier_style = 'normal'$/;"	v
g:ruby_indent_assignment_style	sources_non_forked/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_assignment_style = 'hanging'$/;"	v
g:ruby_indent_block_style	sources_non_forked/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_block_style = 'expression'$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:syng_string	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:syng_string =$/;"	v
s:syng_stringdoc	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:syng_stringdoc = s:syng_string + ['Documentation']$/;"	v
s:syng_strcom	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:syng_strcom = s:syng_stringdoc +$/;"	v
s:skip_expr	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:skip_expr =$/;"	v
s:ruby_indent_keywords	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:ruby_indent_keywords =$/;"	v
s:ruby_deindent_keywords	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:ruby_deindent_keywords =$/;"	v
s:end_start_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:end_start_regex =$/;"	v
s:end_middle_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\|when\\|elsif\\):\\@!\\>'$/;"	v
s:end_end_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_skip_expr	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:non_bracket_continuation_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:non_bracket_continuation_regex =$/;"	v
s:continuation_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:continuation_regex =$/;"	v
s:continuable_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:continuable_regex =$/;"	v
s:bracket_continuation_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:dot_continuation_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:dot_continuation_regex = '%\\@<!\\.\\s*\\%(#.*\\)\\=$'$/;"	v
s:backslash_continuation_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:backslash_continuation_regex = '%\\@<!\\\\\\s*$'$/;"	v
s:bracket_switch_continuation_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:bracket_switch_continuation_regex = '^\\([^(]\\+\\zs).\\+\\)\\+'.s:continuation_regex$/;"	v
s:splat_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:splat_regex = '[[,(]\\s*\\*\\s*\\%(#.*\\)\\=$'$/;"	v
s:access_modifier_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:access_modifier_regex = '\\C^\\s*\\%(public\\|protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:indent_access_modifier_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:indent_access_modifier_regex = '\\C^\\s*\\%(protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:block_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:block_regex =$/;"	v
s:block_continuation_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:leading_operator_regex	sources_non_forked/vim-polyglot/indent/ruby.vim	/^let s:leading_operator_regex = '^\\s*[.]'$/;"	v
GetRubyIndent	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! GetRubyIndent(...) abort$/;"	f
AccessModifier	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:AccessModifier(cline_info) abort$/;"	f
ClosingBracketOnEmptyLine	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:ClosingBracketOnEmptyLine(cline_info) abort$/;"	f
BlockComment	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:BlockComment(cline_info) abort$/;"	f
DeindentingKeyword	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:DeindentingKeyword(cline_info) abort$/;"	f
MultilineStringOrLineComment	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:MultilineStringOrLineComment(cline_info) abort$/;"	f
ClosingHeredocDelimiter	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:ClosingHeredocDelimiter(cline_info) abort$/;"	f
LeadingOperator	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:LeadingOperator(cline_info) abort$/;"	f
EmptyInsideString	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:EmptyInsideString(pline_info) abort$/;"	f
StartOfFile	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:StartOfFile(pline_info) abort$/;"	f
AfterAccessModifier	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:AfterAccessModifier(pline_info) abort$/;"	f
ContinuedLine	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:ContinuedLine(pline_info) abort$/;"	f
AfterBlockOpening	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:AfterBlockOpening(pline_info) abort$/;"	f
AfterLeadingOperator	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:AfterLeadingOperator(pline_info) abort$/;"	f
AfterHangingSplat	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:AfterHangingSplat(pline_info) abort$/;"	f
AfterUnbalancedBracket	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:AfterUnbalancedBracket(pline_info) abort$/;"	f
AfterEndKeyword	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:AfterEndKeyword(pline_info) abort$/;"	f
AfterIndentKeyword	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:AfterIndentKeyword(pline_info) abort$/;"	f
PreviousNotMSL	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:PreviousNotMSL(msl_info) abort$/;"	f
IndentingKeywordInMSL	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:IndentingKeywordInMSL(msl_info) abort$/;"	f
ContinuedHangingOperator	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:ContinuedHangingOperator(msl_info) abort$/;"	f
IsInRubyGroup	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:IsInRubyGroup(groups, lnum, col) abort$/;"	f
IsInStringOrComment	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:IsInStringOrComment(lnum, col) abort$/;"	f
IsInString	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:IsInString(lnum, col) abort$/;"	f
IsInStringOrDocumentation	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:IsInStringOrDocumentation(lnum, col) abort$/;"	f
IsInStringDelimiter	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:IsInStringDelimiter(lnum, col) abort$/;"	f
IsAssignment	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:IsAssignment(str, pos) abort$/;"	f
PrevNonBlankNonString	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:PrevNonBlankNonString(lnum) abort$/;"	f
GetMSL	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:GetMSL(lnum) abort$/;"	f
ExtraBrackets	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:ExtraBrackets(lnum) abort$/;"	f
Match	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:Match(lnum, regex) abort$/;"	f
FindContainingClass	sources_non_forked/vim-polyglot/indent/ruby.vim	/^function! s:FindContainingClass() abort$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/ls.vim	/^let b:did_indent = 1$/;"	v
s:INDENT_AFTER_KEYWORD	sources_non_forked/vim-polyglot/indent/ls.vim	/^let s:INDENT_AFTER_KEYWORD = '^\\%(if\\|unless\\|else\\|for\\|while\\|until\\|'$/;"	v
s:INDENT_AFTER_OPERATOR	sources_non_forked/vim-polyglot/indent/ls.vim	/^let s:INDENT_AFTER_OPERATOR = '\\%([([{:=]\\|[-=]>\\)$'$/;"	v
s:CONTINUATION	sources_non_forked/vim-polyglot/indent/ls.vim	/^let s:CONTINUATION = '\\<\\%(is\\|isnt\\|and\\|or\\|do\\)\\>$'$/;"	v
s:CONTINUATION_BLOCK	sources_non_forked/vim-polyglot/indent/ls.vim	/^let s:CONTINUATION_BLOCK = '[([{:=]$'$/;"	v
s:DOT_ACCESS	sources_non_forked/vim-polyglot/indent/ls.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:OUTDENT_AFTER	sources_non_forked/vim-polyglot/indent/ls.vim	/^let s:OUTDENT_AFTER = '^\\%(return\\|break\\|continue\\|throw\\)\\>'$/;"	v
s:COMPOUND_ASSIGNMENT	sources_non_forked/vim-polyglot/indent/ls.vim	/^let s:COMPOUND_ASSIGNMENT = '[:=]\\s*\\%(if\\|unless\\|for\\|while\\|until\\|'$/;"	v
s:POSTFIX_CONDITION	sources_non_forked/vim-polyglot/indent/ls.vim	/^let s:POSTFIX_CONDITION = '\\S\\s\\+\\zs\\<\\%(if\\|unless\\)\\>'$/;"	v
s:SINGLE_LINE_ELSE	sources_non_forked/vim-polyglot/indent/ls.vim	/^let s:SINGLE_LINE_ELSE = '^else\\s\\+\\%(\\<\\%(if\\|unless\\)\\>\\)\\@!'$/;"	v
s:MAX_LOOKBACK	sources_non_forked/vim-polyglot/indent/ls.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
SyntaxName	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:SyntaxName(linenum, col)$/;"	f
IsComment	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:IsComment(linenum, col)$/;"	f
IsString	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:IsString(linenum, col)$/;"	f
IsCommentOrString	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:IsCommentOrString(linenum, col)$/;"	f
IsCommentLine	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:IsCommentLine(linenum)$/;"	f
SmartSearch	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:SmartSearch(linenum, regex)$/;"	f
ShouldSkip	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:ShouldSkip(startlinenum, linenum, col)$/;"	f
MaxLookback	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:MaxLookback(startlinenum)$/;"	f
SkipExpr	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:SkipExpr(startlinenum)$/;"	f
SearchPair	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:SearchPair(start, end)$/;"	f
GetMatch	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:GetMatch(curline)$/;"	f
GetPrevNormalLine	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:GetPrevNormalLine(startlinenum)$/;"	f
GetTrimmedLine	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:GetTrimmedLine(linenum)$/;"	f
GetLiveScriptIndent	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! s:GetLiveScriptIndent(curlinenum)$/;"	f
GetLiveScriptIndent	sources_non_forked/vim-polyglot/indent/ls.vim	/^function! GetLiveScriptIndent(curlinenum)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/json.vim	/^let b:did_indent = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/json.vim	/^let s:cpo_save = &cpo$/;"	v
s:line_term	sources_non_forked/vim-polyglot/indent/json.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:block_regex	sources_non_forked/vim-polyglot/indent/json.vim	/^let s:block_regex = '\\%({\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\)\\=' . s:line_term$/;"	v
IsInString	sources_non_forked/vim-polyglot/indent/json.vim	/^function s:IsInString(lnum, col)$/;"	f
PrevNonBlankNonString	sources_non_forked/vim-polyglot/indent/json.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
LineHasOpeningBrackets	sources_non_forked/vim-polyglot/indent/json.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
Match	sources_non_forked/vim-polyglot/indent/json.vim	/^function s:Match(lnum, regex)$/;"	f
GetJSONIndent	sources_non_forked/vim-polyglot/indent/json.vim	/^function GetJSONIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/python.vim	/^let b:did_indent = 1$/;"	v
g:python_pep8_indent_multiline_string	sources_non_forked/vim-polyglot/indent/python.vim	/^    let g:python_pep8_indent_multiline_string = 0$/;"	v
s:block_rules	sources_non_forked/vim-polyglot/indent/python.vim	/^let s:block_rules = {$/;"	v
s:block_rules_multiple	sources_non_forked/vim-polyglot/indent/python.vim	/^let s:block_rules_multiple = {$/;"	v
s:paren_pairs	sources_non_forked/vim-polyglot/indent/python.vim	/^let s:paren_pairs = {'()': 50, '[]': 100, '{}': 1000}$/;"	v
b:control_statement	sources_non_forked/vim-polyglot/indent/python.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except|cdef|cpdef)>'$/;"	v
b:control_statement	sources_non_forked/vim-polyglot/indent/python.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except)>'$/;"	v
s:stop_statement	sources_non_forked/vim-polyglot/indent/python.vim	/^let s:stop_statement = '^\\s*\\(break\\|continue\\|raise\\|return\\|pass\\)\\>'$/;"	v
s:skip_special_chars	sources_non_forked/vim-polyglot/indent/python.vim	/^let s:skip_special_chars = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
s:skip_after_opening_paren	sources_non_forked/vim-polyglot/indent/python.vim	/^let s:skip_after_opening_paren = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
is_concealed	sources_non_forked/vim-polyglot/indent/python.vim	/^function! s:is_concealed(line, col)$/;"	f
s:skip_special_chars	sources_non_forked/vim-polyglot/indent/python.vim	/^    let s:skip_special_chars .= '|| s:is_concealed(line("."), col("."))'$/;"	v
s:skip_search	sources_non_forked/vim-polyglot/indent/python.vim	/^let s:skip_search = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
sw	sources_non_forked/vim-polyglot/indent/python.vim	/^    function! s:sw()$/;"	f
sw	sources_non_forked/vim-polyglot/indent/python.vim	/^    function! s:sw()$/;"	f
pair_sort	sources_non_forked/vim-polyglot/indent/python.vim	/^function! s:pair_sort(x, y)$/;"	f
find_opening_paren	sources_non_forked/vim-polyglot/indent/python.vim	/^function! s:find_opening_paren(...)$/;"	f
find_start_of_multiline_statement	sources_non_forked/vim-polyglot/indent/python.vim	/^function! s:find_start_of_multiline_statement(lnum)$/;"	f
find_start_of_block	sources_non_forked/vim-polyglot/indent/python.vim	/^function! s:find_start_of_block(lnum, types, multiple)$/;"	f
match_expr_on_line	sources_non_forked/vim-polyglot/indent/python.vim	/^function! s:match_expr_on_line(expr, lnum, start, ...)$/;"	f
indent_like_opening_paren	sources_non_forked/vim-polyglot/indent/python.vim	/^function! s:indent_like_opening_paren(lnum)$/;"	f
indent_like_block	sources_non_forked/vim-polyglot/indent/python.vim	/^function! s:indent_like_block(lnum)$/;"	f
indent_like_previous_line	sources_non_forked/vim-polyglot/indent/python.vim	/^function! s:indent_like_previous_line(lnum)$/;"	f
is_dedented_already	sources_non_forked/vim-polyglot/indent/python.vim	/^function! s:is_dedented_already(current, base)$/;"	f
is_python_string	sources_non_forked/vim-polyglot/indent/python.vim	/^function! s:is_python_string(lnum, ...)$/;"	f
GetPythonPEPIndent	sources_non_forked/vim-polyglot/indent/python.vim	/^function! GetPythonPEPIndent(lnum)$/;"	f
s:cpo_save	sources_non_forked/vim-polyglot/indent/applescript.vim	/^let s:cpo_save=&cpo$/;"	v
GetAppleScriptIndent	sources_non_forked/vim-polyglot/indent/applescript.vim	/^func! GetAppleScriptIndent()$/;"	f
returnAppleScriptIndent	sources_non_forked/vim-polyglot/indent/applescript.vim	/^func! s:returnAppleScriptIndent()$/;"	f
prev_non_connected_line	sources_non_forked/vim-polyglot/indent/applescript.vim	/^func! s:prev_non_connected_line(line)$/;"	f
doesOrderConnect	sources_non_forked/vim-polyglot/indent/applescript.vim	/^func! s:doesOrderConnect(text)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let b:did_indent = 1$/;"	v
s:DEFAULT_LEVEL	sources_non_forked/vim-polyglot/indent/coffee.vim	/^  let s:DEFAULT_LEVEL = '-1'$/;"	v
s:DEFAULT_LEVEL	sources_non_forked/vim-polyglot/indent/coffee.vim	/^  let s:DEFAULT_LEVEL = 'indent(prevnlnum)'$/;"	v
s:BEGIN_BLOCK_KEYWORD	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:BEGIN_BLOCK_KEYWORD = '\\C^\\%(if\\|unless\\|else\\|for\\|while\\|until\\|'$/;"	v
s:COMPOUND_EXPRESSION	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:COMPOUND_EXPRESSION = '\\C\\%([^-]-\\|[^+]+\\|[^\/]\/\\|[:=*%&|^<>]\\)\\s*'$/;"	v
s:BEGIN_BLOCK	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:BEGIN_BLOCK = s:BEGIN_BLOCK_KEYWORD . '\\|' . s:COMPOUND_EXPRESSION$/;"	v
s:BEGIN_BLOCK_OP	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:BEGIN_BLOCK_OP = '[([{:=]$'$/;"	v
s:FUNCTION	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:FUNCTION = '[-=]>$'$/;"	v
s:CONTINUATION_OP	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:CONTINUATION_OP = '\\C\\%(\\<\\%(is\\|isnt\\|and\\|or\\)\\>\\|'$/;"	v
s:CONTINUATION	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:CONTINUATION = s:CONTINUATION_OP . '\\|' . s:BEGIN_BLOCK_OP$/;"	v
s:BRACKET_CONTINUATION	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:BRACKET_CONTINUATION = '^\\s*[}\\])]\\s*' . s:CONTINUATION_OP$/;"	v
s:DOT_ACCESS	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:BREAK_BLOCK_OP	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:BREAK_BLOCK_OP = '\\C^\\%(return\\|break\\|continue\\|throw\\)\\>'$/;"	v
s:POSTFIX_CONDITION	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:POSTFIX_CONDITION = '\\C\\S\\s\\+\\zs\\<\\%(if\\|unless\\|when\\|while\\|until\\)\\>'$/;"	v
s:CONTAINED_THEN	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:CONTAINED_THEN = '\\C[(\\[].\\{-}\\<then\\>.\\{-\\}[)\\]]'$/;"	v
s:ELSE_COND	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:ELSE_COND = '\\C^\\s*else\\s\\+\\<\\%(if\\|unless\\)\\>'$/;"	v
s:SINGLE_LINE_ELSE	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:SINGLE_LINE_ELSE = '\\C^else\\s\\+\\%(\\<\\%(if\\|unless\\)\\>\\)\\@!'$/;"	v
s:KEYWORD_PAIRS	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:KEYWORD_PAIRS = [$/;"	v
s:BRACKET_PAIRS	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:BRACKET_PAIRS = {']': '\\[', '}': '{', ')': '('}$/;"	v
s:MAX_LOOKBACK	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
s:SYNTAX_STRING	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:SYNTAX_STRING = 'coffee\\%(String\\|AssignString\\|Embed\\|Regex\\|Heregex\\|'$/;"	v
s:SYNTAX_COMMENT	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:SYNTAX_COMMENT = 'coffee\\%(Comment\\|BlockComment\\|HeregexComment\\)'$/;"	v
s:SYNTAX_STRING_COMMENT	sources_non_forked/vim-polyglot/indent/coffee.vim	/^let s:SYNTAX_STRING_COMMENT = s:SYNTAX_STRING . '\\|' . s:SYNTAX_COMMENT$/;"	v
s:ShiftWidth	sources_non_forked/vim-polyglot/indent/coffee.vim	/^  let s:ShiftWidth = function('shiftwidth')$/;"	v
ShiftWidth	sources_non_forked/vim-polyglot/indent/coffee.vim	/^  function! s:ShiftWidth()$/;"	f
SyntaxName	sources_non_forked/vim-polyglot/indent/coffee.vim	/^function! s:SyntaxName(lnum, col)$/;"	f
IsComment	sources_non_forked/vim-polyglot/indent/coffee.vim	/^function! s:IsComment(lnum, col)$/;"	f
IsString	sources_non_forked/vim-polyglot/indent/coffee.vim	/^function! s:IsString(lnum, col)$/;"	f
IsCommentOrString	sources_non_forked/vim-polyglot/indent/coffee.vim	/^function! s:IsCommentOrString(lnum, col)$/;"	f
SearchCode	sources_non_forked/vim-polyglot/indent/coffee.vim	/^function! s:SearchCode(lnum, regex)$/;"	f
GetPrevNormalLine	sources_non_forked/vim-polyglot/indent/coffee.vim	/^function! s:GetPrevNormalLine(startlnum)$/;"	f
SearchPair	sources_non_forked/vim-polyglot/indent/coffee.vim	/^function! s:SearchPair(startlnum, lookback, skip, open, close)$/;"	f
ShouldSkip	sources_non_forked/vim-polyglot/indent/coffee.vim	/^function! s:ShouldSkip(startlnum, lnum, col)$/;"	f
SearchMatchingKeyword	sources_non_forked/vim-polyglot/indent/coffee.vim	/^function! s:SearchMatchingKeyword(startlnum, open, close)$/;"	f
GetTrimmedLine	sources_non_forked/vim-polyglot/indent/coffee.vim	/^function! s:GetTrimmedLine(lnum)$/;"	f
GetDefaultPolicy	sources_non_forked/vim-polyglot/indent/coffee.vim	/^function! s:GetDefaultPolicy(curlnum)$/;"	f
GetCoffeeIndent	sources_non_forked/vim-polyglot/indent/coffee.vim	/^function! GetCoffeeIndent(curlnum)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/eruby.vim	/^let b:did_indent = get(b:, 'did_indent', 1) . '.eruby'$/;"	v
b:html_indent_usestate	sources_non_forked/vim-polyglot/indent/eruby.vim	/^let b:html_indent_usestate = 0$/;"	v
b:eruby_subtype_indentexpr	sources_non_forked/vim-polyglot/indent/eruby.vim	/^let b:eruby_subtype_indentexpr = &l:indentexpr$/;"	v
s:cpo_sav	sources_non_forked/vim-polyglot/indent/eruby.vim	/^let s:cpo_sav = &cpo$/;"	v
GetErubyIndent	sources_non_forked/vim-polyglot/indent/eruby.vim	/^function! GetErubyIndent(...)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/markdown.vim	/^let b:did_indent = 1$/;"	v
IsMkdCode	sources_non_forked/vim-polyglot/indent/markdown.vim	/^function! s:IsMkdCode(lnum)$/;"	f
IsLiStart	sources_non_forked/vim-polyglot/indent/markdown.vim	/^function! s:IsLiStart(line)$/;"	f
IsHeaderLine	sources_non_forked/vim-polyglot/indent/markdown.vim	/^function! s:IsHeaderLine(line)$/;"	f
IsBlankLine	sources_non_forked/vim-polyglot/indent/markdown.vim	/^function! s:IsBlankLine(line)$/;"	f
PrevNonBlank	sources_non_forked/vim-polyglot/indent/markdown.vim	/^function! s:PrevNonBlank(lnum)$/;"	f
GetMarkdownIndent	sources_non_forked/vim-polyglot/indent/markdown.vim	/^function GetMarkdownIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/racket.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	sources_non_forked/vim-polyglot/indent/racket.vim	/^let b:undo_indent = "setl ai< si<"$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/erlang.vim	/^  let b:did_indent = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/erlang.vim	/^let s:cpo_save = &cpo$/;"	v
Log	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:Log(s)$/;"	f
CalcVCol	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:CalcVCol(line, first_index, last_index, vcol, tabstop)$/;"	f
GetTokensFromLine	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:GetTokensFromLine(line, string_continuation, atom_continuation,$/;"	f
GetIndtokenAtCol	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:GetIndtokenAtCol(indtokens, col)$/;"	f
Push	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:Push(stack, token)$/;"	f
Pop	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:Pop(stack)$/;"	f
s:all_tokens	sources_non_forked/vim-polyglot/indent/erlang.vim	/^let s:all_tokens = {}$/;"	v
s:file_name	sources_non_forked/vim-polyglot/indent/erlang.vim	/^let s:file_name = ''$/;"	v
s:last_changedtick	sources_non_forked/vim-polyglot/indent/erlang.vim	/^let s:last_changedtick = -1$/;"	v
ClearTokenCacheIfNeeded	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:ClearTokenCacheIfNeeded()$/;"	f
TokenizeLine	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:TokenizeLine(lnum, direction)$/;"	f
FindIndToken	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:FindIndToken(lnum, dir)$/;"	f
PrevIndToken	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:PrevIndToken(lnum, i)$/;"	f
NextIndToken	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:NextIndToken(lnum, i)$/;"	f
IndentError	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:IndentError(msg, token, stack)$/;"	f
UnexpectedToken	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:UnexpectedToken(token, stack)$/;"	f
g:erlang_unexpected_token_indent	sources_non_forked/vim-polyglot/indent/erlang.vim	/^  let g:erlang_unexpected_token_indent = -1$/;"	v
IsLineStringContinuation	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:IsLineStringContinuation(lnum)$/;"	f
IsLineAtomContinuation	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:IsLineAtomContinuation(lnum)$/;"	f
IsCatchStandalone	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:IsCatchStandalone(lnum, i)$/;"	f
BeginElementFoundIfEmpty	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:BeginElementFoundIfEmpty(stack, token, curr_vcol, stored_vcol, sw)$/;"	f
BeginElementFound	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:BeginElementFound(stack, token, curr_vcol, stored_vcol, end_token, sw)$/;"	f
BeginningOfClauseFound	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:BeginningOfClauseFound(stack, token, stored_vcol, lnum, i)$/;"	f
g:erlang_indent_searchpair_timeout	sources_non_forked/vim-polyglot/indent/erlang.vim	/^let g:erlang_indent_searchpair_timeout = 2000$/;"	v
SearchPair	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:SearchPair(lnum, curr_col, start, middle, end)$/;"	f
SearchEndPair	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:SearchEndPair(lnum, curr_col)$/;"	f
ErlangCalcIndent	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:ErlangCalcIndent(lnum, stack)$/;"	f
ErlangCalcIndent2	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! s:ErlangCalcIndent2(lnum, stack)$/;"	f
ErlangIndent	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! ErlangIndent()$/;"	f
ErlangShowTokensInLine	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! ErlangShowTokensInLine(line)$/;"	f
ErlangShowTokensInCurrentLine	sources_non_forked/vim-polyglot/indent/erlang.vim	/^function! ErlangShowTokensInCurrentLine()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/lua.vim	/^let b:did_indent = 1$/;"	v
s:open_patt	sources_non_forked/vim-polyglot/indent/lua.vim	/^let s:open_patt = '\\C\\%(\\<\\%(function\\|if\\|repeat\\|do\\)\\>\\|(\\|{\\)'$/;"	v
s:middle_patt	sources_non_forked/vim-polyglot/indent/lua.vim	/^let s:middle_patt = '\\C\\<\\%(else\\|elseif\\)\\>'$/;"	v
s:close_patt	sources_non_forked/vim-polyglot/indent/lua.vim	/^let s:close_patt = '\\C\\%(\\<\\%(end\\|until\\)\\>\\|)\\|}\\)'$/;"	v
s:anon_func_start	sources_non_forked/vim-polyglot/indent/lua.vim	/^let s:anon_func_start = '\\S\\+\\s*[({].*\\<function\\s*(.*)\\s*$'$/;"	v
s:anon_func_end	sources_non_forked/vim-polyglot/indent/lua.vim	/^let s:anon_func_end = '\\<end\\%(\\s*[)}]\\)\\+'$/;"	v
s:skip_expr	sources_non_forked/vim-polyglot/indent/lua.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~# 'luaComment\\\\|luaString'"$/;"	v
IsInCommentOrString	sources_non_forked/vim-polyglot/indent/lua.vim	/^function s:IsInCommentOrString(lnum, col)$/;"	f
PrevLineOfCode	sources_non_forked/vim-polyglot/indent/lua.vim	/^function s:PrevLineOfCode(lnum)$/;"	f
GetContents	sources_non_forked/vim-polyglot/indent/lua.vim	/^function s:GetContents(lnum)$/;"	f
GetLuaIndent	sources_non_forked/vim-polyglot/indent/lua.vim	/^function GetLuaIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/ps1.vim	/^let b:did_indent = 1$/;"	v
#	sources_non_forked/vim-polyglot/indent/ps1.vim	/^inoremap <buffer> # X#$/;"	m
b:undo_indent	sources_non_forked/vim-polyglot/indent/ps1.vim	/^let b:undo_indent = "setl si<"$/;"	v
b:liquid_subtype_indentexpr	sources_non_forked/vim-polyglot/indent/liquid.vim	/^let b:liquid_subtype_indentexpr = &l:indentexpr$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/liquid.vim	/^let b:did_indent = 1$/;"	v
count	sources_non_forked/vim-polyglot/indent/liquid.vim	/^function! s:count(string,pattern)$/;"	f
GetLiquidIndent	sources_non_forked/vim-polyglot/indent/liquid.vim	/^function! GetLiquidIndent(...)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/tex.vim	/^let b:did_indent = 1$/;"	v
s:list_envs	sources_non_forked/vim-polyglot/indent/tex.vim	/^let s:list_envs = ['itemize', 'enumerate', 'description']$/;"	v
s:open_pat	sources_non_forked/vim-polyglot/indent/tex.vim	/^let s:open_pat = '\\\\\\@<!\\%(\\\\begin\\|\\\\left\\a\\@!\\|\\\\(\\|\\\\\\[\\|{\\)'$/;"	v
s:close_pat	sources_non_forked/vim-polyglot/indent/tex.vim	/^let s:close_pat = '\\\\\\@<!\\%(\\\\end\\|\\\\right\\a\\@!\\|\\\\)\\|\\\\\\]\\|}\\)'$/;"	v
s:list_open_pat	sources_non_forked/vim-polyglot/indent/tex.vim	/^let s:list_open_pat = '\\\\\\@<!\\\\begin{\\%(' . join(s:list_envs, '\\|') . '\\)}'$/;"	v
s:list_close_pat	sources_non_forked/vim-polyglot/indent/tex.vim	/^let s:list_close_pat	= '\\\\\\@<!\\\\end{\\%(' . join(s:list_envs, '\\|') . '\\)}'$/;"	v
CountMatches	sources_non_forked/vim-polyglot/indent/tex.vim	/^function! s:CountMatches(str, pat)$/;"	f
LatexBox_TexIndent	sources_non_forked/vim-polyglot/indent/tex.vim	/^function! LatexBox_TexIndent()$/;"	f
Latexbox_CallIndent	sources_non_forked/vim-polyglot/indent/tex.vim	/^function! Latexbox_CallIndent()$/;"	f
LatexBox_Completion	sources_non_forked/vim-polyglot/indent/tex.vim	/^	augroup LatexBox_Completion$/;"	a
b:did_indent	sources_non_forked/vim-polyglot/indent/elixir.vim	/^let b:did_indent = 1$/;"	v
elixir#indent	sources_non_forked/vim-polyglot/indent/elixir.vim	/^function! elixir#indent(lnum)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/kotlin.vim	/^let b:did_indent = 1$/;"	v
GetKotlinIndent	sources_non_forked/vim-polyglot/indent/kotlin.vim	/^function! GetKotlinIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/ember-script.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/qml.vim	/^let b:did_indent = 1$/;"	v
Trim	sources_non_forked/vim-polyglot/indent/qml.vim	/^function! Trim(line)$/;"	f
GetJsIndent	sources_non_forked/vim-polyglot/indent/qml.vim	/^function! GetJsIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/terraform.vim	/^let b:did_indent = 1$/;"	v
TerraformIndent	sources_non_forked/vim-polyglot/indent/terraform.vim	/^function! TerraformIndent(lnum)$/;"	f
GetGoHTMLTmplIndent	sources_non_forked/vim-polyglot/indent/gohtmltmpl.vim	/^function! GetGoHTMLTmplIndent(lnum)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/mako.vim	/^let b:did_indent = 1$/;"	v
IsInsidePythonBlock	sources_non_forked/vim-polyglot/indent/mako.vim	/^function IsInsidePythonBlock(startline)$/;"	f
GetMakoIndent	sources_non_forked/vim-polyglot/indent/mako.vim	/^function GetMakoIndent()$/;"	f
HtmlIndentPush	sources_non_forked/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentPush(tag)$/;"	f
MakoIndentPush	sources_non_forked/vim-polyglot/indent/mako.vim	/^fun! <SID>MakoIndentPush(tag)$/;"	f
MatchCount	sources_non_forked/vim-polyglot/indent/mako.vim	/^fun! <SID>MatchCount(expr, pat)$/;"	f
HtmlIndentOpen	sources_non_forked/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentOpen(lnum)$/;"	f
HtmlIndentClose	sources_non_forked/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentClose(lnum)$/;"	f
MakoIndentOpen	sources_non_forked/vim-polyglot/indent/mako.vim	/^fun! <SID>MakoIndentOpen(lnum)$/;"	f
MakoIndentClose	sources_non_forked/vim-polyglot/indent/mako.vim	/^fun! <SID>MakoIndentClose(lnum)$/;"	f
HtmlIndentOpenAlt	sources_non_forked/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentOpenAlt(lnum)$/;"	f
HtmlIndentCloseAlt	sources_non_forked/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentCloseAlt(lnum)$/;"	f
HtmlIndentSum	sources_non_forked/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentSum(lnum, style)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^let b:did_indent = 1$/;"	v
s:beflet	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^let s:beflet = '^\\s*\\(initializer\\|method\\|try\\)\\|\\(\\<\\(begin\\|do\\|else\\|in\\|then\\|try\\)\\|->\\|<-\\|=\\|;\\|(\\)\\s*$'$/;"	v
s:letpat	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^let s:letpat = '^\\s*\\(let\\|type\\|module\\|class\\|open\\|exception\\|val\\|include\\|external\\)\\>'$/;"	v
s:letlim	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^let s:letlim = '\\(\\<\\(sig\\|struct\\)\\|;;\\)\\s*$'$/;"	v
s:lim	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^let s:lim = '^\\s*\\(exception\\|external\\|include\\|let\\|module\\|open\\|type\\|val\\)\\>'$/;"	v
s:module	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^let s:module = '\\<\\%(begin\\|sig\\|struct\\|object\\)\\>'$/;"	v
s:obj	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^let s:obj = '^\\s*\\(constraint\\|inherit\\|initializer\\|method\\|val\\)\\>\\|\\<\\(object\\|object\\s*(.*)\\)\\s*$'$/;"	v
s:type	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^let s:type = '^\\s*\\%(class\\|let\\|type\\)\\>.*='$/;"	v
GetLineWithoutFullComment	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^function! s:GetLineWithoutFullComment(lnum)$/;"	f
GetInd	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
FindPair	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindLet	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
GetOCamlIndent	sources_non_forked/vim-polyglot/indent/ocaml.vim	/^function! GetOCamlIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/dart.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	sources_non_forked/vim-polyglot/indent/dart.vim	/^let b:undo_indent = 'setl cin< cino<'$/;"	v
DartIndent	sources_non_forked/vim-polyglot/indent/dart.vim	/^function! DartIndent()$/;"	f
s:htmlindent	sources_non_forked/vim-polyglot/indent/blade.vim	/^let s:htmlindent = &indentexpr$/;"	v
s:phpindent	sources_non_forked/vim-polyglot/indent/blade.vim	/^let s:phpindent = &indentexpr$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/blade.vim	/^let b:did_indent = 1$/;"	v
s:directives_start	sources_non_forked/vim-polyglot/indent/blade.vim	/^let s:directives_start = 'if\\|else\\|unless\\|for\\|while\\|empty\\|push\\|section\\|can\\|hasSection\\|verbatim\\|php\\|' .$/;"	v
s:directives_end	sources_non_forked/vim-polyglot/indent/blade.vim	/^let s:directives_end = 'else\\|end\\|empty\\|show\\|stop\\|append\\|overwrite'$/;"	v
s:directives_start	sources_non_forked/vim-polyglot/indent/blade.vim	/^    let s:directives_start .= '\\|' . join(keys(g:blade_custom_directives_pairs), '\\|')$/;"	v
s:directives_end	sources_non_forked/vim-polyglot/indent/blade.vim	/^    let s:directives_end .= '\\|' . join(values(g:blade_custom_directives_pairs), '\\|')$/;"	v
IsStartingDelimiter	sources_non_forked/vim-polyglot/indent/blade.vim	/^function! s:IsStartingDelimiter(lnum)$/;"	f
GetBladeIndent	sources_non_forked/vim-polyglot/indent/blade.vim	/^function! GetBladeIndent()$/;"	f
s:skipPatterns	sources_non_forked/vim-polyglot/indent/julia.vim	/^let s:skipPatterns = '\\<julia\\%(Comprehension\\%(For\\|If\\)\\|RangeEnd\\|Comment[LM]\\|\\%([bsv]\\|ip\\|big\\|MIME\\|Shell\\|Printf\\|Doc\\)\\=String\\|RegEx\\|SymbolS\\?\\)\\>'$/;"	v
JuliaMatch	sources_non_forked/vim-polyglot/indent/julia.vim	/^function JuliaMatch(lnum, str, regex, st, ...)$/;"	f
GetJuliaNestingStruct	sources_non_forked/vim-polyglot/indent/julia.vim	/^function GetJuliaNestingStruct(lnum, ...)$/;"	f
GetJuliaNestingBrackets	sources_non_forked/vim-polyglot/indent/julia.vim	/^function GetJuliaNestingBrackets(lnum, c)$/;"	f
s:bracketBlocks	sources_non_forked/vim-polyglot/indent/julia.vim	/^let s:bracketBlocks = '\\<julia\\%(\\%(\\%(Printf\\)\\?Par\\|SqBra\\|CurBra\\)Block\\|ParBlockInRange\\|StringVars\\%(Par\\|SqBra\\|CurBra\\)\\|Dollar\\%(Par\\|SqBra\\)\\|QuotedParBlockS\\?\\)\\>'$/;"	v
IsInBrackets	sources_non_forked/vim-polyglot/indent/julia.vim	/^function IsInBrackets(lnum, c)$/;"	f
LastBlockIndent	sources_non_forked/vim-polyglot/indent/julia.vim	/^function LastBlockIndent(lnum)$/;"	f
GetJuliaIndent	sources_non_forked/vim-polyglot/indent/julia.vim	/^function GetJuliaIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/caddyfile.vim	/^let b:did_indent = 1$/;"	v
sw	sources_non_forked/vim-polyglot/indent/caddyfile.vim	/^	function! s:sw()$/;"	f
sw	sources_non_forked/vim-polyglot/indent/caddyfile.vim	/^	function! s:sw()$/;"	f
GetCaddyfileIndent	sources_non_forked/vim-polyglot/indent/caddyfile.vim	/^function! GetCaddyfileIndent(lnum)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/slim.vim	/^let b:did_indent = 1$/;"	v
s:attributes	sources_non_forked/vim-polyglot/indent/slim.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:tag	sources_non_forked/vim-polyglot/indent/slim.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
g:haml_self_closing_tags	sources_non_forked/vim-polyglot/indent/slim.vim	/^  let g:haml_self_closing_tags = 'meta|link|img|hr|br'$/;"	v
GetSlimIndent	sources_non_forked/vim-polyglot/indent/slim.vim	/^function! GetSlimIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/stylus.vim	/^let b:did_indent = 1$/;"	v
prevnonblanknoncomment	sources_non_forked/vim-polyglot/indent/stylus.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
count_braces	sources_non_forked/vim-polyglot/indent/stylus.vim	/^function s:count_braces(lnum, count_open)$/;"	f
GetStylusIndent	sources_non_forked/vim-polyglot/indent/stylus.vim	/^function! GetStylusIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/opencl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/typescript.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	sources_non_forked/vim-polyglot/indent/typescript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/typescript.vim	/^let s:cpo_save = &cpo$/;"	v
sw	sources_non_forked/vim-polyglot/indent/typescript.vim	/^  function s:sw()$/;"	f
sw	sources_non_forked/vim-polyglot/indent/typescript.vim	/^  function s:sw()$/;"	f
GetPair	sources_non_forked/vim-polyglot/indent/typescript.vim	/^  function s:GetPair(start,end,flags,skip,time,...)$/;"	f
GetPair	sources_non_forked/vim-polyglot/indent/typescript.vim	/^  function s:GetPair(start,end,flags,skip,...)$/;"	f
s:syng_strcom	sources_non_forked/vim-polyglot/indent/typescript.vim	/^let s:syng_strcom = 'string\\|comment\\|regex\\|special\\|doc\\|template\\%(braces\\)\\@!'$/;"	v
s:syng_str	sources_non_forked/vim-polyglot/indent/typescript.vim	/^let s:syng_str = 'string\\|template\\|special'$/;"	v
s:syng_com	sources_non_forked/vim-polyglot/indent/typescript.vim	/^let s:syng_com = 'comment\\|doc'$/;"	v
s:skip_expr	sources_non_forked/vim-polyglot/indent/typescript.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),0),'name') =~? '".s:syng_strcom."'"$/;"	v
skip_func	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:skip_func()$/;"	f
alternatePair	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:alternatePair(stop)$/;"	f
save_pos	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:save_pos(f,...)$/;"	f
syn_at	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:syn_at(l,c)$/;"	f
looking_at	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:looking_at()$/;"	f
token	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:token()$/;"	f
previous_token	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:previous_token()$/;"	f
others	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:others(p)$/;"	f
tern_skip	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:tern_skip(p)$/;"	f
tern_col	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:tern_col(p)$/;"	f
label_col	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:label_col()$/;"	f
s:opfirst	sources_non_forked/vim-polyglot/indent/typescript.vim	/^let s:opfirst = '^' . get(g:,'typescript_opfirst',$/;"	v
s:continuation	sources_non_forked/vim-polyglot/indent/typescript.vim	/^let s:continuation = get(g:,'typescript_continuation',$/;"	v
continues	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:continues(ln,con)$/;"	f
Trim	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:Trim(ln)$/;"	f
PrevCodeLine	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:PrevCodeLine(lnum)$/;"	f
Balanced	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:Balanced(lnum)$/;"	f
OneScope	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:OneScope(lnum)$/;"	f
iscontOne	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:iscontOne(i,num,cont)$/;"	f
IsBlock	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function s:IsBlock()$/;"	f
GetTypescriptIndent	sources_non_forked/vim-polyglot/indent/typescript.vim	/^function GetTypescriptIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/vala.vim	/^let b:did_indent = 1$/;"	v
GetValaIndent	sources_non_forked/vim-polyglot/indent/vala.vim	/^function GetValaIndent(lnum)$/;"	f
b:ran_once	sources_non_forked/vim-polyglot/indent/twig.vim	/^let b:ran_once = 1$/;"	v
s:baseIndentExpr	sources_non_forked/vim-polyglot/indent/twig.vim	/^let s:baseIndentExpr=&indentexpr$/;"	v
GetTwigIndent	sources_non_forked/vim-polyglot/indent/twig.vim	/^fun! GetTwigIndent(currentLineNumber)$/;"	f
CallBaseIndent	sources_non_forked/vim-polyglot/indent/twig.vim	/^function! s:CallBaseIndent()$/;"	f
FindPreviousOpenStructure	sources_non_forked/vim-polyglot/indent/twig.vim	/^function! s:FindPreviousOpenStructure(lineNumber)$/;"	f
StartStructure	sources_non_forked/vim-polyglot/indent/twig.vim	/^function! s:StartStructure(name)$/;"	f
EndStructure	sources_non_forked/vim-polyglot/indent/twig.vim	/^function! s:EndStructure(name)$/;"	f
Map	sources_non_forked/vim-polyglot/indent/twig.vim	/^function! s:Map(Fun, list)$/;"	f
BuildStructures	sources_non_forked/vim-polyglot/indent/twig.vim	/^fun! s:BuildStructures()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/gitconfig.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	sources_non_forked/vim-polyglot/indent/gitconfig.vim	/^let b:undo_indent = 'setl ai< inde< indk<'$/;"	v
GetGitconfigIndent	sources_non_forked/vim-polyglot/indent/gitconfig.vim	/^function! GetGitconfigIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/cucumber.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	sources_non_forked/vim-polyglot/indent/cucumber.vim	/^let b:undo_indent = 'setl ai< inde< indk<'$/;"	v
syn	sources_non_forked/vim-polyglot/indent/cucumber.vim	/^function! s:syn(lnum)$/;"	f
GetCucumberIndent	sources_non_forked/vim-polyglot/indent/cucumber.vim	/^function! GetCucumberIndent()$/;"	f
b:undo_indent	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^let b:undo_indent = 'setlocal '.join([$/;"	v
s:TRUE	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^let s:TRUE = !0$/;"	v
s:FALSE	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^let s:FALSE = 0$/;"	v
IsBeginBlockByStr	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^function! IsBeginBlockByStr(str)$/;"	f
IsEndBlockByStr	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^function! IsEndBlockByStr(str)$/;"	f
IsDoubleCoronByStr	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^function! IsDoubleCoronByStr(str)$/;"	f
IsReturnByStr	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^function! IsReturnByStr(str)$/;"	f
IsIfStatementByStr	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^function! IsIfStatementByStr(str)$/;"	f
IsInsideOfBlockByNum	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^function! IsInsideOfBlockByNum(line_num)$/;"	f
AddIndentByInd	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^function! AddIndentByInd(indent)$/;"	f
UnIndentByInd	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^function! UnIndentByInd(indent)$/;"	f
GetAutoHotkeyIndent	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^function! GetAutoHotkeyIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/autohotkey.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/arduino.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	sources_non_forked/vim-polyglot/indent/arduino.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/proto.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	sources_non_forked/vim-polyglot/indent/proto.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/swift.vim	/^let b:did_indent = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/swift.vim	/^let s:cpo_save = &cpo$/;"	v
NumberOfMatches	sources_non_forked/vim-polyglot/indent/swift.vim	/^function! s:NumberOfMatches(char, string, index)$/;"	f
SyntaxNameAtPosition	sources_non_forked/vim-polyglot/indent/swift.vim	/^function! s:SyntaxNameAtPosition(line, column)$/;"	f
SyntaxName	sources_non_forked/vim-polyglot/indent/swift.vim	/^function! s:SyntaxName()$/;"	f
IsExcludedFromIndentAtPosition	sources_non_forked/vim-polyglot/indent/swift.vim	/^function! s:IsExcludedFromIndentAtPosition(line, column)$/;"	f
IsExcludedFromIndent	sources_non_forked/vim-polyglot/indent/swift.vim	/^function! s:IsExcludedFromIndent()$/;"	f
IsSyntaxNameExcludedFromIndent	sources_non_forked/vim-polyglot/indent/swift.vim	/^function! s:IsSyntaxNameExcludedFromIndent(name)$/;"	f
IsCommentLine	sources_non_forked/vim-polyglot/indent/swift.vim	/^function! s:IsCommentLine(lnum)$/;"	f
SwiftIndent	sources_non_forked/vim-polyglot/indent/swift.vim	/^function! SwiftIndent(...)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/clojure.vim	/^let b:did_indent = 1$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/indent/clojure.vim	/^let s:save_cpo = &cpo$/;"	v
b:undo_indent	sources_non_forked/vim-polyglot/indent/clojure.vim	/^let b:undo_indent = 'setlocal autoindent< smartindent< expandtab< softtabstop< shiftwidth< indentexpr< indentkeys<'$/;"	v
g:clojure_maxlines	sources_non_forked/vim-polyglot/indent/clojure.vim	/^		let g:clojure_maxlines = 100$/;"	v
g:clojure_fuzzy_indent	sources_non_forked/vim-polyglot/indent/clojure.vim	/^		let g:clojure_fuzzy_indent = 1$/;"	v
g:clojure_fuzzy_indent_patterns	sources_non_forked/vim-polyglot/indent/clojure.vim	/^		let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let']$/;"	v
g:clojure_fuzzy_indent_blacklist	sources_non_forked/vim-polyglot/indent/clojure.vim	/^		let g:clojure_fuzzy_indent_blacklist = ['-fn$', '\\v^with-%(meta|out-str|loading-context)$']$/;"	v
g:clojure_special_indent_words	sources_non_forked/vim-polyglot/indent/clojure.vim	/^		let g:clojure_special_indent_words = 'deftype,defrecord,reify,proxy,extend-type,extend-protocol,letfn'$/;"	v
g:clojure_align_multiline_strings	sources_non_forked/vim-polyglot/indent/clojure.vim	/^		let g:clojure_align_multiline_strings = 0$/;"	v
g:clojure_align_subforms	sources_non_forked/vim-polyglot/indent/clojure.vim	/^		let g:clojure_align_subforms = 0$/;"	v
syn_id_name	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:syn_id_name()$/;"	f
ignored_region	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:ignored_region()$/;"	f
current_char	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:current_char()$/;"	f
current_word	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:current_word()$/;"	f
is_paren	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:is_paren()$/;"	f
match_one	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:match_one(patterns, string)$/;"	f
match_pairs	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:match_pairs(open, close, stopat)$/;"	f
clojure_check_for_string_worker	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:clojure_check_for_string_worker()$/;"	f
check_for_string	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:check_for_string()$/;"	f
strip_namespace_and_macro_chars	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:strip_namespace_and_macro_chars(word)$/;"	f
clojure_is_method_special_case_worker	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:clojure_is_method_special_case_worker(position)$/;"	f
is_method_special_case	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:is_method_special_case(position)$/;"	f
is_reader_conditional_special_case	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:is_reader_conditional_special_case(position)$/;"	f
bracket_type	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:bracket_type(char)$/;"	f
clojure_indent_pos	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! s:clojure_indent_pos()$/;"	f
GetClojureIndent	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	function! GetClojureIndent()$/;"	f
b:undo_indent	sources_non_forked/vim-polyglot/indent/clojure.vim	/^	let b:undo_indent .= '| setlocal lisp<'$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
b:eelixir_subtype_indentexpr	sources_non_forked/vim-polyglot/indent/eelixir.vim	/^let b:eelixir_subtype_indentexpr = &l:indentexpr$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/eelixir.vim	/^let b:did_indent = 1$/;"	v
GetEelixirIndent	sources_non_forked/vim-polyglot/indent/eelixir.vim	/^function! GetEelixirIndent(...)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/html.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	sources_non_forked/vim-polyglot/indent/html.vim	/^let b:undo_indent = "setlocal inde< indk<"$/;"	v
b:hi_indent	sources_non_forked/vim-polyglot/indent/html.vim	/^let b:hi_indent = {"lnum": -1}$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/html.vim	/^let s:cpo_save = &cpo$/;"	v
HtmlIndent_CheckUserSettings	sources_non_forked/vim-polyglot/indent/html.vim	/^func! HtmlIndent_CheckUserSettings()$/;"	f
b:hi_lasttick	sources_non_forked/vim-polyglot/indent/html.vim	/^let b:hi_lasttick = 0$/;"	v
b:hi_newstate	sources_non_forked/vim-polyglot/indent/html.vim	/^let b:hi_newstate = {}$/;"	v
s:countonly	sources_non_forked/vim-polyglot/indent/html.vim	/^let s:countonly = 0$/;"	v
s:indent_tags	sources_non_forked/vim-polyglot/indent/html.vim	/^let s:indent_tags = {}$/;"	v
s:endtags	sources_non_forked/vim-polyglot/indent/html.vim	/^let s:endtags = [0,0,0,0,0,0,0]   " long enough for the highest index$/;"	v
AddITags	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:AddITags(tags, taglist)$/;"	f
RemoveITags	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:RemoveITags(tags, taglist)$/;"	f
AddBlockTag	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:AddBlockTag(tag, id, ...)$/;"	f
HtmlIndent_IsOpenTag	sources_non_forked/vim-polyglot/indent/html.vim	/^func! HtmlIndent_IsOpenTag(tagname)$/;"	f
get_tag	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:get_tag(tagname)$/;"	f
CountITags	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:CountITags(text)$/;"	f
CountTagsAndState	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:CountTagsAndState(text)$/;"	f
CheckTag	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:CheckTag(itag)$/;"	f
CheckBlockTag	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:CheckBlockTag(blocktag, ind)$/;"	f
CheckCustomTag	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:CheckCustomTag(ctag)$/;"	f
GetScriptType	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:GetScriptType(str)$/;"	f
FreshState	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:FreshState(lnum)$/;"	f
Alien2	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:Alien2()$/;"	f
Alien3	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:Alien3()$/;"	f
Alien4	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:Alien4()$/;"	f
CSSIndent	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:CSSIndent()$/;"	f
CssUnfinished	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:CssUnfinished(text)$/;"	f
CssFirstUnfinished	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:CssFirstUnfinished(lnum, min_lnum)$/;"	f
CssPrevNonComment	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:CssPrevNonComment(lnum, stopline)$/;"	f
HtmlIndent_CountBraces	sources_non_forked/vim-polyglot/indent/html.vim	/^func! HtmlIndent_CountBraces(lnum)$/;"	f
Alien5	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:Alien5()$/;"	f
Alien6	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:Alien6()$/;"	f
HtmlIndent_FindTagStart	sources_non_forked/vim-polyglot/indent/html.vim	/^func! HtmlIndent_FindTagStart(lnum)$/;"	f
HtmlIndent_FindStartTag	sources_non_forked/vim-polyglot/indent/html.vim	/^func! HtmlIndent_FindStartTag()$/;"	f
HtmlIndent_FindTagEnd	sources_non_forked/vim-polyglot/indent/html.vim	/^func! HtmlIndent_FindTagEnd()$/;"	f
InsideTag	sources_non_forked/vim-polyglot/indent/html.vim	/^func! s:InsideTag(foundHtmlString)$/;"	f
HtmlIndent	sources_non_forked/vim-polyglot/indent/html.vim	/^func! HtmlIndent()$/;"	f
s:save_cpo	sources_non_forked/vim-polyglot/indent/ansible.vim	/^let s:save_cpo = &cpo$/;"	v
s:comment	sources_non_forked/vim-polyglot/indent/ansible.vim	/^let s:comment = '\\v^\\s*#' " # comment$/;"	v
s:array_entry	sources_non_forked/vim-polyglot/indent/ansible.vim	/^let s:array_entry = '\\v^\\s*-\\s' " - foo$/;"	v
s:named_module_entry	sources_non_forked/vim-polyglot/indent/ansible.vim	/^let s:named_module_entry = '\\v^\\s*-\\s*(name|hosts|role):\\s*\\S' " - name: 'do stuff'$/;"	v
s:dictionary_entry	sources_non_forked/vim-polyglot/indent/ansible.vim	/^let s:dictionary_entry = '\\v^\\s*[^:-]+:\\s*$' " with_items:$/;"	v
s:key_value	sources_non_forked/vim-polyglot/indent/ansible.vim	/^let s:key_value = '\\v^\\s*[^:-]+:\\s*\\S' " apt: name=package$/;"	v
s:scalar_value	sources_non_forked/vim-polyglot/indent/ansible.vim	/^let s:scalar_value = '\\v:\\s*[>|\\|]\\s*$' " shell: >$/;"	v
GetAnsibleIndent	sources_non_forked/vim-polyglot/indent/ansible.vim	/^function GetAnsibleIndent(lnum)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/cmake.vim	/^let b:did_indent = 1$/;"	v
s:keepcpo	sources_non_forked/vim-polyglot/indent/cmake.vim	/^let s:keepcpo= &cpo$/;"	v
CMakeGetIndent	sources_non_forked/vim-polyglot/indent/cmake.vim	/^fun! CMakeGetIndent(lnum)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let b:did_indent = 1$/;"	v
g:crystal_indent_access_modifier_style	sources_non_forked/vim-polyglot/indent/crystal.vim	/^  let g:crystal_indent_access_modifier_style = 'normal'$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:cpo_save = &cpo$/;"	v
s:syng_strcom	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:syng_strcom = '\\<crystal\\%(Regexp\\|RegexpDelimiter\\|RegexpEscape' .$/;"	v
s:syng_string	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:syng_string =$/;"	v
s:syng_stringdoc	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:syng_stringdoc =$/;"	v
s:skip_expr	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:skip_expr =$/;"	v
s:crystal_indent_keywords	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:crystal_indent_keywords =$/;"	v
s:crystal_deindent_keywords	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:crystal_deindent_keywords =$/;"	v
s:end_start_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:end_start_regex =$/;"	v
s:end_middle_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:end_middle_regex =$/;"	v
s:end_end_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>\\|{%\\s*\\<\\%(end\\)\\>'$/;"	v
s:end_skip_expr	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:non_bracket_continuation_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:non_bracket_continuation_regex = '\\%([\\\\.,:*\/%+]\\|\\<and\\|\\<or\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:continuation_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:continuation_regex =$/;"	v
s:continuable_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:continuable_regex =$/;"	v
s:bracket_continuation_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:bracket_switch_continuation_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:bracket_switch_continuation_regex = '^\\([^(]\\+\\zs).\\+\\)\\+'.s:continuation_regex$/;"	v
s:splat_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:splat_regex = '[[,(]\\s*\\*\\s*\\%(#.*\\)\\=$'$/;"	v
s:block_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:block_regex =$/;"	v
s:block_continuation_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:leading_operator_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:leading_operator_regex = '^\\s*[.]'$/;"	v
s:access_modifier_regex	sources_non_forked/vim-polyglot/indent/crystal.vim	/^let s:access_modifier_regex = '\\C^\\s*\\%(public\\|protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
IsInStringOrComment	sources_non_forked/vim-polyglot/indent/crystal.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInString	sources_non_forked/vim-polyglot/indent/crystal.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInStringOrDocumentation	sources_non_forked/vim-polyglot/indent/crystal.vim	/^function s:IsInStringOrDocumentation(lnum, col)$/;"	f
IsInStringDelimiter	sources_non_forked/vim-polyglot/indent/crystal.vim	/^function s:IsInStringDelimiter(lnum, col)$/;"	f
PrevNonBlankNonString	sources_non_forked/vim-polyglot/indent/crystal.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
GetMSL	sources_non_forked/vim-polyglot/indent/crystal.vim	/^function s:GetMSL(lnum)$/;"	f
ExtraBrackets	sources_non_forked/vim-polyglot/indent/crystal.vim	/^function s:ExtraBrackets(lnum)$/;"	f
Match	sources_non_forked/vim-polyglot/indent/crystal.vim	/^function s:Match(lnum, regex)$/;"	f
FindContainingClass	sources_non_forked/vim-polyglot/indent/crystal.vim	/^function! s:FindContainingClass()$/;"	f
GetCrystalIndent	sources_non_forked/vim-polyglot/indent/crystal.vim	/^function GetCrystalIndent(...)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/go.vim	/^let b:did_indent = 1$/;"	v
sw	sources_non_forked/vim-polyglot/indent/go.vim	/^  func s:sw()$/;"	f
sw	sources_non_forked/vim-polyglot/indent/go.vim	/^  func s:sw()$/;"	f
GoIndent	sources_non_forked/vim-polyglot/indent/go.vim	/^function! GoIndent(lnum)$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/graphql.vim	/^let b:did_indent = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/indent/graphql.vim	/^let s:cpo_save = &cpoptions$/;"	v
InString	sources_non_forked/vim-polyglot/indent/graphql.vim	/^function s:InString(lnum, col)$/;"	f
GetGraphQLIndent	sources_non_forked/vim-polyglot/indent/graphql.vim	/^function GetGraphQLIndent()$/;"	f
b:did_indent	sources_non_forked/vim-polyglot/indent/nginx.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/indent/plantuml.vim	/^let b:did_indent = 1$/;"	v
s:incIndent	sources_non_forked/vim-polyglot/indent/plantuml.vim	/^let s:incIndent =$/;"	v
s:decIndent	sources_non_forked/vim-polyglot/indent/plantuml.vim	/^let s:decIndent = '^\\s*\\%(end\\|else\\|}\\)'$/;"	v
GetPlantUMLIndent	sources_non_forked/vim-polyglot/indent/plantuml.vim	/^function! GetPlantUMLIndent(...) abort$/;"	f
insidePlantUMLTags	sources_non_forked/vim-polyglot/indent/plantuml.vim	/^function! s:insidePlantUMLTags(lnum) abort$/;"	f
g:jsx_ext_required	sources_non_forked/vim-polyglot/config.vim	/^  let g:jsx_ext_required = 0$/;"	v
g:vim_json_syntax_conceal	sources_non_forked/vim-polyglot/config.vim	/^  let g:vim_json_syntax_conceal = 0$/;"	v
g:filetype_euphoria	sources_non_forked/vim-polyglot/config.vim	/^let g:filetype_euphoria = 'elixir'$/;"	v
filetypedetect	sources_non_forked/vim-polyglot/config.vim	/^augroup filetypedetect$/;"	a
g:python_highlight_all	sources_non_forked/vim-polyglot/config.vim	/^let g:python_highlight_all = 1$/;"	v
filetypedetect	sources_non_forked/vim-polyglot/config.vim	/^augroup filetypedetect$/;"	a
g:graphql_javascript_tags	sources_non_forked/vim-polyglot/config.vim	/^  let g:graphql_javascript_tags = ['gql', 'graphql', 'Relay.QL']$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/mma.vim	/^let b:did_ftplugin = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/ftplugin/mma.vim	/^let s:cpo_save = &cpo$/;"	v
RandomID	sources_non_forked/vim-polyglot/ftplugin/mma.vim	/^	function! RandomID()$/;"	f
Test	sources_non_forked/vim-polyglot/ftplugin/mma.vim	/^	function! Test()$/;"	f
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^let b:did_ftplugin = 1$/;"	v
g:elm_jump_to_error	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^	let g:elm_jump_to_error = 0$/;"	v
g:elm_make_output_file	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^	let g:elm_make_output_file = 'elm.js'$/;"	v
g:elm_make_show_warnings	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^	let g:elm_make_show_warnings = 0$/;"	v
g:elm_syntastic_show_warnings	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^	let g:elm_syntastic_show_warnings = 0$/;"	v
g:elm_format_autosave	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^	let g:elm_format_autosave = 1$/;"	v
g:elm_format_fail_silently	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^    let g:elm_format_fail_silently = 0$/;"	v
g:elm_setup_keybindings	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^	let g:elm_setup_keybindings = 1$/;"	v
ElmMake	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^command -buffer -nargs=? -complete=file ElmMake call elm#Make(<f-args>)$/;"	c
ElmMakeMain	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^command -buffer ElmMakeMain call elm#Make("Main.elm")$/;"	c
ElmTest	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^command -buffer -nargs=? -complete=file ElmTest call elm#Test(<f-args>)$/;"	c
ElmRepl	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^command -buffer ElmRepl call elm#Repl()$/;"	c
ElmErrorDetail	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^command -buffer ElmErrorDetail call elm#ErrorDetail()$/;"	c
ElmShowDocs	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^command -buffer ElmShowDocs call elm#ShowDocs()$/;"	c
ElmBrowseDocs	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^command -buffer ElmBrowseDocs call elm#BrowseDocs()$/;"	c
ElmFormat	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^command -buffer ElmFormat call elm#Format()$/;"	c
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^let b:undo_ftplugin = "$/;"	v
<LocalLeader>m	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^  nmap <buffer> <LocalLeader>m <Plug>(elm-make)$/;"	m
<LocalLeader>b	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^  nmap <buffer> <LocalLeader>b <Plug>(elm-make-main)$/;"	m
<LocalLeader>t	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^  nmap <buffer> <LocalLeader>t <Plug>(elm-test)$/;"	m
<LocalLeader>r	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^  nmap <buffer> <LocalLeader>r <Plug>(elm-repl)$/;"	m
<LocalLeader>e	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^  nmap <buffer> <LocalLeader>e <Plug>(elm-error-detail)$/;"	m
<LocalLeader>d	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^  nmap <buffer> <LocalLeader>d <Plug>(elm-show-docs)$/;"	m
<LocalLeader>w	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^  nmap <buffer> <LocalLeader>w <Plug>(elm-browse-docs)$/;"	m
gf	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^nmap <buffer> gf :call elm#util#GoToModule(expand('<cfile>'))<CR>$/;"	m
elmFormat	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^  augroup elmFormat$/;"	a
GetElmFilename	sources_non_forked/vim-polyglot/ftplugin/elm.vim	/^function! GetElmFilename(word)$/;"	f
s:PS	sources_non_forked/vim-polyglot/ftplugin/purescript.vim	/^let s:PS = []$/;"	v
InitPureScript	sources_non_forked/vim-polyglot/ftplugin/purescript.vim	/^fun! InitPureScript()$/;"	f
[[	sources_non_forked/vim-polyglot/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> [[ :call search('^<\\(template\\<Bar>script\\<Bar>style\\)', 'bW')<CR>$/;"	m
]]	sources_non_forked/vim-polyglot/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> ]] :call search('^<\\(template\\<Bar>script\\<Bar>style\\)', 'W')<CR>$/;"	m
[]	sources_non_forked/vim-polyglot/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> [] :call search('^<\/\\(template\\<Bar>script\\<Bar>style\\)', 'bW')<CR>$/;"	m
][	sources_non_forked/vim-polyglot/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> ][ :call search('^<\/\\(template\\<Bar>script\\<Bar>style\\)', 'W')<CR>$/;"	m
b:ale_linter_aliases	sources_non_forked/vim-polyglot/ftplugin/vue.vim	/^let b:ale_linter_aliases = ['vue', 'javascript']$/;"	v
b:ale_linters	sources_non_forked/vim-polyglot/ftplugin/vue.vim	/^let b:ale_linters = ['eslint']$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/ftplugin/pug.vim	/^let s:save_cpo = &cpo$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/pug.vim	/^let s:undo_ftplugin = ""$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/pug.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/pug.vim	/^let s:match_words = ""$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/pug.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/pug.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/pug.vim	/^  let s:match_words = b:match_words$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/pug.vim	/^  let b:browsefilter="Pug Files (*.pug)\\t*.pug\\n" . s:browsefilter$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/pug.vim	/^  let b:match_words = s:match_words$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/pug.vim	/^let b:undo_ftplugin = "setl cms< com< "$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^let b:did_ftplugin = 1$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^let s:save_cpo = &cpo$/;"	v
rust	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^augroup rust.vim$/;"	a
b:rust_set_style	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^        let b:rust_set_style = 1$/;"	v
b:rust_original_delimitMate_excluded_regions	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^            let b:rust_original_delimitMate_excluded_regions = b:delimitMate_excluded_regions$/;"	v
s:delimitMate_extra_excluded_regions	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^        let s:delimitMate_extra_excluded_regions = ',rustLifetimeCandidate,rustGenericLifetimeCandidate'$/;"	v
b:rust_set_foldmethod	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^        let b:rust_set_foldmethod=1$/;"	v
b:rust_set_conceallevel	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^        let b:rust_set_conceallevel=1$/;"	v
[[	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    nnoremap <silent> <buffer> [[ :call rust#Jump('n', 'Back')<CR>$/;"	m
]]	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    nnoremap <silent> <buffer> ]] :call rust#Jump('n', 'Forward')<CR>$/;"	m
[[	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    onoremap <silent> <buffer> [[ :call rust#Jump('o', 'Back')<CR>$/;"	m
]]	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    onoremap <silent> <buffer> ]] :call rust#Jump('o', 'Forward')<CR>$/;"	m
RustRun	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    command! -nargs=* -complete=file -bang -buffer RustRun call rust#Run(<bang>0, <q-args>)$/;"	c
RustExpand	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    command! -nargs=* -complete=customlist,rust#CompleteExpand -bang -buffer RustExpand call rust#Expand(<bang>0, <q-args>)$/;"	c
RustEmitIr	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    command! -nargs=* -buffer RustEmitIr call rust#Emit("llvm-ir", <q-args>)$/;"	c
RustEmitAsm	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    command! -nargs=* -buffer RustEmitAsm call rust#Emit("asm", <q-args>)$/;"	c
RustPlay	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    command! -range=% RustPlay :call rust#Play(<count>, <line1>, <line2>, <f-args>)$/;"	c
RustFmt	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    command! -buffer RustFmt call rustfmt#Format()$/;"	c
RustFmtRange	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    command! -range -buffer RustFmtRange call rustfmt#FormatRange(<line1>, <line2>)$/;"	c
RustInfo	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    command! -bar RustInfo call rust#debugging#Info()$/;"	c
RustInfoToClipboard	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    command! -bar RustInfoToClipboard call rust#debugging#InfoToClipboard()$/;"	c
RustInfoToFile	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    command! -bar -nargs=1 RustInfoToFile call rust#debugging#InfoToFile(<f-args>)$/;"	c
b:rust_last_rustc_args	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^        let b:rust_last_rustc_args = []$/;"	v
b:rust_last_args	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^        let b:rust_last_args = []$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^    let b:undo_ftplugin = "$/;"	v
b:match_skip	sources_non_forked/vim-polyglot/ftplugin/rust.vim	/^let b:match_skip = 's:comment\\|string\\|rustArrow'$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^let s:save_cpo = &cpo$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^let s:match_words = ""$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^  let s:match_words = b:match_words$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^let b:did_ftplugin = 1$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^  let b:browsefilter="Haml Files (*.haml)\\t*.haml\\nSass Files (*.sass)\\t*.sass\\n" . s:browsefilter$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^  let b:match_words = s:match_words$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/haml.vim	/^let b:undo_ftplugin = "setl cms< com< "$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/nix.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/perl.vim	/^let b:did_ftplugin = 1$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/ftplugin/perl.vim	/^let s:save_cpo = &cpo$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/perl.vim	/^    let b:browsefilter = "Perl Source Files (*.pl)\\t*.pl\\n" .$/;"	v
perlpath	sources_non_forked/vim-polyglot/ftplugin/perl.vim	/^	    let perlpath = system('perl -e "print join(q\/,\/,@INC)"')$/;"	v
perlpath	sources_non_forked/vim-polyglot/ftplugin/perl.vim	/^	    let perlpath = system("perl -e 'print join(q\/,\/,@INC)'")$/;"	v
perlpath	sources_non_forked/vim-polyglot/ftplugin/perl.vim	/^	let perlpath = substitute(perlpath,',.$',',,','')$/;"	v
perlpath	sources_non_forked/vim-polyglot/ftplugin/perl.vim	/^	let perlpath = ".,,"$/;"	v
perlpath	sources_non_forked/vim-polyglot/ftplugin/perl.vim	/^	let perlpath = ".,,"$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/perl.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isk< isf< kp< path<" .$/;"	v
b:match_skip	sources_non_forked/vim-polyglot/ftplugin/perl.vim	/^let b:match_skip = 's:comment\\|string\\|perlQQ\\|perlShellCommand\\|perlHereDoc\\|perlSubstitution\\|perlTranslation\\|perlMatch\\|perlFormatField'$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/perl.vim	/^let b:match_words = '\\<if\\>:\\<elsif\\>:\\<else\\>'$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^let b:did_ftplugin = 1$/;"	v
scala#SanitizeDirForFuzzyFinder	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^    function! scala#SanitizeDirForFuzzyFinder(dir)$/;"	f
scala#GetDirForFuzzyFinder	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^    function! scala#GetDirForFuzzyFinder(from, addon)$/;"	f
scala#GetTestDirForFuzzyFinder	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^    function! scala#GetTestDirForFuzzyFinder(from)$/;"	f
scala#GetMainDirForFuzzyFinder	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^    function! scala#GetMainDirForFuzzyFinder(from)$/;"	f
scala#GetRootDirForFuzzyFinder	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^    function! scala#GetRootDirForFuzzyFinder(from)$/;"	f
<Leader>ft	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^      nnoremap <buffer> <silent> <Leader>ft :FufFile <c-r>=scala#GetTestDirForFuzzyFinder('%:p:h')<cr><cr>$/;"	m
<Leader>fs	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^      nnoremap <buffer> <silent> <Leader>fs :FufFile <c-r>=scala#GetMainDirForFuzzyFinder('%:p:h')<cr><cr>$/;"	m
<Leader>fr	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^      nnoremap <buffer> <silent> <Leader>fr :FufFile <c-r>=scala#GetRootDirForFuzzyFinder('%:p:h')<cr><cr>$/;"	m
CreateOrExpression	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^function! s:CreateOrExpression(keywords)$/;"	f
NextSection	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^function! s:NextSection(backwards)$/;"	f
]]	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^noremap <script> <buffer> <silent> ]] :call <SID>NextSection(0)<cr>$/;"	m
[[	sources_non_forked/vim-polyglot/ftplugin/scala.vim	/^noremap <script> <buffer> <silent> [[ :call <SID>NextSection(1)<cr>$/;"	m
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^let b:did_ftplugin = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
b:match_ignorecase	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let b:match_words =$/;"	v
b:match_skip	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let b:match_skip =$/;"	v
g:ruby_version_paths	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let g:ruby_version_paths = {}$/;"	v
query_path	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^function! s:query_path(root) abort$/;"	f
build_path	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^function! s:build_path(path) abort$/;"	f
s:version_file	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let s:version_file = findfile('.ruby-version', '.;')$/;"	v
b:ruby_version	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^    let b:ruby_version = get(readfile(s:version_file, '', 1), '')$/;"	v
g:ruby_version_paths	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^      let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))$/;"	v
s:ruby_path	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path$/;"	v
s:ruby_paths	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_paths = g:ruby_version_paths[b:ruby_version]$/;"	v
s:ruby_path	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_path = s:build_path(s:ruby_paths)$/;"	v
g:ruby_default_path	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^      let g:ruby_default_path = s:query_path($HOME)$/;"	v
g:ruby_default_path	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^      let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# "." ? "" : v:val')$/;"	v
s:ruby_paths	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_paths = g:ruby_default_path$/;"	v
s:ruby_path	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_path = s:build_path(s:ruby_paths)$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let b:browsefilter = "Ruby Source Files (*.rb)\\t*.rb\\n" .$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^let b:undo_ftplugin = "setl inc= sua= path= tags= fo< com< cms< kp="$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let b:undo_ftplugin .= ' | setl sw< sts< et<'$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let b:undo_ftplugin .= "| setl bexpr="$/;"	v
map	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^function! s:map(mode, flags, map) abort$/;"	f
<Plug><ctag>	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^cmap <buffer><script><expr> <Plug><ctag> substitute(RubyCursorTag(),'^$',"\\022\\027",'')$/;"	m
<Plug><cfile>	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^cmap <buffer><script><expr> <Plug><cfile> substitute(RubyCursorFile(),'^$',"\\022\\006",'')$/;"	m
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^let b:undo_ftplugin .= "| sil! cunmap <buffer> <Plug><ctag>| sil! cunmap <buffer> <Plug><cfile>"$/;"	v
<SID>:	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  nmap <buffer><script> <SID>:  :<C-U>$/;"	m
<SID>c:	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  nmap <buffer><script> <SID>c: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
[m	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','n')<CR>$/;"	m
]m	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','n')<CR>$/;"	m
[M	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','n')<CR>$/;"	m
]M	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','n')<CR>$/;"	m
[[	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'b','n')<CR>$/;"	m
]]	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'','n')<CR>$/;"	m
[]	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'b','n')<CR>$/;"	m
][	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'','n')<CR>$/;"	m
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
im	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>$/;"	m
am	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>$/;"	m
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^    let b:undo_ftplugin = b:undo_ftplugin$/;"	v
iM	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>$/;"	m
aM	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>$/;"	m
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^    let b:undo_ftplugin = b:undo_ftplugin$/;"	v
<SID>tagzv	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^  cmap <buffer><script><expr> <SID>tagzv &foldopen =~# 'tag' ? '<Bar>norm! zv' : ''$/;"	m
g:did_ruby_ftplugin_functions	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^let g:did_ruby_ftplugin_functions = 1$/;"	v
RubyBalloonexpr	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^function! RubyBalloonexpr() abort$/;"	f
searchsyn	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^function! s:searchsyn(pattern, syn, flags, mode) abort$/;"	f
synid	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^function! s:synid() abort$/;"	f
wrap_i	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^function! s:wrap_i(back,forward) abort$/;"	f
wrap_a	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^function! s:wrap_a(back,forward) abort$/;"	f
RubyCursorIdentifier	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^function! RubyCursorIdentifier() abort$/;"	f
RubyCursorTag	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^function! RubyCursorTag() abort$/;"	f
RubyCursorFile	sources_non_forked/vim-polyglot/ftplugin/ruby.vim	/^function! RubyCursorFile() abort$/;"	f
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ls.vim	/^let b:did_ftplugin = 1$/;"	v
livescript_compiler	sources_non_forked/vim-polyglot/ftplugin/ls.vim	/^  let livescript_compiler = 'lsc'$/;"	v
LiveScriptCompileResetVars	sources_non_forked/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileResetVars()$/;"	f
LiveScriptCompileClose	sources_non_forked/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileClose()$/;"	f
LiveScriptCompileUpdate	sources_non_forked/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileUpdate(startline, endline)$/;"	f
LiveScriptCompileWatchUpdate	sources_non_forked/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileWatchUpdate()$/;"	f
LiveScriptCompile	sources_non_forked/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompile(startline, endline, args)$/;"	f
LiveScriptCompileComplete	sources_non_forked/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileComplete(arg, cmdline, cursor)$/;"	f
LiveScriptCompile	sources_non_forked/vim-polyglot/ftplugin/ls.vim	/^\\        LiveScriptCompile call s:LiveScriptCompile(<line1>, <line2>, <q-args>)$/;"	c
LiveScriptRun	sources_non_forked/vim-polyglot/ftplugin/ls.vim	/^command! -range=% -bar LiveScriptRun <line1>,<line2>:w !lsc -sp$/;"	c
AddMailAttachments	sources_non_forked/vim-polyglot/ftplugin/mail_vifm.vim	/^function! s:AddMailAttachments()$/;"	f
HandleRunResults	sources_non_forked/vim-polyglot/ftplugin/mail_vifm.vim	/^function! s:HandleRunResults(exitcode, listf)$/;"	f
<localleader>a	sources_non_forked/vim-polyglot/ftplugin/mail_vifm.vim	/^nnoremap <buffer> <silent> <localleader>a :call <sid>AddMailAttachments()<cr>$/;"	m
LatexBox_GetMainFileName	sources_non_forked/vim-polyglot/ftplugin/latex-box/findmain.vim	/^function! LatexBox_GetMainFileName(...)$/;"	f
g:LatexBox_latexmk_options	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^	let g:LatexBox_latexmk_options = ''$/;"	v
g:LatexBox_latexmk_env	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^	let g:LatexBox_latexmk_env = ''$/;"	v
g:LatexBox_latexmk_async	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^	let g:LatexBox_latexmk_async = 0$/;"	v
g:LatexBox_latexmk_preview_continuously	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^	let g:LatexBox_latexmk_preview_continuously = 0$/;"	v
g:LatexBox_output_type	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^	let g:LatexBox_output_type = 'pdf'$/;"	v
g:LatexBox_autojump	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^	let g:LatexBox_autojump = 0$/;"	v
g:LatexBox_quickfix	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^	let g:LatexBox_quickfix = 1$/;"	v
g:LatexBox_personal_latexmkrc	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^	let g:LatexBox_personal_latexmkrc = 0$/;"	v
g:latexmk_running_pids	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^	let g:latexmk_running_pids = {}$/;"	v
LatexmkSetPID	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! s:LatexmkSetPID(basename, pid)$/;"	f
kill_latexmk_process	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! s:kill_latexmk_process(pid)$/;"	f
kill_all_latexmk_processes	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! s:kill_all_latexmk_processes()$/;"	f
SIDWrap	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! s:SIDWrap(func)$/;"	f
LatexmkCallback	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! s:LatexmkCallback(basename, status)$/;"	f
setup_vim_server	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! s:setup_vim_server()$/;"	f
LatexBox_Latexmk	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! LatexBox_Latexmk(force)$/;"	f
LatexBox_LatexmkClean	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! LatexBox_LatexmkClean(cleanall)$/;"	f
LatexBox_LatexErrors	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! LatexBox_LatexErrors(status, ...)$/;"	f
uniq	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! s:uniq(list)$/;"	f
log_contains_error	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! s:log_contains_error(file)$/;"	f
LatexBox_LatexmkStatus	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! LatexBox_LatexmkStatus(detailed)$/;"	f
LatexBox_LatexmkStop	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^function! LatexBox_LatexmkStop(silent)$/;"	f
Latexmk	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^command! -bang	Latexmk			call LatexBox_Latexmk(<q-bang> == "!")$/;"	c
LatexmkClean	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^command! -bang	LatexmkClean	call LatexBox_LatexmkClean(<q-bang> == "!")$/;"	c
LatexmkStatus	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^command! -bang	LatexmkStatus	call LatexBox_LatexmkStatus(<q-bang> == "!")$/;"	c
LatexmkStop	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^command! LatexmkStop			call LatexBox_LatexmkStop(0)$/;"	c
LatexErrors	sources_non_forked/vim-polyglot/ftplugin/latex-box/latexmk.vim	/^command! LatexErrors			call LatexBox_LatexErrors(-1)$/;"	c
g:LatexBox_Folding	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^	let g:LatexBox_Folding=0$/;"	v
g:LatexBox_fold_text	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^    let g:LatexBox_fold_text=1$/;"	v
g:LatexBox_fold_preamble	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^    let g:LatexBox_fold_preamble=1$/;"	v
g:LatexBox_fold_envs	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^    let g:LatexBox_fold_envs=1$/;"	v
g:LatexBox_fold_envs_force	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^    let g:LatexBox_fold_envs_force = []$/;"	v
g:LatexBox_fold_parts	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^    let g:LatexBox_fold_parts=[$/;"	v
g:LatexBox_fold_sections	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^    let g:LatexBox_fold_sections=[$/;"	v
g:LatexBox_fold_toc	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^    let g:LatexBox_fold_toc=0$/;"	v
g:LatexBox_fold_toc_levels	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^    let g:LatexBox_fold_toc_levels=1$/;"	v
g:LatexBox_fold_automatic	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^	let g:LatexBox_fold_automatic=1$/;"	v
FastFold	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^	augroup FastFold$/;"	a
LatexBox_FoldOnDemand	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^function! LatexBox_FoldOnDemand()$/;"	f
LatexFold	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^command! LatexFold  call LatexBox_FoldOnDemand()$/;"	c
FoldSectionLevels	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^function! s:FoldSectionLevels()$/;"	f
b:LatexBox_FoldSections	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^let b:LatexBox_FoldSections = s:FoldSectionLevels()$/;"	v
s:notbslash	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^let s:notbslash = '\\%(\\\\\\@<!\\%(\\\\\\\\\\)*\\)\\@<='$/;"	v
s:notcomment	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^let s:notcomment = '\\%(\\%(\\\\\\@<!\\%(\\\\\\\\\\)*\\)\\@<=%.*\\)\\@<!'$/;"	v
s:envbeginpattern	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^let s:envbeginpattern = s:notcomment . s:notbslash . '\\\\begin\\s*{.\\{-}}'$/;"	v
s:envendpattern	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^let s:envendpattern = s:notcomment . s:notbslash . '\\\\end\\s*{.\\{-}}'$/;"	v
s:foldparts	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^let s:foldparts = '^\\s*\\\\\\%(' . join(g:LatexBox_fold_parts, '\\|') . '\\)'$/;"	v
s:folded	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^let s:folded = '\\(% Fake\\|\\\\\\(document\\|begin\\|end\\|paragraph\\|'$/;"	v
LatexBox_FoldLevel	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^function! LatexBox_FoldLevel(lnum)$/;"	f
LabelEnv	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^function! s:LabelEnv()$/;"	f
CaptionEnv	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^function! s:CaptionEnv()$/;"	f
CaptionTable	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^function! s:CaptionTable()$/;"	f
CaptionFrame	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^function! s:CaptionFrame(line)$/;"	f
LatexBox_FoldText_title	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^function! LatexBox_FoldText_title()$/;"	f
LatexBox_FoldText	sources_non_forked/vim-polyglot/ftplugin/latex-box/folding.vim	/^function! LatexBox_FoldText()$/;"	f
GetSID	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:GetSID()$/;"	f
s:SID	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^let s:SID = s:GetSID()$/;"	v
SIDWrap	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:SIDWrap(func)$/;"	f
g:LatexBox_completion_close_braces	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^	let g:LatexBox_completion_close_braces = 1$/;"	v
g:LatexBox_bibtex_wild_spaces	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^	let g:LatexBox_bibtex_wild_spaces = 1$/;"	v
g:LatexBox_cite_pattern	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^	let g:LatexBox_cite_pattern = '\\C\\\\\\a*cite\\a*\\*\\?\\(\\[[^\\]]*\\]\\)*\\_\\s*{'$/;"	v
g:LatexBox_ref_pattern	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^	let g:LatexBox_ref_pattern = '\\C\\\\v\\?\\(eq\\|page\\|[cC]\\|labelc\\|name\\|auto\\)\\?ref\\*\\?\\_\\s*{'$/;"	v
g:LatexBox_completion_environments	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^	let g:LatexBox_completion_environments = [$/;"	v
g:LatexBox_completion_commands	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^	let g:LatexBox_completion_commands = [$/;"	v
g:LatexBox_complete_inlineMath	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^	let g:LatexBox_complete_inlineMath = 0$/;"	v
g:LatexBox_eq_env_patterns	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^	let g:LatexBox_eq_env_patterns = 'equation\\|gather\\|multiline\\|align\\|flalign\\|alignat\\|eqnarray'$/;"	v
LatexBox_kpsewhich	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! LatexBox_kpsewhich(file)$/;"	f
s:completion_type	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^let s:completion_type = ''$/;"	v
LatexBox_Complete	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! LatexBox_Complete(findstart, base)$/;"	f
FindBibData	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:FindBibData(...)$/;"	f
s:bstfile	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^let s:bstfile = expand('<sfile>:p:h') . '\/vimcomplete'$/;"	v
LatexBox_BibSearch	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! LatexBox_BibSearch(regexp)$/;"	f
s:type_length	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^let s:type_length=0$/;"	v
LatexBox_BibComplete	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! LatexBox_BibComplete(regexp)$/;"	f
ExtractLabels	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:ExtractLabels()$/;"	f
ExtractInputs	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:ExtractInputs()$/;"	f
s:LabelCache	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^let s:LabelCache = {}$/;"	v
GetLabelCache	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:GetLabelCache(file)$/;"	f
CompleteLabels	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:CompleteLabels(regex)$/;"	f
LatexBox_complete_inlineMath_or_not	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:LatexBox_complete_inlineMath_or_not()$/;"	f
LatexBox_inlineMath_completion	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:LatexBox_inlineMath_completion(regex, ...)$/;"	f
LatexBox_inlineMath_mathlist	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:LatexBox_inlineMath_mathlist(line,inline_pattern, line_num)$/;"	f
CloseCurEnv	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:CloseCurEnv()$/;"	f
WrapSelection	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:WrapSelection(wrapper)$/;"	f
PromptEnvWrapSelection	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:PromptEnvWrapSelection(...)$/;"	f
PromptLabelList	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:PromptLabelList(...)$/;"	f
ChangeEnvPrompt	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:ChangeEnvPrompt()$/;"	f
GetEnvironmentList	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:GetEnvironmentList(lead, cmdline, pos)$/;"	f
LatexToggleStarEnv	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:LatexToggleStarEnv()$/;"	f
NextCharsMatch	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^function! s:NextCharsMatch(regex)$/;"	f
<Plug>LatexCloseCurEnv			<C-R>=<SID>CloseCurEnv()<CR>	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^inoremap <silent> <Plug>LatexCloseCurEnv			<C-R>=<SID>CloseCurEnv()<CR>$/;"	m
<Plug>LatexWrapSelection			:<c-u>call	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^vnoremap <silent> <Plug>LatexWrapSelection			:<c-u>call <SID>WrapSelection('')<CR>i$/;"	m
<Plug>LatexEnvWrapSelection		:<c-u>call	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^vnoremap <silent> <Plug>LatexEnvWrapSelection		:<c-u>call <SID>PromptEnvWrapSelection()<CR>$/;"	m
<Plug>LatexEnvWrapFmtSelection	:<c-u>call	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^vnoremap <silent> <Plug>LatexEnvWrapFmtSelection	:<c-u>call <SID>PromptEnvWrapSelection(1)<CR>$/;"	m
<Plug>LatexChangeEnv				:call	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^nnoremap <silent> <Plug>LatexChangeEnv				:call <SID>ChangeEnvPrompt()<CR>$/;"	m
<Plug>LatexToggleStarEnv			:call	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^nnoremap <silent> <Plug>LatexToggleStarEnv			:call <SID>LatexToggleStarEnv()<CR>$/;"	m
LatexLabels	sources_non_forked/vim-polyglot/ftplugin/latex-box/complete.vim	/^command! LatexLabels call <SID>PromptLabelList()$/;"	c
g:LatexBox_show_warnings	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^	let g:LatexBox_show_warnings=1$/;"	v
g:LatexBox_ignore_warnings	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^	let g:LatexBox_ignore_warnings =$/;"	v
warning	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^		let warning = escape(substitute(w, '[\\,]', '%\\\\\\\\&', 'g'), ' ')$/;"	v
g:LatexBox_split_type	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^	let g:LatexBox_split_type = "vnew"$/;"	v
g:LatexBox_split_length	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^	let g:LatexBox_split_length = 15$/;"	v
g:LatexBox_split_width	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^	let g:LatexBox_split_width = 30$/;"	v
g:LatexBox_split_side	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^	let g:LatexBox_split_side = "aboveleft"$/;"	v
g:LatexBox_split_resize	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^	let g:LatexBox_split_resize = 0$/;"	v
g:LatexBox_toc_hidehelp	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^	let g:LatexBox_toc_hidehelp = 0$/;"	v
LatexBox_GetMainTexFile	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^function! LatexBox_GetMainTexFile()$/;"	f
PromptForMainFile	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^function! s:PromptForMainFile()$/;"	f
LatexBox_GetTexRoot	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^function! LatexBox_GetTexRoot()$/;"	f
LatexBox_GetBuildBasename	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^function! LatexBox_GetBuildBasename(with_dir)$/;"	f
LatexBox_GetAuxFile	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^function! LatexBox_GetAuxFile()$/;"	f
LatexBox_GetLogFile	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^function! LatexBox_GetLogFile()$/;"	f
LatexBox_GetOutputFile	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^function! LatexBox_GetOutputFile()$/;"	f
s:viewer	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^	let s:viewer = ''$/;"	v
s:uname	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^      let s:uname = system('echo -n $(uname -s)')$/;"	v
s:viewer	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^		  let s:viewer = 'open'$/;"	v
s:viewer	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^		  let s:viewer = 'xdg-open'$/;"	v
g:LatexBox_viewer	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^	let g:LatexBox_viewer = s:viewer$/;"	v
LatexBox_View	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^function! LatexBox_View(...)$/;"	f
LatexView	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^command! -nargs=* LatexView call LatexBox_View('<args>')$/;"	c
LatexBox_InComment	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^function! LatexBox_InComment(...)$/;"	f
LatexBox_GetCurrentEnvironment	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^function! LatexBox_GetCurrentEnvironment(...)$/;"	f
LatexBox_TexToTree	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^function! LatexBox_TexToTree(str)$/;"	f
LatexBox_TreeToTex	sources_non_forked/vim-polyglot/ftplugin/latex-box/common.vim	/^function! LatexBox_TreeToTex(tree)$/;"	f
g:LatexBox_open_pats	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^	let g:LatexBox_open_pats  = [ '\\\\{','{','\\\\(','(','\\\\\\[','\\[',$/;"	v
g:LatexBox_close_pats	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^	let g:LatexBox_close_pats = [ '\\\\}','}','\\\\)',')','\\\\\\]','\\]',$/;"	v
HasSyntax	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^function! s:HasSyntax(syntaxName, ...)$/;"	f
SearchAndSkipComments	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^function! s:SearchAndSkipComments(pat, ...)$/;"	f
FindMatchingPair	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^function! s:FindMatchingPair(mode)$/;"	f
LatexBox_HighlightPairs	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^	augroup LatexBox_HighlightPairs$/;"	a
<Plug>LatexBox_JumpToMatch	:call	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^nnoremap <silent> <Plug>LatexBox_JumpToMatch	:call <SID>FindMatchingPair('n')<CR>$/;"	m
<Plug>LatexBox_JumpToMatch	:call	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^vnoremap <silent> <Plug>LatexBox_JumpToMatch	:call <SID>FindMatchingPair('v')<CR>$/;"	m
<Plug>LatexBox_JumpToMatch	v:call	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^onoremap <silent> <Plug>LatexBox_JumpToMatch	v:call <SID>FindMatchingPair('o')<CR>$/;"	m
SelectInlineMath	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^function! s:SelectInlineMath(seltype)$/;"	f
<Plug>LatexBox_SelectInlineMathInner	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^vnoremap <silent> <Plug>LatexBox_SelectInlineMathInner$/;"	m
<Plug>LatexBox_SelectInlineMathOuter	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^vnoremap <silent> <Plug>LatexBox_SelectInlineMathOuter$/;"	m
SelectCurrentEnv	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^function! s:SelectCurrentEnv(seltype)$/;"	f
<Plug>LatexBox_SelectCurrentEnvInner	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^vnoremap <silent> <Plug>LatexBox_SelectCurrentEnvInner :<C-U>call <SID>SelectCurrentEnv('inner')<CR>$/;"	m
<Plug>LatexBox_SelectCurrentEnvOuter	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^vnoremap <silent> <Plug>LatexBox_SelectCurrentEnvOuter :<C-U>call <SID>SelectCurrentEnv('outer')<CR>$/;"	m
LatexBox_JumpToNextBraces	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^function! LatexBox_JumpToNextBraces(backward)$/;"	f
ConvertBack	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^function! s:ConvertBack(line)$/;"	f
ReadTOC	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^function! s:ReadTOC(auxfile, texfile, ...)$/;"	f
LatexBox_TOC	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^function! LatexBox_TOC(...)$/;"	f
FindClosestSection	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^function! s:FindClosestSection(toc, fileindices)$/;"	f
s:ConvBackPats	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^let s:ConvBackPats = map([$/;"	v
LatexTOC	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^command! LatexTOC call LatexBox_TOC()$/;"	c
LatexTOCToggle	sources_non_forked/vim-polyglot/ftplugin/latex-box/motion.vim	/^command! LatexTOCToggle call LatexBox_TOC(1)$/;"	c
<LocalLeader>ll	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap <buffer> <LocalLeader>ll :Latexmk<CR>$/;"	m
<LocalLeader>lL	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap <buffer> <LocalLeader>lL :Latexmk!<CR>$/;"	m
<LocalLeader>lc	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap <buffer> <LocalLeader>lc :LatexmkClean<CR>$/;"	m
<LocalLeader>lC	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap <buffer> <LocalLeader>lC :LatexmkClean!<CR>$/;"	m
<LocalLeader>lg	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap <buffer> <LocalLeader>lg :LatexmkStatus<CR>$/;"	m
<LocalLeader>lG	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap <buffer> <LocalLeader>lG :LatexmkStatus!<CR>$/;"	m
<LocalLeader>lk	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap <buffer> <LocalLeader>lk :LatexmkStop<CR>$/;"	m
<LocalLeader>le	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap <buffer> <LocalLeader>le :LatexErrors<CR>$/;"	m
<LocalLeader>lv	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap <buffer> <LocalLeader>lv :LatexView<CR>$/;"	m
<LocalLeader>lt	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap <silent> <buffer> <LocalLeader>lt :LatexTOC<CR>$/;"	m
<LocalLeader>lj	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap <silent> <buffer> <LocalLeader>lj :LatexLabels<CR>$/;"	m
<LocalLeader>lf	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^	noremap <buffer> <LocalLeader>lf :LatexFold<CR>$/;"	m
%	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^	nmap <buffer> % <Plug>LatexBox_JumpToMatch$/;"	m
%	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^	vmap <buffer> % <Plug>LatexBox_JumpToMatch$/;"	m
%	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^	omap <buffer> % <Plug>LatexBox_JumpToMatch$/;"	m
ie	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^vmap <buffer> ie <Plug>LatexBox_SelectCurrentEnvInner$/;"	m
ae	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^vmap <buffer> ae <Plug>LatexBox_SelectCurrentEnvOuter$/;"	m
ie	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^onoremap <buffer> ie :normal vie<CR>$/;"	m
ae	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^onoremap <buffer> ae :normal vae<CR>$/;"	m
i$	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^vmap <buffer> i$ <Plug>LatexBox_SelectInlineMathInner$/;"	m
a$	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^vmap <buffer> a$ <Plug>LatexBox_SelectInlineMathOuter$/;"	m
i$	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^onoremap <buffer> i$ :normal vi$<CR>$/;"	m
a$	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^onoremap <buffer> a$ :normal va$<CR>$/;"	m
LatexBoxNextSection	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^function! s:LatexBoxNextSection(type, backwards, visual)$/;"	f
]]	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap  <buffer> <silent> ]] :call <SID>LatexBoxNextSection(0,0,0)<CR>$/;"	m
][	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap  <buffer> <silent> ][ :call <SID>LatexBoxNextSection(1,0,0)<CR>$/;"	m
[]	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap  <buffer> <silent> [] :call <SID>LatexBoxNextSection(1,1,0)<CR>$/;"	m
[[	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^noremap  <buffer> <silent> [[ :call <SID>LatexBoxNextSection(0,1,0)<CR>$/;"	m
]]	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^vnoremap <buffer> <silent> ]] :<c-u>call <SID>LatexBoxNextSection(0,0,1)<CR>$/;"	m
][	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^vnoremap <buffer> <silent> ][ :<c-u>call <SID>LatexBoxNextSection(1,0,1)<CR>$/;"	m
[]	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^vnoremap <buffer> <silent> [] :<c-u>call <SID>LatexBoxNextSection(1,1,1)<CR>$/;"	m
[[	sources_non_forked/vim-polyglot/ftplugin/latex-box/mappings.vim	/^vnoremap <buffer> <silent> [[ :<c-u>call <SID>LatexBoxNextSection(0,1,1)<CR>$/;"	m
g:vim_json_syntax_conceal	sources_non_forked/vim-polyglot/ftplugin/json.vim	/^	let g:vim_json_syntax_conceal = 1$/;"	v
g:vim_json_warnings	sources_non_forked/vim-polyglot/ftplugin/json.vim	/^	let g:vim_json_warnings = 1$/;"	v
g:vim_json_syntax_concealcursor	sources_non_forked/vim-polyglot/ftplugin/json.vim	/^	let g:vim_json_syntax_concealcursor = ""$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/ftplugin/rust/tagbar.vim	/^let s:save_cpo = &cpo$/;"	v
g:tagbar_type_rust	sources_non_forked/vim-polyglot/ftplugin/rust/tagbar.vim	/^let g:tagbar_type_rust = {$/;"	v
g:tagbar_type_rust	sources_non_forked/vim-polyglot/ftplugin/rust/tagbar.vim	/^    let g:tagbar_type_rust.deffile = expand('<sfile>:p:h:h:h') . '\/ctags\/rust.ctags'$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/git.vim	/^let b:did_ftplugin = 1$/;"	v
b:git_dir	sources_non_forked/vim-polyglot/ftplugin/git.vim	/^    let b:git_dir = matchstr(expand('%:p'),'.*\\.git[\\\/]worktrees[\\\/][^\\\/]\\+\\>')$/;"	v
b:git_dir	sources_non_forked/vim-polyglot/ftplugin/git.vim	/^    let b:git_dir = matchstr(expand('%:p'),'.*\\.git\\>')$/;"	v
b:git_dir	sources_non_forked/vim-polyglot/ftplugin/git.vim	/^    let b:git_dir = $GIT_DIR$/;"	v
b:git_dir	sources_non_forked/vim-polyglot/ftplugin/git.vim	/^    let b:git_dir = substitute(b:git_dir,'\\\\','\/','g')$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/git.vim	/^let b:undo_ftplugin = "setl keywordprg< path< includeexpr<"$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^let b:did_ftplugin = 1$/;"	v
CoffeeBufUpdate	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^augroup CoffeeBufUpdate | augroup END$/;"	a
CoffeeBufNew	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^augroup CoffeeBufNew | augroup END$/;"	a
SwitchWindow	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:SwitchWindow(buf)$/;"	f
ScratchBufBuild	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:ScratchBufBuild(src, vert, size)$/;"	f
ScratchBufUpdate	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:ScratchBufUpdate(buf, text)$/;"	f
ParseCoffeeError	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:ParseCoffeeError(output, src, startline)$/;"	f
CoffeeCompileResetVars	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeCompileResetVars()$/;"	f
CoffeeWatchResetVars	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeWatchResetVars()$/;"	f
CoffeeRunResetVars	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeRunResetVars()$/;"	f
CoffeeCompileClose	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeCompileClose()$/;"	f
CoffeeWatchClose	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeWatchClose()$/;"	f
CoffeeRunClose	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeRunClose()$/;"	f
CoffeeCompileToBuf	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeCompileToBuf(buf, startline, endline)$/;"	f
CoffeeCompile	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeCompile(startline, endline, args)$/;"	f
CoffeeWatchUpdate	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeWatchUpdate()$/;"	f
CoffeeWatch	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeWatch(args)$/;"	f
CoffeeRun	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeRun(startline, endline, args)$/;"	f
CoffeeLint	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeLint(startline, endline, bang, args)$/;"	f
CoffeeComplete	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeComplete(cmd, cmdline, cursor)$/;"	f
CoffeeCompile	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^\\        CoffeeCompile call s:CoffeeCompile(<line1>, <line2>, <q-args>)$/;"	c
CoffeeWatch	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^\\        CoffeeWatch call s:CoffeeWatch(<q-args>)$/;"	c
CoffeeRun	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^command! -buffer -range=% -bar -nargs=* CoffeeRun$/;"	c
CoffeeLint	sources_non_forked/vim-polyglot/ftplugin/coffee.vim	/^command! -buffer -range=% -bang -bar -nargs=* CoffeeLint$/;"	c
s:save_cpo	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^let s:undo_ftplugin = ""$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^let s:match_words = ""$/;"	v
g:eruby_default_subtype	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^.\\{-\\}\\ze\\.eruby\\>')$/;"	v
s:lines	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\|\\.example\\)\\+$','',''),'\\.\\zs\\w\\+\\%(\\ze+\\w\\+\\)\\=$')$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
s:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^let s:did_ftplugin = get(b:, 'did_ftplugin', 1)$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let s:match_words = b:match_words$/;"	v
s:cfilemap	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^let s:cfilemap = v:version >= 704 ? maparg('<Plug><cfile>', 'c', 0, 1) : {}$/;"	v
s:cfilemap	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let s:cfilemap = {}$/;"	v
s:cfilemap	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let s:cfilemap.rhs = "substitute(&l:inex =~# '\\\\<v:fname\\\\>' && len(expand('<cfile>')) ? eval(substitute(&l:inex, '\\\\<v:fname\\\\>', '\\\\=string(expand(\\"<cfile>\\"))', 'g')) : '', '^$', \\"\\\\022\\\\006\\",'')"$/;"	v
s:ctagmap	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^let s:ctagmap = v:version >= 704 ? maparg('<Plug><ctag>', 'c', 0, 1) : {}$/;"	v
s:ctagmap	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let s:ctagmap = {}$/;"	v
s:include	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^let s:include = &l:include$/;"	v
s:path	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^let s:path = &l:path$/;"	v
s:suffixesadd	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^let s:suffixesadd = &l:suffixesadd$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^let b:did_ftplugin = s:did_ftplugin . '.eruby'$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let b:browsefilter="eRuby Files (*.erb, *.rhtml)\\t*.erb;*.rhtml\\n" . s:browsefilter$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^  let b:match_words = s:match_words$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^let b:undo_ftplugin = "setl cms< "$/;"	v
ErubyAtCursor	sources_non_forked/vim-polyglot/ftplugin/eruby.vim	/^function! ErubyAtCursor() abort$/;"	f
K	sources_non_forked/vim-polyglot/ftplugin/racket.vim	/^nnoremap <buffer> K :silent !raco docs <cword><cr>:redraw!<cr>$/;"	m
Racket_visual_doc	sources_non_forked/vim-polyglot/ftplugin/racket.vim	/^function! s:Racket_visual_doc()$/;"	f
K	sources_non_forked/vim-polyglot/ftplugin/racket.vim	/^vnoremap <buffer> K :call <SID>Racket_visual_doc()<cr>$/;"	m
<f9>	sources_non_forked/vim-polyglot/ftplugin/racket.vim	/^nnoremap <buffer> <f9> :!racket -t %<cr>$/;"	m
SetTagbar	sources_non_forked/vim-polyglot/ftplugin/elm/tagbar.vim	/^function! s:SetTagbar()$/;"	f
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ps1.vim	/^let b:did_ftplugin = 1$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/ps1.vim	/^	let b:browsefilter =$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ps1.vim	/^let b:undo_ftplugin = "setlocal tw< cms< fo<" .$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/vifm-cmdedit.vim	/^let b:did_ftplugin = 1$/;"	v
g:liquid_default_subtype	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^  let g:liquid_default_subtype = 'html'$/;"	v
s:lines	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:liquid_subtype	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^  let b:liquid_subtype = matchstr(s:lines,'liquid_subtype=\\zs\\w\\+')$/;"	v
b:liquid_subtype	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^    let b:liquid_subtype = matchstr(&filetype,'^liquid\\.\\zs\\w\\+')$/;"	v
b:liquid_subtype	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^    let b:liquid_subtype = matchstr(substitute(expand('%:t'),'\\c\\%(\\.liquid\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:liquid_subtype	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^    let b:liquid_subtype = g:liquid_default_subtype$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^let b:did_ftplugin = 1$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^  let b:undo_ftplugin .= '|'$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^  let b:undo_ftplugin = ''$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^  let b:browsefilter = "\\n".b:browsefilter$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^  let b:browsefilter = ''$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^  let b:match_words .= ','$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^  let b:match_words = ''$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^  let b:browsefilter="Liquid Files (*.liquid)\\t*.liquid" . b:browsefilter$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^  let b:match_words .= '\\<\\%(if\\w*\\|unless\\|case\\)\\>:\\<\\%(elsif\\|else\\|when\\)\\>:\\<end\\%(if\\w*\\|unless\\|case\\)\\>,\\<\\%(for\\|tablerow\\)\\>:\\%({%\\s*\\)\\@<=empty\\>:\\<end\\%(for\\|tablerow\\)\\>,<\\(capture\\|comment\\|highlight\\)\\>:\\<end\\1\\>'$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/liquid.vim	/^let b:undo_ftplugin .= 'setl cms< | unlet! b:browsefilter b:match_words'$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^let b:did_ftplugin = 1$/;"	v
b:match_ignorecase	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^  let b:match_words = '\\:\\@<!\\<\\%(do\\|fn\\)\\:\\@!\\>' .$/;"	v
b:block_begin	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^let b:block_begin = '\\<\\(do$\\|fn\\>\\)'$/;"	v
b:block_end	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^let b:block_end = '\\<end\\>'$/;"	v
]]	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> ]] ':silent keeppatterns \/'.b:block_begin.'<CR>'$/;"	m
[[	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> [[ ':silent keeppatterns ?'.b:block_begin.'<CR>'$/;"	m
][	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> ][ ':silent keeppatterns \/'.b:block_end  .'<CR>'$/;"	m
[]	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> [] ':silent keeppatterns ?'.b:block_end  .'<CR>'$/;"	m
]]	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> ]] ':silent keeppatterns \/'.b:block_begin.'<CR>'$/;"	m
[[	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> [[ ':silent keeppatterns ?'.b:block_begin.'<CR>'$/;"	m
][	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> ][ ':silent keeppatterns \/'.b:block_end  .'<CR>'$/;"	m
[]	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> [] ':silent keeppatterns ?'.b:block_end  .'<CR>'$/;"	m
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/elixir.vim	/^let b:undo_ftplugin = 'setlocal sw< sts< et< isk< com< cms< path< inex< sua< def<'.$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/fish.vim	/^let b:match_words =$/;"	v
b:endwise_addition	sources_non_forked/vim-polyglot/ftplugin/fish.vim	/^let b:endwise_addition = 'end'$/;"	v
b:endwise_words	sources_non_forked/vim-polyglot/ftplugin/fish.vim	/^let b:endwise_words = 'begin,function,if,switch,while,for'$/;"	v
b:endwise_syngroups	sources_non_forked/vim-polyglot/ftplugin/fish.vim	/^let b:endwise_syngroups = 'fishKeyword,fishConditional,fishRepeat'$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/qml.vim	/^let b:did_ftplugin = 1$/;"	v
s:cpoptions_save	sources_non_forked/vim-polyglot/ftplugin/qml.vim	/^let s:cpoptions_save = &cpoptions$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/qml.vim	/^let b:undo_ftplugin =$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/qml.vim	/^   let b:browsefilter =$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/vifm-edit.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^let b:did_ftplugin = 1$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^  let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin."|setl com< cms< fo< ml<"$/;"	v
choose	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^function! s:choose(word)$/;"	f
cycle	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^function! s:cycle()$/;"	f
Pick	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Pick   :<line1>,<line2>call s:choose('pick')$/;"	c
Squash	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Squash :<line1>,<line2>call s:choose('squash')$/;"	c
Edit	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Edit   :<line1>,<line2>call s:choose('edit')$/;"	c
Reword	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Reword :<line1>,<line2>call s:choose('reword')$/;"	c
Fixup	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Fixup  :<line1>,<line2>call s:choose('fixup')$/;"	c
Drop	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Drop   :<line1>,<line2>call s:choose('drop')$/;"	c
Cycle	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar Cycle  :call s:cycle()$/;"	c
K	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^nnoremap <buffer> <expr> K col('.') < 7 && expand('<Lt>cword>') =~ '\\X' && getline('.') =~ '^\\w\\+\\s\\+\\x\\+\\>' ? 'wK' : 'K'$/;"	m
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin . "|nunmap <buffer> K"$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/mako.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let b:did_ftplugin=1$/;"	v
s:cposet	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let s:cposet=&cpoptions$/;"	v
<LocalLeader>c	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^    nmap <buffer> <LocalLeader>c <Plug>LUncomOn$/;"	m
<LocalLeader>c	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^    vmap <buffer> <LocalLeader>c <Plug>BUncomOn$/;"	m
<LocalLeader>C	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^    nmap <buffer> <LocalLeader>C <Plug>LUncomOff$/;"	m
<LocalLeader>C	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^    vmap <buffer> <LocalLeader>C <Plug>BUncomOff$/;"	m
<Plug>LUncomOn	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  nnoremap <buffer> <Plug>LUncomOn mz0i(* <ESC>$A *)<ESC>`z$/;"	m
<Plug>LUncomOff	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  nnoremap <buffer> <Plug>LUncomOff :s\/^(\\* \\(.*\\) \\*)\/\\1\/<CR>:noh<CR>$/;"	m
<Plug>BUncomOn	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  vnoremap <buffer> <Plug>BUncomOn <ESC>:'<,'><CR>`<O<ESC>0i(*<ESC>`>o<ESC>0i*)<ESC>`<$/;"	m
<Plug>BUncomOff	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  vnoremap <buffer> <Plug>BUncomOff <ESC>:'<,'><CR>`<dd`>dd`<$/;"	m
b:mw	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = ''$/;"	v
b:mw	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<let\\>:\\<and\\>:\\(\\<in\\>\\|;;\\)'$/;"	v
b:mw	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<if\\>:\\<then\\>:\\<else\\>'$/;"	v
b:mw	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<\\(for\\|while\\)\\>:\\<do\\>:\\<done\\>,'$/;"	v
b:mw	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<\\(object\\|sig\\|struct\\|begin\\)\\>:\\<end\\>'$/;"	v
b:mw	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<\\(match\\|try\\)\\>:\\<with\\>'$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let b:match_words = b:mw$/;"	v
b:match_ignorecase	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let b:match_ignorecase=0$/;"	v
g:did_ocaml_switch	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  let g:did_ocaml_switch = 1$/;"	v
<LocalLeader>s	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  map <LocalLeader>s :call OCaml_switch(0)<CR>$/;"	m
<LocalLeader>S	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  map <LocalLeader>S :call OCaml_switch(1)<CR>$/;"	m
OCaml_switch	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  fun OCaml_switch(newwin)$/;"	f
s:s	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let s:s = line2byte(line('.'))+col('.')-1$/;"	v
s:modeline	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  let s:modeline = getline(".")$/;"	v
s:modeline	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  let s:modeline = ""$/;"	v
s:m	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let s:m = matchstr(s:modeline,'default\\s*=\\s*\\d\\+')$/;"	v
s:idef	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  let s:idef = matchstr(s:m,'\\d\\+')$/;"	v
s:idef	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  let s:idef = g:omlet_indent$/;"	v
s:idef	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  let s:idef = 2$/;"	v
s:m	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^let s:m = matchstr(s:modeline,'struct\\s*=\\s*\\d\\+')$/;"	v
s:i	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  let s:i = matchstr(s:m,'\\d\\+')$/;"	v
s:i	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  let s:i = g:omlet_indent_struct$/;"	v
s:i	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^  let s:i = s:idef$/;"	v
topindent	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^function s:topindent(lnum)$/;"	f
OMLetFoldLevel	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^function OMLetFoldLevel(l)$/;"	f
re	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^import re$/;"	m
os	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^import os$/;"	m
os.path	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^import os.path$/;"	m
string	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^import string$/;"	m
time	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^import time$/;"	m
vim	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^import vim$/;"	m
_annotations	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^no_annotations = AnnExc("No annotations (.annot) file found")$/;"	m
OCamlPrintType	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^fun! OCamlPrintType(current_mode)$/;"	f
OCamlGotoDefinition	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^fun! OCamlGotoDefinition(current_mode)$/;"	f
OCamlParseAnnot	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^fun! OCamlParseAnnot()$/;"	f
<LocalLeader>t	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^map <LocalLeader>t :call OCamlPrintType("normal")<RETURN>$/;"	m
<LocalLeader>t	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^vmap <LocalLeader>t :call OCamlPrintType("visual")<RETURN>$/;"	m
<LocalLeader>d	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^map <LocalLeader>d :call OCamlGotoDefinition("normal")<RETURN>$/;"	m
<LocalLeader>d	sources_non_forked/vim-polyglot/ftplugin/ocaml.vim	/^vmap <LocalLeader>d :call OCamlGotoDefinition("visual")<RETURN>$/;"	m
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/dart.vim	/^let b:did_ftplugin = 1$/;"	v
s:win_sep	sources_non_forked/vim-polyglot/ftplugin/dart.vim	/^let s:win_sep = (has('win32') || has('win64')) ? '\/' : ''$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/dart.vim	/^let b:undo_ftplugin = 'setl et< fo< sw< sts< com< cms< inex< isf<'$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/r.vim	/^let b:did_ftplugin = 1$/;"	v
<F2>	sources_non_forked/vim-polyglot/ftplugin/r.vim	/^noremap <buffer> <F2> :!xterm -T 'R' -e funnel.pl ~\/.r-pipe "R && echo -e 'Interpreter has finished. Exiting. Goodbye.\\n'"&<CR><CR>$/;"	m
<F3>	sources_non_forked/vim-polyglot/ftplugin/r.vim	/^noremap <buffer> <F3> :!xterm -T 'R' -e funnel.pl ~\/.r-pipe "R-devel && echo 'Interpreter has finished. Exiting. Goodbye.'"&<CR><CR>$/;"	m
<F4>	sources_non_forked/vim-polyglot/ftplugin/r.vim	/^noremap <buffer> <F4> :!xterm -T 'R' -e funnel.pl ~\/.r-pipe "R -vanilla && echo 'Interpreter has finished. Exiting. Goodbye.'"&<CR><CR>$/;"	m
<F9>	sources_non_forked/vim-polyglot/ftplugin/r.vim	/^noremap <buffer> <F9> :execute line(".") 'w >> ~\/.r-pipe'<CR>$/;"	m
<F9>	sources_non_forked/vim-polyglot/ftplugin/r.vim	/^inoremap <buffer> <F9> <Esc> :execute line(".") 'w >> ~\/.r-pipe'<CR>$/;"	m
r	sources_non_forked/vim-polyglot/ftplugin/r.vim	/^vnoremap <buffer> r :w >> ~\/.r-pipe<CR>$/;"	m
<M-Enter>	sources_non_forked/vim-polyglot/ftplugin/r.vim	/^inoremap <M-Enter> <Esc>:execute line(".") 'w >> ~\/.r-pipe'<CR>o$/;"	m
<F5>	sources_non_forked/vim-polyglot/ftplugin/r.vim	/^noremap <buffer> <F5> :execute '1 ,' line("$") 'w >> ~\/.r-pipe' <CR><CR>$/;"	m
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/blade.vim	/^let b:did_ftplugin = 1$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/blade.vim	/^    let b:match_words .= ',' .$/;"	v
b:match_skip	sources_non_forked/vim-polyglot/ftplugin/blade.vim	/^    let b:match_skip = 'synIDattr(synID(line("."), col("."), 0), "name") !=# "bladeKeyword"'$/;"	v
b:match_ignorecase	sources_non_forked/vim-polyglot/ftplugin/blade.vim	/^    let b:match_ignorecase = 0$/;"	v
TOCClose	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^function! s:TOCClose()$/;"	f
TOCToggleNumbers	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^function! s:TOCToggleNumbers()$/;"	f
EscapeTitle	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^function! s:EscapeTitle(titlestr)$/;"	f
TOCActivate	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^function! s:TOCActivate(close)$/;"	f
TOCFindMatch	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^function! s:TOCFindMatch(strsearch,duplicates,files)$/;"	f
TOCFoldLevel	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^function! TOCFoldLevel(lnum)$/;"	f
TOCFoldText	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^function! TOCFoldText()$/;"	f
TOCOpenBuf	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^function! s:TOCOpenBuf(file)$/;"	f
s	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^nnoremap <buffer> <silent> s :call <SID>TOCToggleNumbers()<CR>$/;"	m
q	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^nnoremap <buffer> <silent> q :call <SID>TOCClose()<CR>$/;"	m
<Esc>	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^nnoremap <buffer> <silent> <Esc> :call <SID>TOCClose()<CR>$/;"	m
<Space>	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^nnoremap <buffer> <silent> <Space> :call <SID>TOCActivate(0)<CR>$/;"	m
<CR>	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^nnoremap <buffer> <silent> <CR> :call <SID>TOCActivate(1)<CR>$/;"	m
<leftrelease>	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^nnoremap <buffer> <silent> <leftrelease> :call <SID>TOCActivate(0)<cr>$/;"	m
<2-leftmouse>	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^nnoremap <buffer> <silent> <2-leftmouse> :call <SID>TOCActivate(1)<cr>$/;"	m
G	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^nnoremap <buffer> <silent> G G4k$/;"	m
<Esc>OA	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^nnoremap <buffer> <silent> <Esc>OA k$/;"	m
<Esc>OB	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^nnoremap <buffer> <silent> <Esc>OB j$/;"	m
<Esc>OC	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^nnoremap <buffer> <silent> <Esc>OC l$/;"	m
<Esc>OD	sources_non_forked/vim-polyglot/ftplugin/latextoc.vim	/^nnoremap <buffer> <silent> <Esc>OD h$/;"	m
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^let b:did_ftplugin = 1$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^let s:save_cpo = &cpo$/;"	v
b:julia_vim_loaded	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^let b:julia_vim_loaded = 1$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^let b:undo_ftplugin = "setlocal include< suffixesadd< comments< commentstring<"$/;"	v
b:match_ignorecase	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  let b:match_ignorecase = 0$/;"	v
b:julia_begin_keywords	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  let b:julia_begin_keywords = '\\%(\\%(\\.\\s*\\)\\@<!\\|\\%(@\\s*.\\s*\\)\\@<=\\)\\<\\%(\\%(staged\\)\\?function\\|macro\\|begin\\|mutable\\s\\+struct\\|\\%(mutable\\s\\+\\)\\@<!struct\\|\\%(abstract\\|primitive\\)\\s\\+type\\|\\%(\\(abstract\\|primitive\\)\\s\\+\\)\\@<!type\\|immutable\\|let\\|do\\|\\%(bare\\)\\?module\\|quote\\|if\\|for\\|while\\|try\\)\\>'$/;"	v
s:macro_regex	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  let s:macro_regex = '@\\%(#\\@!\\S\\)\\+\\s\\+'$/;"	v
s:nomacro	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  let s:nomacro = '\\%(' . s:macro_regex . '\\)\\@<!'$/;"	v
s:yesmacro	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  let s:yesmacro = s:nomacro . '\\%('. s:macro_regex . '\\)\\+'$/;"	v
b:julia_begin_keywordsm	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  let b:julia_begin_keywordsm = '\\%(' . s:yesmacro . b:julia_begin_keywords . '\\)\\|'$/;"	v
b:julia_end_keywords	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  let b:julia_end_keywords = '\\<end\\>'$/;"	v
JuliaGetMatchWords	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  function! JuliaGetMatchWords()$/;"	f
b:match_words	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  let b:match_words = 'JuliaGetMatchWords()'$/;"	v
b:match_skip	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  let b:match_skip = 'synIDattr(synID(line("."),col("."),1),"name") =~ '$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^    let b:undo_ftplugin .= " | call julia_blocks#remove_mappings()"$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  let b:browsefilter = "Julia Source Files (*.jl)\\t*.jl\\n"$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/julia.vim	/^  let b:undo_ftplugin = b:undo_ftplugin . " | unlet! b:browsefilter"$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/caddyfile.vim	/^let b:did_ftplugin = 1$/;"	v
s:delimiters	sources_non_forked/vim-polyglot/ftplugin/caddyfile.vim	/^let s:delimiters = {'left': '#'}$/;"	v
g:NERDDelimiterMap	sources_non_forked/vim-polyglot/ftplugin/caddyfile.vim	/^		let g:NERDDelimiterMap.caddyfile = s:delimiters$/;"	v
g:NERDDelimiterMap	sources_non_forked/vim-polyglot/ftplugin/caddyfile.vim	/^		let g:NERDDelimiterMap.caddyfile = s:delimiters$/;"	v
g:NERDCustomDelimiters	sources_non_forked/vim-polyglot/ftplugin/caddyfile.vim	/^	let g:NERDCustomDelimiters = {'caddyfile': s:delimiters}$/;"	v
g:tagbar_type_scala	sources_non_forked/vim-polyglot/ftplugin/scala/tagbar.vim	/^let g:tagbar_type_scala = {$/;"	v
g:tagbar_type_scala	sources_non_forked/vim-polyglot/ftplugin/scala/tagbar.vim	/^  let g:tagbar_type_scala.deffile = expand('<sfile>:p:h:h:h') . '\/ctags\/scala.ctags'$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/slim.vim	/^let b:did_ftplugin = 1$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/slim.vim	/^let b:undo_ftplugin = "setl isk<"$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/ftplugin/stylus.vim	/^let s:save_cpo = &cpo$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/stylus.vim	/^let s:undo_ftplugin = ""$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/stylus.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/stylus.vim	/^let s:match_words = ""$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/stylus.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/stylus.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/stylus.vim	/^  let s:match_words = b:match_words$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/stylus.vim	/^  let b:browsefilter="Stylus Files (*.styl)\\t*.styl\\n" . s:browsefilter$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/stylus.vim	/^  let b:match_words = s:match_words$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/stylus.vim	/^let b:undo_ftplugin = "setl cms< com< "$/;"	v
Stylus	sources_non_forked/vim-polyglot/ftplugin/stylus.vim	/^command! Stylus !clear; cat % | stylus$/;"	c
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/rnoweb.vim	/^let b:did_ftplugin = 1$/;"	v
<F2>	sources_non_forked/vim-polyglot/ftplugin/rnoweb.vim	/^noremap <buffer> <F2> :!xterm -T 'R' -e funnel.pl ~\/.r-pipe "R && echo -e 'Interpreter has finished. Exiting. Goodbye.\\n'"&<CR><CR>$/;"	m
<F9>	sources_non_forked/vim-polyglot/ftplugin/rnoweb.vim	/^noremap <buffer> <F9> :execute line(".") 'w >> ~\/.r-pipe'<CR>$/;"	m
<F9>	sources_non_forked/vim-polyglot/ftplugin/rnoweb.vim	/^inoremap <buffer> <F9> <Esc> :execute line(".") 'w >> ~\/.r-pipe'<CR>$/;"	m
r	sources_non_forked/vim-polyglot/ftplugin/rnoweb.vim	/^vnoremap <buffer> r :w >> ~\/.r-pipe<CR>$/;"	m
<M-Enter>	sources_non_forked/vim-polyglot/ftplugin/rnoweb.vim	/^inoremap <M-Enter> <Esc>:execute line(".") 'w >> ~\/.r-pipe'<CR>o$/;"	m
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/opencl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/rhelp.vim	/^let b:did_ftplugin = 1$/;"	v
<F2>	sources_non_forked/vim-polyglot/ftplugin/rhelp.vim	/^noremap <buffer> <F2> :!xterm -T 'R' -e funnel.pl ~\/.r-pipe "R && echo -e 'Interpreter has finished. Exiting. Goodbye.\\n'"&<CR><CR>$/;"	m
<F9>	sources_non_forked/vim-polyglot/ftplugin/rhelp.vim	/^noremap <buffer> <F9> :execute line(".") 'w >> ~\/.r-pipe'<CR>$/;"	m
<F9>	sources_non_forked/vim-polyglot/ftplugin/rhelp.vim	/^inoremap <buffer> <F9> <Esc> :execute line(".") 'w >> ~\/.r-pipe'<CR>$/;"	m
r	sources_non_forked/vim-polyglot/ftplugin/rhelp.vim	/^vnoremap <buffer> r :w >> ~\/.r-pipe<CR>$/;"	m
<M-Enter>	sources_non_forked/vim-polyglot/ftplugin/rhelp.vim	/^inoremap <M-Enter> <Esc>:execute line(".") 'w >> ~\/.r-pipe'<CR>o$/;"	m
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/typescript.vim	/^let b:did_ftplugin = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/ftplugin/typescript.vim	/^let s:cpo_save = &cpo$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/typescript.vim	/^let b:undo_ftplugin = "setl fo< ofu< com< cms<"$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/gitcommit.vim	/^let b:did_ftplugin = 1$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/gitcommit.vim	/^let b:undo_ftplugin = 'setl modeline< tabstop< formatoptions< tw< com< cms<'$/;"	v
b:git_dir	sources_non_forked/vim-polyglot/ftplugin/gitcommit.vim	/^  let b:git_dir = expand("%:p:h")$/;"	v
DiffGitCached	sources_non_forked/vim-polyglot/ftplugin/gitcommit.vim	/^command! -bang -bar -buffer -complete=custom,s:diffcomplete -nargs=* DiffGitCached :call s:gitdiffcached(<bang>0,b:git_dir,<f-args>)$/;"	c
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/gitcommit.vim	/^let b:undo_ftplugin = b:undo_ftplugin . "|delc DiffGitCached"$/;"	v
diffcomplete	sources_non_forked/vim-polyglot/ftplugin/gitcommit.vim	/^function! s:diffcomplete(A,L,P)$/;"	f
gitdiffcached	sources_non_forked/vim-polyglot/ftplugin/gitcommit.vim	/^function! s:gitdiffcached(bang,gitdir,...)$/;"	f
b:twigMatchWords	sources_non_forked/vim-polyglot/ftplugin/twig.vim	/^    let b:twigMatchWords = [$/;"	v
s:pattern	sources_non_forked/vim-polyglot/ftplugin/twig.vim	/^        let s:pattern = ''$/;"	v
s:pattern	sources_non_forked/vim-polyglot/ftplugin/twig.vim	/^                let s:pattern .= ':'$/;"	v
s:pattern	sources_non_forked/vim-polyglot/ftplugin/twig.vim	/^            let s:pattern .= '{%\\s*\\<' . s:tag . '\\>\\s*\\%(.*=\\)\\@![^}]\\{-}%}'$/;"	v
s:pattern	sources_non_forked/vim-polyglot/ftplugin/twig.vim	/^        let s:pattern .= ':{%\\s*\\<' . s:element[-1:][0] . '\\>\\s*.\\{-}%}'$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/twig.vim	/^        let b:match_words .= ',' . s:pattern$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/twig.vim	/^  let b:undo_ftplugin .= "|setlocal comments< formatoptions<"$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/twig.vim	/^  let b:undo_ftplugin = "setlocal comments< formatoptions<"$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/gitconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/gitconfig.vim	/^let b:undo_ftplugin = "setl fo< com< cms<"$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^let b:did_ftplugin = 1$/;"	v
s:keepcpo	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^let s:keepcpo= &cpo$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^let b:undo_ftplugin = "setl fo< com< cms< ofu<"$/;"	v
b:cucumber_root	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^let b:cucumber_root = expand('%:p:h:s?.*[\\\/]\\%(features\\|stories\\)\\zs[\\\/].*??')$/;"	v
b:cucumber_steps_glob	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^  let b:cucumber_steps_glob = b:cucumber_root.'\/**\/*.rb'$/;"	v
<SID>foldopen	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^  cnoremap <SID>foldopen <Bar>if &foldopen =~# 'tag'<Bar>exe 'norm! zv'<Bar>endif$/;"	m
[<C-D>	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> [<C-D>      :<C-U>exe <SID>jump('edit',v:count)<SID>foldopen<CR>$/;"	m
]<C-D>	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> ]<C-D>      :<C-U>exe <SID>jump('edit',v:count)<SID>foldopen<CR>$/;"	m
<C-W>d	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> <C-W>d      :<C-U>exe <SID>jump('split',v:count)<SID>foldopen<CR>$/;"	m
<C-W><C-D>	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> <C-W><C-D>  :<C-U>exe <SID>jump('split',v:count)<SID>foldopen<CR>$/;"	m
[d	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> [d          :<C-U>exe <SID>jump('pedit',v:count)<CR>$/;"	m
]d	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> ]d          :<C-U>exe <SID>jump('pedit',v:count)<CR>$/;"	m
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^  let b:undo_ftplugin .=$/;"	v
jump	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^function! s:jump(command,count)$/;"	f
allsteps	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^function! s:allsteps()$/;"	f
steps	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^function! s:steps(lnum)$/;"	f
stepmatch	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^function! s:stepmatch(receiver,target)$/;"	f
bsub	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^function! s:bsub(target,pattern,replacement)$/;"	f
CucumberComplete	sources_non_forked/vim-polyglot/ftplugin/cucumber.vim	/^function! CucumberComplete(findstart,base) abort$/;"	f
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/toml.vim	/^let b:did_ftplugin = 1$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/ftplugin/toml.vim	/^let s:save_cpo = &cpo$/;"	v
s:delims	sources_non_forked/vim-polyglot/ftplugin/toml.vim	/^let s:delims = { 'left': '#' }$/;"	v
g:NERDDelimiterMap	sources_non_forked/vim-polyglot/ftplugin/toml.vim	/^        let g:NERDDelimiterMap.toml = s:delims$/;"	v
g:NERDCustomDelimiters	sources_non_forked/vim-polyglot/ftplugin/toml.vim	/^        let g:NERDCustomDelimiters.toml = s:delims$/;"	v
g:NERDCustomDelimiters	sources_non_forked/vim-polyglot/ftplugin/toml.vim	/^    let g:NERDCustomDelimiters = { 'toml': s:delims }$/;"	v
TextileRenderFile	sources_non_forked/vim-polyglot/ftplugin/textile.vim	/^command! -nargs=0 TextileRenderFile call TextileRenderBufferToFile()$/;"	c
TextileRenderTab	sources_non_forked/vim-polyglot/ftplugin/textile.vim	/^command! -nargs=0 TextileRenderTab call TextileRenderBufferToTab()$/;"	c
TextilePreview	sources_non_forked/vim-polyglot/ftplugin/textile.vim	/^command! -nargs=0 TextilePreview call TextileRenderBufferToPreview()$/;"	c
<Leader>rp	sources_non_forked/vim-polyglot/ftplugin/textile.vim	/^noremap <buffer> <Leader>rp :TextilePreview<CR>$/;"	m
<Leader>rf	sources_non_forked/vim-polyglot/ftplugin/textile.vim	/^noremap <buffer> <Leader>rf :TextileRenderFile<CR>$/;"	m
<Leader>rt	sources_non_forked/vim-polyglot/ftplugin/textile.vim	/^noremap <buffer> <Leader>rt :TextileRenderTab<CR>$/;"	m
TextileRender	sources_non_forked/vim-polyglot/ftplugin/textile.vim	/^function! TextileRender(lines)$/;"	f
TextileRenderFile	sources_non_forked/vim-polyglot/ftplugin/textile.vim	/^function! TextileRenderFile(lines, filename)$/;"	f
TextileRenderBufferToPreview	sources_non_forked/vim-polyglot/ftplugin/textile.vim	/^function! TextileRenderBufferToPreview()$/;"	f
TextileRenderBufferToFile	sources_non_forked/vim-polyglot/ftplugin/textile.vim	/^function! TextileRenderBufferToFile()$/;"	f
TextileRenderBufferToTab	sources_non_forked/vim-polyglot/ftplugin/textile.vim	/^function! TextileRenderBufferToTab()$/;"	f
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/less.vim	/^let b:did_ftplugin = 1$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/less.vim	/^let b:undo_ftplugin = "setl cms< def< inc< inex< ofu< sua<"$/;"	v
FNameEscape	sources_non_forked/vim-polyglot/ftplugin/tex_LatexBox.vim	/^	function! s:FNameEscape(s)$/;"	f
FNameEscape	sources_non_forked/vim-polyglot/ftplugin/tex_LatexBox.vim	/^	function! s:FNameEscape(s)$/;"	f
prefix	sources_non_forked/vim-polyglot/ftplugin/tex_LatexBox.vim	/^	let prefix = expand('<sfile>:p:h') . '\/latex-box\/'$/;"	v
b:LatexBox_loaded	sources_non_forked/vim-polyglot/ftplugin/tex_LatexBox.vim	/^	let b:LatexBox_loaded = 1$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^let b:did_ftplugin = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^let s:cpo_save = &cpo$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^let b:undo_ftplugin = 'setlocal iskeyword< define< formatoptions< comments< commentstring< lispwords<'$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^		let b:undo_ftplugin .= ' | setlocal ' . s:setting . '<'$/;"	v
s:dir	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^		let s:dir = fnameescape(s:dir)$/;"	v
s:dir	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^		let s:dir = substitute(s:dir, '\\', '\\\\\\\\', 'g')$/;"	v
s:dir	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^		let s:dir = substitute(s:dir, '\\ ', '\\\\ ', 'g')$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^	let b:undo_ftplugin .= ' | setlocal path<'$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^	let b:match_words = &matchpairs$/;"	v
b:match_skip	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^	let b:match_skip = 's:comment\\|string\\|regex\\|character'$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^	let b:undo_ftplugin .= ' | unlet! b:match_words b:match_skip'$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^	let b:browsefilter = "Clojure Source Files (*.clj)\\t*.clj\\n" .$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/clojure.vim	/^	let b:undo_ftplugin .= ' | unlet! b:browsefilter'$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^let s:save_cpo = &cpo$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^let s:undo_ftplugin = ""$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^let s:match_words = ""$/;"	v
g:eelixir_default_subtype	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
s:lines	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let s:lines = join(getline(1, 5) + [getline('$')], "\\n")$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.eelixir\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^let b:did_ftplugin = 1$/;"	v
s:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:browsefilter	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:match_words	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let b:match_words = s:match_words$/;"	v
b:surround_45	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let b:surround_45 = "<% \\r %>"$/;"	v
b:surround_61	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let b:surround_61 = "<%= \\r %>"$/;"	v
b:surround_35	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let b:surround_35 = "<%# \\r %>"$/;"	v
b:surround_5	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^  let b:surround_5 = "<% \\r %>\\n<% end %>"$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/eelixir.vim	/^let b:undo_ftplugin = "setl cms< " .$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/vifm.vim	/^let b:did_ftplugin = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/ftplugin/vifm.vim	/^let s:cpo_save = &cpo$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/vifm.vim	/^let b:undo_ftplugin = "setlocal formatoptions< comments< textwidth< commentstring<"$/;"	v
]"	sources_non_forked/vim-polyglot/ftplugin/vifm.vim	/^nnoremap <silent><buffer> ]" :call search('^\\(\\s*".*\\n\\)\\@<!\\(\\s*"\\)', "W")<CR>$/;"	m
]"	sources_non_forked/vim-polyglot/ftplugin/vifm.vim	/^vnoremap <silent><buffer> ]" :<C-U>exe "normal! gv"<Bar>call search('^\\(\\s*".*\\n\\)\\@<!\\(\\s*"\\)', "W")<CR>$/;"	m
["	sources_non_forked/vim-polyglot/ftplugin/vifm.vim	/^nnoremap <silent><buffer> [" :call search('\\%(^\\s*".*\\n\\)\\%(^\\s*"\\)\\@!', "bW")<CR>$/;"	m
["	sources_non_forked/vim-polyglot/ftplugin/vifm.vim	/^vnoremap <silent><buffer> [" :<C-U>exe "normal! gv"<Bar>call search('\\%(^\\s*".*\\n\\)\\%(^\\s*"\\)\\@!', "bW")<CR>$/;"	m
b:match_ignorecase	sources_non_forked/vim-polyglot/ftplugin/vifm.vim	/^	let b:match_ignorecase = 0$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/vifm.vim	/^	let b:match_words = '\\<if\\>:\\<el\\%[seif]\\>:\\<en\\%[dif]\\>'$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^let b:did_ftplugin = 1$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^let s:save_cpo = &cpo$/;"	v
b:match_ignorecase	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^  let b:match_words =$/;"	v
b:match_skip	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^  let b:match_skip =$/;"	v
g:crystal_compiler_command	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^let g:crystal_compiler_command = get(g:, 'crystal_compiler_command', 'crystal')$/;"	v
g:crystal_auto_format	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^let g:crystal_auto_format = get(g:, 'crystal_auto_format', 0)$/;"	v
CrystalImpl	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* CrystalImpl echo crystal_lang#impl(expand('%'), getpos('.'), <q-args>).output$/;"	c
CrystalDef	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=0 CrystalDef call crystal_lang#jump_to_definition(expand('%'), getpos('.'))$/;"	c
CrystalContext	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* CrystalContext echo crystal_lang#context(expand('%'), getpos('.'), <q-args>).output$/;"	c
CrystalHierarchy	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* CrystalHierarchy echo crystal_lang#type_hierarchy(expand('%'), <q-args>)$/;"	c
CrystalSpecSwitch	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=? CrystalSpecSwitch call crystal_lang#switch_spec_file(<f-args>)$/;"	c
CrystalSpecRunAll	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=? CrystalSpecRunAll call crystal_lang#run_all_spec(<f-args>)$/;"	c
CrystalSpecRunCurrent	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=? CrystalSpecRunCurrent call crystal_lang#run_current_spec(<f-args>)$/;"	c
CrystalFormat	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* -bar CrystalFormat call crystal_lang#format(<q-args>, 0)$/;"	c
<Plug>(crystal-jump-to-definition)	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-jump-to-definition) :<C-u>CrystalDef<CR>$/;"	m
<Plug>(crystal-show-context)	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-show-context) :<C-u>CrystalContext<CR>$/;"	m
<Plug>(crystal-spec-switch)	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-spec-switch) :<C-u>CrystalSpecSwitch<CR>$/;"	m
<Plug>(crystal-spec-run-all)	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-spec-run-all) :<C-u>CrystalSpecRunAll<CR>$/;"	m
<Plug>(crystal-spec-run-current)	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-spec-run-current) :<C-u>CrystalSpecRunCurrent<CR>$/;"	m
<Plug>(crystal-format)	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-format) :<C-u>CrystalFormat<CR>$/;"	m
plugin	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^augroup plugin-ft-crystal$/;"	a
gd	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gd <Plug>(crystal-jump-to-definition)$/;"	m
gc	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gc <Plug>(crystal-show-context)$/;"	m
gss	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gss <Plug>(crystal-spec-switch)$/;"	m
gsa	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gsa <Plug>(crystal-spec-run-all)$/;"	m
gsc	sources_non_forked/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gsc <Plug>(crystal-spec-run-current)$/;"	m
IndentLevel	sources_non_forked/vim-polyglot/ftplugin/cryptol/folding.vim	/^function! IndentLevel(lnum)$/;"	f
NextNonBlankLine	sources_non_forked/vim-polyglot/ftplugin/cryptol/folding.vim	/^function! NextNonBlankLine(lnum)$/;"	f
GetPotionFold	sources_non_forked/vim-polyglot/ftplugin/cryptol/folding.vim	/^function! GetPotionFold(lnum)$/;"	f
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/graphql.vim	/^let b:did_ftplugin = 1$/;"	v
b:loaded_plantuml_plugin	sources_non_forked/vim-polyglot/ftplugin/plantuml.vim	/^let b:loaded_plantuml_plugin = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/ftplugin/plantuml.vim	/^let s:cpo_save = &cpo$/;"	v
g:plantuml_executable_script	sources_non_forked/vim-polyglot/ftplugin/plantuml.vim	/^  let g:plantuml_executable_script='plantuml'$/;"	v
b:match_ignorecase	sources_non_forked/vim-polyglot/ftplugin/plantuml.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/plantuml.vim	/^  let b:match_words =$/;"	v
b:endwise_addition	sources_non_forked/vim-polyglot/ftplugin/plantuml.vim	/^let b:endwise_addition = '\\=index(["note","legend"], submatch(0))!=-1 ? "end " . submatch(0) : "end"'$/;"	v
b:endwise_words	sources_non_forked/vim-polyglot/ftplugin/plantuml.vim	/^let b:endwise_words = 'loop,group,alt,note,legend'$/;"	v
b:endwise_pattern	sources_non_forked/vim-polyglot/ftplugin/plantuml.vim	/^let b:endwise_pattern = '^\\s*\\zs\\<\\(loop\\|group\\|alt\\|note\\ze[^:]*$\\|legend\\)\\>.*$'$/;"	v
b:endwise_syngroups	sources_non_forked/vim-polyglot/ftplugin/plantuml.vim	/^let b:endwise_syngroups = 'plantumlKeyword'$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ps1xml.vim	/^let b:did_ftplugin = 1$/;"	v
b:browsefilter	sources_non_forked/vim-polyglot/ftplugin/ps1xml.vim	/^  let b:browsefilter = $/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ps1xml.vim	/^let b:undo_ftplugin = "setlocal tw< cms< fo<" .$/;"	v
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ansible_hosts.vim	/^  let b:did_ftplugin = 1$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/ftplugin/ansible_hosts.vim	/^let b:undo_ftplugin = "setl comments< commentstring< formatoptions<"$/;"	v
g:loaded_mustache_handlebars	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^let g:loaded_mustache_handlebars = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^let s:cpo_save = &cpo$/;"	v
b:match_words	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^  let b:match_words = b:match_words$/;"	v
{{{	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^  inoremap <buffer> {{{ {{{}}}<left><left><left>$/;"	m
{{	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^  inoremap <buffer> {{ {{}}<left><left>$/;"	m
{{!	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^  inoremap <buffer> {{! {{!}}<left><left>$/;"	m
{{<	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^  inoremap <buffer> {{< {{<}}<left><left>$/;"	m
{{>	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^  inoremap <buffer> {{> {{>}}<left><left>$/;"	m
{{#	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^  inoremap <buffer> {{# {{#}}<cr>{{\/}}<up><left><left>$/;"	m
{{if	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^  inoremap <buffer> {{if {{#if }}<cr>{{\/if}}<up><left>$/;"	m
{{ife	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^  inoremap <buffer> {{ife {{#if }}<cr>{{else}}<cr>{{\/if}}<up><up><left>$/;"	m
sectionmovement	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^function! s:sectionmovement(pattern,flags,mode,count)$/;"	f
[[	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^nnoremap <silent> <buffer> [[ :<C-U>call <SID>sectionmovement('{{','b','n',v:count1)<CR>$/;"	m
]]	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^nnoremap <silent> <buffer> ]] :<C-U>call <SID>sectionmovement('{{','' ,'n',v:count1)<CR>$/;"	m
g:mustache_operators	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^  let g:mustache_operators = 1$/;"	v
ie	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^  onoremap <silent> <buffer> ie :<C-U>call <SID>wrap_inside()<CR>$/;"	m
ae	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^  onoremap <silent> <buffer> ae :<C-U>call <SID>wrap_around()<CR>$/;"	m
wrap_around	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^function! s:wrap_around()$/;"	f
wrap_inside	sources_non_forked/vim-polyglot/ftplugin/mustache.vim	/^function! s:wrap_inside()$/;"	f
b:did_ftplugin	sources_non_forked/vim-polyglot/ftplugin/vifm-rename.vim	/^let b:did_ftplugin = 1$/;"	v
s:files	sources_non_forked/vim-polyglot/ftplugin/vifm-rename.vim	/^let s:files = getline(1, '$')$/;"	v
QuitIfOnlyWindow	sources_non_forked/vim-polyglot/ftplugin/vifm-rename.vim	/^function! s:QuitIfOnlyWindow()$/;"	f
VifmRenameAutoCmds	sources_non_forked/vim-polyglot/ftplugin/vifm-rename.vim	/^augroup VifmRenameAutoCmds$/;"	a
g:jsx_ext_required	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  let g:jsx_ext_required = 0$/;"	v
g:vim_json_syntax_conceal	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  let g:vim_json_syntax_conceal = 0$/;"	v
g:filetype_euphoria	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^let g:filetype_euphoria = 'elixir'$/;"	v
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
g:python_highlight_all	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^let g:python_highlight_all = 1$/;"	v
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
g:graphql_javascript_tags	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  let g:graphql_javascript_tags = ['gql', 'graphql', 'Relay.QL']$/;"	v
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
s:cpo_save	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^let s:cpo_save=&cpo$/;"	v
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
isAnsible	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^function! s:isAnsible()$/;"	f
setupTemplate	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^function! s:setupTemplate()$/;"	f
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
CJSX	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^augroup CJSX$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
g:vim_ember_script	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  let g:vim_ember_script = 1$/;"	v
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
g:vim_emblem	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  let g:vim_emblem = 1$/;"	v
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
s:current_fileformats	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^let s:current_fileformats = ''$/;"	v
s:current_fileencodings	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^let s:current_fileencodings = ''$/;"	v
gofiletype_pre	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^function! s:gofiletype_pre(type)$/;"	f
gofiletype_post	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^function! s:gofiletype_post()$/;"	f
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
i3_ftdetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^augroup i3_ftdetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
SelectJavascript	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^fun! s:SelectJavascript()$/;"	f
javascript_syntax_detection	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^augroup javascript_syntax_detection$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
g:jsx_ext_required	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  let g:jsx_ext_required = 0$/;"	v
g:jsx_pragma_required	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  let g:jsx_pragma_required = 0$/;"	v
s:jsx_pragma_pattern	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^let s:jsx_pragma_pattern = '\\%^\\_s*\\\/\\*\\*\\%(\\_.\\%(\\*\\\/\\)\\@!\\)*@jsx\\_.\\{-}\\*\\\/'$/;"	v
EnableJSX	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^fu! <SID>EnableJSX()$/;"	f
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
g:mako_detect_lang_from_ext	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  let g:mako_detect_lang_from_ext = 1$/;"	v
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
DetectPerl6	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^function! s:DetectPerl6()$/;"	f
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
setf	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^function! s:setf(filetype) abort$/;"	f
StarSetf	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^func! s:StarSetf(ft)$/;"	f
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
setf	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^function! s:setf(filetype) abort$/;"	f
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
filetypedetect	sources_non_forked/vim-polyglot/ftdetect/polyglot.vim	/^  augroup filetypedetect$/;"	a
s:errors	sources_non_forked/vim-polyglot/autoload/elm.vim	/^let s:errors = []$/;"	v
elmOracle	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! s:elmOracle(...) abort$/;"	f
elm#Format	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! elm#Format() abort$/;"	f
elm#ShowDocs	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! elm#ShowDocs() abort$/;"	f
elm#BrowseDocs	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! elm#BrowseDocs() abort$/;"	f
elm#Syntastic	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! elm#Syntastic(input) abort$/;"	f
elm#Build	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! elm#Build(input, output, show_warnings) abort$/;"	f
elm#Make	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! elm#Make(...) abort$/;"	f
elm#ErrorDetail	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! elm#ErrorDetail() abort$/;"	f
elm#Repl	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! elm#Repl() abort$/;"	f
elm#Oracle	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! elm#Oracle(filepath, word) abort$/;"	f
s:fullComplete	sources_non_forked/vim-polyglot/autoload/elm.vim	/^let s:fullComplete = ''$/;"	v
elm#Complete	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! elm#Complete(findstart, base) abort$/;"	f
elm#Test	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! elm#Test() abort$/;"	f
elm#FindRootDirectory	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! elm#FindRootDirectory() abort$/;"	f
ExecuteInRoot	sources_non_forked/vim-polyglot/autoload/elm.vim	/^function! s:ExecuteInRoot(cmd) abort$/;"	f
L2U_Setup	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_Setup()$/;"	f
L2U_SetupGlobal	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetupGlobal()$/;"	f
LaTeXtoUnicode#Refresh	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Refresh()$/;"	f
LaTeXtoUnicode#Enable	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Enable()$/;"	f
LaTeXtoUnicode#Disable	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Disable()$/;"	f
L2U_deprecated_options	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_deprecated_options()$/;"	f
L2U_file_type_regex	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_file_type_regex(ft)$/;"	f
L2U_ResetLastCompletionInfo	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_ResetLastCompletionInfo()$/;"	f
L2U_ismatch	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_ismatch()$/;"	f
L2U_partmatches_sort	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_partmatches_sort(p1, p2)$/;"	f
L2U_fix_compose_chars	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_fix_compose_chars(uni)$/;"	f
L2U_longest_common_prefix	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_longest_common_prefix(partmatches)$/;"	f
LaTeXtoUnicode#omnifunc	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#omnifunc(findstart, base)$/;"	f
LaTeXtoUnicode#PutLiteral	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#PutLiteral(k)$/;"	f
L2U_SetFallbackMapping	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetFallbackMapping(s, k)$/;"	f
LaTeXtoUnicode#Tab	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Tab()$/;"	f
LaTeXtoUnicode#FallbackCallback	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#FallbackCallback()$/;"	f
LaTeXtoUnicode#CmdTab	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#CmdTab()$/;"	f
L2U_SetTab	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetTab(wait_insert_enter)$/;"	f
L2U_UnsetTab	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_UnsetTab()$/;"	f
LaTeXtoUnicode#AutoSub	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#AutoSub(...)$/;"	f
L2U_SetAutoSub	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetAutoSub(wait_insert_enter)$/;"	f
L2U_UnsetAutoSub	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_UnsetAutoSub()$/;"	f
LaTeXtoUnicode#Init	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Init(...)$/;"	f
LaTeXtoUnicode#Toggle	sources_non_forked/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Toggle()$/;"	f
rust#Load	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! rust#Load() $/;"	f
rust#GetConfigVar	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! rust#GetConfigVar(name, default)$/;"	f
rust#Jump	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! rust#Jump(mode, function) range$/;"	f
Jump_Back	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! s:Jump_Back()$/;"	f
Jump_Forward	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! s:Jump_Forward()$/;"	f
rust#Run	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! rust#Run(bang, args)$/;"	f
Run	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! s:Run(dict, rustc_args, args)$/;"	f
rust#Expand	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! rust#Expand(bang, args)$/;"	f
Expand	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! s:Expand(dict, pretty, args)$/;"	f
rust#CompleteExpand	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! rust#CompleteExpand(lead, line, pos)$/;"	f
rust#Emit	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! rust#Emit(type, args)$/;"	f
Emit	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! s:Emit(dict, type, args)$/;"	f
WithPath	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! s:WithPath(func, ...)$/;"	f
rust#AppendCmdLine	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! rust#AppendCmdLine(text)$/;"	f
ShellTokenize	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! s:ShellTokenize(text)$/;"	f
RmDir	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! s:RmDir(path)$/;"	f
system	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! s:system(pwd, cmd)$/;"	f
has_webapi	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! s:has_webapi()$/;"	f
rust#Play	sources_non_forked/vim-polyglot/autoload/rust.vim	/^function! rust#Play(count, line1, line2, ...) abort$/;"	f
go#config#AutodetectGopath	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#AutodetectGopath() abort$/;"	f
go#config#ListTypeCommands	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#ListTypeCommands() abort$/;"	f
go#config#VersionWarning	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#VersionWarning() abort$/;"	f
go#config#BuildTags	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#BuildTags() abort$/;"	f
go#config#SetBuildTags	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetBuildTags(value) abort$/;"	f
go#config#TestTimeout	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#TestTimeout() abort$/;"	f
go#config#TestShowName	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#TestShowName() abort$/;"	f
go#config#TermHeight	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermHeight() abort$/;"	f
go#config#TermWidth	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermWidth() abort$/;"	f
go#config#TermMode	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermMode() abort$/;"	f
go#config#TermEnabled	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermEnabled() abort$/;"	f
go#config#SetTermEnabled	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetTermEnabled(value) abort$/;"	f
go#config#TemplateUsePkg	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#TemplateUsePkg() abort$/;"	f
go#config#TemplateTestFile	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#TemplateTestFile() abort$/;"	f
go#config#TemplateFile	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#TemplateFile() abort$/;"	f
go#config#StatuslineDuration	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#StatuslineDuration() abort$/;"	f
go#config#SnippetEngine	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#SnippetEngine() abort$/;"	f
go#config#PlayBrowserCommand	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#PlayBrowserCommand() abort$/;"	f
go#config#MetalinterDeadline	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterDeadline() abort$/;"	f
go#config#ListType	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#ListType() abort$/;"	f
go#config#ListAutoclose	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#ListAutoclose() abort$/;"	f
go#config#InfoMode	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#InfoMode() abort$/;"	f
go#config#GuruScope	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#GuruScope() abort$/;"	f
go#config#SetGuruScope	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetGuruScope(scope) abort$/;"	f
go#config#GocodeUnimportedPackages	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#GocodeUnimportedPackages() abort$/;"	f
s:sock_type	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^let s:sock_type = (has('win32') || has('win64')) ? 'tcp' : 'unix'$/;"	v
go#config#GocodeSocketType	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#GocodeSocketType() abort$/;"	f
go#config#GocodeProposeBuiltins	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#GocodeProposeBuiltins() abort$/;"	f
go#config#GocodeAutobuild	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#GocodeAutobuild() abort$/;"	f
go#config#EchoCommandInfo	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#EchoCommandInfo() abort$/;"	f
go#config#DocUrl	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#DocUrl() abort$/;"	f
go#config#DefReuseBuffer	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#DefReuseBuffer() abort$/;"	f
go#config#DefMode	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#DefMode() abort$/;"	f
go#config#DeclsIncludes	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#DeclsIncludes() abort$/;"	f
go#config#Debug	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#Debug() abort$/;"	f
go#config#DebugWindows	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugWindows() abort$/;"	f
go#config#DebugAddress	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugAddress() abort$/;"	f
go#config#DebugCommands	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugCommands() abort$/;"	f
go#config#SetDebugDiag	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetDebugDiag(value) abort$/;"	f
go#config#AutoSameids	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#AutoSameids() abort$/;"	f
go#config#SetAutoSameids	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetAutoSameids(value) abort$/;"	f
go#config#AddtagsTransform	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#AddtagsTransform() abort$/;"	f
go#config#TemplateAutocreate	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#TemplateAutocreate() abort$/;"	f
go#config#SetTemplateAutocreate	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetTemplateAutocreate(value) abort$/;"	f
go#config#MetalinterCommand	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterCommand() abort$/;"	f
go#config#MetalinterAutosaveEnabled	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterAutosaveEnabled() abort$/;"	f
go#config#MetalinterEnabled	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterEnabled() abort$/;"	f
go#config#MetalinterDisabled	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterDisabled() abort$/;"	f
go#config#GolintBin	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#GolintBin() abort$/;"	f
go#config#ErrcheckBin	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#ErrcheckBin() abort$/;"	f
go#config#MetalinterAutosave	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterAutosave() abort$/;"	f
go#config#SetMetalinterAutosave	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetMetalinterAutosave(value) abort$/;"	f
go#config#ListHeight	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#ListHeight() abort$/;"	f
go#config#FmtAutosave	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtAutosave() abort$/;"	f
go#config#SetFmtAutosave	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetFmtAutosave(value) abort$/;"	f
go#config#AsmfmtAutosave	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#AsmfmtAutosave() abort$/;"	f
go#config#SetAsmfmtAutosave	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetAsmfmtAutosave(value) abort$/;"	f
go#config#DocMaxHeight	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#DocMaxHeight() abort$/;"	f
go#config#AutoTypeInfo	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#AutoTypeInfo() abort$/;"	f
go#config#SetAutoTypeInfo	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetAutoTypeInfo(value) abort$/;"	f
go#config#AlternateMode	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#AlternateMode() abort$/;"	f
go#config#DeclsMode	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#DeclsMode() abort$/;"	f
go#config#DocCommand	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#DocCommand() abort$/;"	f
go#config#FmtCommand	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtCommand() abort$/;"	f
go#config#FmtOptions	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtOptions() abort$/;"	f
go#config#FmtFailSilently	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtFailSilently() abort$/;"	f
go#config#FmtExperimental	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtExperimental() abort$/;"	f
go#config#PlayOpenBrowser	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#PlayOpenBrowser() abort$/;"	f
go#config#GorenameBin	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#GorenameBin() abort$/;"	f
go#config#GorenamePrefill	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#GorenamePrefill() abort$/;"	f
go#config#TextobjIncludeFunctionDoc	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#TextobjIncludeFunctionDoc() abort$/;"	f
go#config#TextobjIncludeVariable	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#TextobjIncludeVariable() abort$/;"	f
go#config#BinPath	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#BinPath() abort$/;"	f
go#config#HighlightArrayWhitespaceError	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightArrayWhitespaceError() abort$/;"	f
go#config#HighlightChanWhitespaceError	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightChanWhitespaceError() abort$/;"	f
go#config#HighlightExtraTypes	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightExtraTypes() abort$/;"	f
go#config#HighlightSpaceTabError	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightSpaceTabError() abort$/;"	f
go#config#HighlightTrailingWhitespaceError	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightTrailingWhitespaceError() abort$/;"	f
go#config#HighlightOperators	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightOperators() abort$/;"	f
go#config#HighlightFunctions	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFunctions() abort$/;"	f
go#config#HighlightFunctionArguments	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFunctionArguments() abort$/;"	f
go#config#HighlightFunctionCalls	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFunctionCalls() abort$/;"	f
go#config#HighlightFields	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFields() abort$/;"	f
go#config#HighlightTypes	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightTypes() abort$/;"	f
go#config#HighlightBuildConstraints	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightBuildConstraints() abort$/;"	f
go#config#HighlightStringSpellcheck	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightStringSpellcheck() abort$/;"	f
go#config#HighlightFormatStrings	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFormatStrings() abort$/;"	f
go#config#HighlightGenerateTags	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightGenerateTags() abort$/;"	f
go#config#HighlightVariableAssignments	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightVariableAssignments() abort$/;"	f
go#config#HighlightVariableDeclarations	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightVariableDeclarations() abort$/;"	f
go#config#FoldEnable	sources_non_forked/vim-polyglot/autoload/go/config.vim	/^function go#config#FoldEnable(...) abort$/;"	f
scss_indent#GetIndent	sources_non_forked/vim-polyglot/autoload/scss_indent.vim	/^fun! scss_indent#GetIndent(lnum)$/;"	f
s:save_cpo	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^let s:save_cpo = &cpo$/;"	v
s:V	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^let s:V = vital#crystal#new()$/;"	v
s:P	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^let s:P = s:V.import('Process')$/;"	v
s:C	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^let s:C = s:V.import('ColorEcho')$/;"	v
decode_json	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^    function! s:decode_json(text) abort$/;"	f
s:J	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^    let s:J = s:V.import('Web.JSON')$/;"	v
decode_json	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^    function! s:decode_json(text) abort$/;"	f
echo_error	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! s:echo_error(msg, ...) abort$/;"	f
run_cmd	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! s:run_cmd(cmd) abort$/;"	f
find_root_by_spec	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! s:find_root_by_spec(d) abort$/;"	f
crystal_lang#entrypoint_for	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#entrypoint_for(file_path) abort$/;"	f
crystal_lang#tool	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#tool(name, file, pos, option_str) abort$/;"	f
crystal_lang#impl	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#impl(file, pos, option_str) abort$/;"	f
jump_to_impl	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! s:jump_to_impl(impl) abort$/;"	f
crystal_lang#jump_to_definition	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#jump_to_definition(file, pos) abort$/;"	f
crystal_lang#context	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#context(file, pos, option_str) abort$/;"	f
crystal_lang#type_hierarchy	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#type_hierarchy(file, option_str) abort$/;"	f
find_completion_start	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! s:find_completion_start() abort$/;"	f
crystal_lang#complete	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#complete(findstart, base) abort$/;"	f
crystal_lang#get_spec_switched_path	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#get_spec_switched_path(absolute_path) abort$/;"	f
crystal_lang#switch_spec_file	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#switch_spec_file(...) abort$/;"	f
run_spec	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! s:run_spec(root, path, ...) abort$/;"	f
crystal_lang#run_all_spec	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#run_all_spec(...) abort$/;"	f
crystal_lang#run_current_spec	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#run_current_spec(...) abort$/;"	f
crystal_lang#format_string	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#format_string(code, ...) abort$/;"	f
crystal_lang#format	sources_non_forked/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#format(option_str, ...) abort$/;"	f
python#utils#fix_qflist	sources_non_forked/vim-polyglot/autoload/python/utils.vim	/^function! python#utils#fix_qflist() " {{{$/;"	f
g:elixir_indent_max_lookbehind	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^  let g:elixir_indent_max_lookbehind = 30$/;"	v
sw	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:sw()$/;"	f
elixir#indent#indent	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#indent(lnum)$/;"	f
debug	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:debug(str)$/;"	f
starts_with	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:starts_with(text, expr, lnum)$/;"	f
ends_with	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:ends_with(text, expr, lnum)$/;"	f
is_string_or_comment	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:is_string_or_comment(line, col)$/;"	f
elixir#indent#searchpair_back_skip	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#searchpair_back_skip()$/;"	f
keyword	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:keyword(expr)$/;"	f
find_last_pos	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:find_last_pos(lnum, text, match)$/;"	f
elixir#indent#handle_top_of_file	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_top_of_file(_lnum, _text, prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_follow_prev_nb	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_follow_prev_nb(_lnum, _text, prev_nb_lnum, prev_nb_text)$/;"	f
get_base_indent	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:get_base_indent(lnum, text)$/;"	f
elixir#indent#handle_following_trailing_do	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_do(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_following_trailing_rocket	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_rocket(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_following_trailing_binary_operator	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_binary_operator(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_following_prev_end	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_prev_end(_lnum, _text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_pipe	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_pipe(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_comment	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_comment(_lnum, text, prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_end	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_end(lnum, text, _prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_mid_or_end_block_keyword	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_mid_or_end_block_keyword(lnum, text, _prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_close_bracket	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_close_bracket(lnum, text, _prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_binary_operator	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_binary_operator(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_inside_nested_construct	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_nested_construct(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_with	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_with(pair_lnum, pair_col, lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_keyword_block	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_keyword_block(pair_lnum, _pair_col, _lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_pattern_match_block	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_pattern_match_block(block_start_lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_fn	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_fn(pair_lnum, _pair_col, lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_square_brace	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_square_brace(pair_lnum, pair_col, _lnum, _text, _prev_nb_lnum, _prev_nb_text)$/;"	f
do_handle_inside_curly_brace	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_curly_brace(pair_lnum, _pair_col, _lnum, _text, _prev_nb_lnum, _prev_nb_text)$/;"	f
do_handle_inside_parens	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_parens(pair_lnum, pair_col, _lnum, _text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_inside_generic_block	sources_non_forked/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_generic_block(lnum, _text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#util#get_filename	sources_non_forked/vim-polyglot/autoload/elixir/util.vim	/^function! elixir#util#get_filename(word) abort$/;"	f
g:aria_attributes_complete	sources_non_forked/vim-polyglot/autoload/htmlcomplete.vim	/^  let g:aria_attributes_complete = 1$/;"	v
htmlcomplete#DetectOmniFlavor	sources_non_forked/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#DetectOmniFlavor()$/;"	f
htmlcomplete#CompleteTags	sources_non_forked/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#CompleteTags(findstart, base)$/;"	f
htmlcomplete#LoadAria	sources_non_forked/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadAria() " {{{$/;"	f
htmlcomplete#LoadData	sources_non_forked/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadData() " {{{$/;"	f
htmlcomplete#CheckDoctype	sources_non_forked/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#CheckDoctype() " {{{$/;"	f
cargo#quickfix#CmdPre	sources_non_forked/vim-polyglot/autoload/cargo/quickfix.vim	/^function! cargo#quickfix#CmdPre() abort$/;"	f
cargo#quickfix#CmdPost	sources_non_forked/vim-polyglot/autoload/cargo/quickfix.vim	/^function! cargo#quickfix#CmdPost() abort$/;"	f
_SID	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_SID() abort$/;"	f
s:save_cpo	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^let s:save_cpo = &cpo$/;"	v
_true	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_true() abort$/;"	f
_false	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_false() abort$/;"	f
_null	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_null() abort$/;"	f
_resolve	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_resolve(val, prefix) abort$/;"	f
_vital_created	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_vital_created(module) abort$/;"	f
_vital_loaded	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_depends	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_vital_depends() abort$/;"	f
decode	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:decode(json, ...) abort$/;"	f
encode	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:encode(val, ...) abort$/;"	f
_encode_list	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_encode_list(val, settings) abort$/;"	f
_encode_dict	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_encode_dict(val, settings) abort$/;"	f
_SID	sources_non_forked/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:_SID() abort$/;"	f
s:save_cpo	sources_non_forked/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^let s:save_cpo = &cpo$/;"	v
_is_available	sources_non_forked/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:_is_available() abort$/;"	f
is_available	sources_non_forked/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:is_available() abort$/;"	f
_define_ansi_highlights	sources_non_forked/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:_define_ansi_highlights() abort$/;"	f
s:echorizer	sources_non_forked/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^let s:echorizer = {$/;"	v
echorizer.eat	sources_non_forked/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function s:echorizer.eat() abort$/;"	f
s:COLORS	sources_non_forked/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^let s:COLORS = {$/;"	v
echorizer.echo_ansi	sources_non_forked/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function s:echorizer.echo_ansi(code) abort$/;"	f
echorizer.echo	sources_non_forked/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function s:echorizer.echo() abort$/;"	f
get_echorizer	sources_non_forked/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:get_echorizer(str) abort$/;"	f
echo	sources_non_forked/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:echo(str) abort$/;"	f
_SID	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:_SID() abort$/;"	f
s:save_cpo	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:save_cpo = &cpo$/;"	v
s:is_windows	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_unix	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:is_unix = has('unix')$/;"	v
s:need_trans	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:TYPE_DICT	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:TYPE_DICT = type({})$/;"	v
s:TYPE_LIST	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:TYPE_LIST = type([])$/;"	v
s:TYPE_STRING	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:TYPE_STRING = type('')$/;"	v
spawn	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:spawn(expr, ...) abort$/;"	f
iconv	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
has_vimproc	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:has_vimproc() abort$/;"	f
system	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:system(str, ...) abort$/;"	f
get_last_status	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:get_last_status() abort$/;"	f
shellescape	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
shellescape	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
_SID	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_SID() abort$/;"	f
s:save_cpo	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^let s:save_cpo = &cpo$/;"	v
pop	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:pop(list) abort$/;"	f
push	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:push(list, val) abort$/;"	f
shift	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:shift(list) abort$/;"	f
unshift	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:unshift(list, val) abort$/;"	f
cons	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:cons(x, xs) abort$/;"	f
conj	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:conj(xs, x) abort$/;"	f
uniq	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:uniq(list) abort$/;"	f
uniq_by	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
clear	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:clear(list) abort$/;"	f
concat	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:concat(list) abort$/;"	f
flatten	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:flatten(list, ...) abort$/;"	f
sort	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:sort(list, expr) abort$/;"	f
_compare	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_compare(a, b) abort$/;"	f
sort_by	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
max_by	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:max_by(list, expr) abort$/;"	f
min_by	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:min_by(list, expr) abort$/;"	f
char_range	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:char_range(from, to) abort$/;"	f
has	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:has(list, value) abort$/;"	f
has_index	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:has_index(list, index) abort$/;"	f
span	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:span(f, xs) abort$/;"	f
break	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:break(f, xs) abort$/;"	f
take_while	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:take_while(f, xs) abort$/;"	f
drop_while	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:drop_while(f, xs) abort$/;"	f
partition	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:partition(f, xs) abort$/;"	f
all	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:all(f, xs) abort$/;"	f
any	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:any(f, xs) abort$/;"	f
and	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:and(xs) abort$/;"	f
or	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:or(xs) abort$/;"	f
map_accum	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
foldl	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
foldl1	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
foldr	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
foldr1	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
zip	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:zip(...) abort$/;"	f
zip_fill	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
with_index	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:with_index(list, ...) abort$/;"	f
find	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find(list, default, f) abort$/;"	f
_call_string_expr	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_call_string_expr(expr, args) abort$/;"	f
find_index	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
find_last_index	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
find_indices	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
has_common_items	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
intersect	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
group_by	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:group_by(xs, f) abort$/;"	f
_default_compare	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
binary_search	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
product	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:product(lists) abort$/;"	f
permutations	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:permutations(list, ...) abort$/;"	f
combinations	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:combinations(list, r) abort$/;"	f
_SID	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_SID() abort$/;"	f
s:save_cpo	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^let s:save_cpo = &cpo$/;"	v
_vital_loaded	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_depends	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_created	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_vital_created(module) abort$/;"	f
replace	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:replace(str, from, to) abort$/;"	f
replace_first	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:replace_first(str, from, to) abort$/;"	f
_replace	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_replace(str, from, to, flags) abort$/;"	f
scan	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:scan(str, pattern) abort$/;"	f
reverse	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:reverse(str) abort$/;"	f
starts_with	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:starts_with(str, prefix) abort$/;"	f
ends_with	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:ends_with(str, suffix) abort$/;"	f
common_head	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:common_head(strs) abort$/;"	f
split_leftright	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split_leftright(expr, pattern) abort$/;"	f
split3	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split3(expr, pattern) abort$/;"	f
nsplit	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nsplit(expr, n, ...) abort$/;"	f
s:strchars	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  let s:strchars = function('strchars')$/;"	v
strchars	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  function! s:strchars(str) abort$/;"	f
contains_multibyte	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:contains_multibyte(str) abort "{{{$/;"	f
chop	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:chop(str) abort "{{{$/;"	f
chomp	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:chomp(str) abort "{{{$/;"	f
_split_by_wcswidth_once	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_split_by_wcswidth_once(body, x) abort$/;"	f
_split_by_wcswidth	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_split_by_wcswidth(body, x) abort$/;"	f
trim	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:trim(str) abort$/;"	f
trim_start	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:trim_start(str) abort$/;"	f
trim_end	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:trim_end(str) abort$/;"	f
wrap	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:wrap(str,...) abort$/;"	f
nr2byte	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nr2byte(nr) abort$/;"	f
nr2enc_char	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nr2enc_char(charcode) abort$/;"	f
nr2hex	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nr2hex(nr) abort$/;"	f
diffidx	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:diffidx(a, b) abort$/;"	f
substitute_last	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:substitute_last(expr, pat, sub) abort$/;"	f
dstring	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:dstring(expr) abort$/;"	f
lines	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:lines(str) abort$/;"	f
_pad_with_char	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_pad_with_char(str, left, right, char) abort$/;"	f
pad_left	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_left(str, width, ...) abort$/;"	f
pad_right	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_right(str, width, ...) abort$/;"	f
pad_both_sides	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_both_sides(str, width, ...) abort$/;"	f
pad_between_letters	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_between_letters(str, width, ...) abort$/;"	f
justify_equal_spacing	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:justify_equal_spacing(str, width, ...) abort$/;"	f
levenshtein_distance	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:levenshtein_distance(str1, str2) abort$/;"	f
padding_by_displaywidth	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:padding_by_displaywidth(expr, width, float) abort$/;"	f
split_by_displaywidth	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split_by_displaywidth(expr, width, float, is_wrap) abort$/;"	f
hash	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:hash(str) abort$/;"	f
truncate	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:truncate(str, width) abort$/;"	f
truncate_skipping	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
strwidthpart	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
strwidthpart_reverse	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:wcswidth	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  let s:wcswidth = function('strwidth')$/;"	v
wcswidth	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  function! s:wcswidth(str) abort$/;"	f
_wcwidth	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
remove_ansi_sequences	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:remove_ansi_sequences(text) abort$/;"	f
escape_pattern	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:escape_pattern(str) abort$/;"	f
unescape_pattern	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:unescape_pattern(str) abort$/;"	f
unescape	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:unescape(str, chars) abort$/;"	f
iconv	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
repair_posix_text	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:repair_posix_text(text, ...) abort$/;"	f
join_posix_lines	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:join_posix_lines(lines, ...) abort$/;"	f
split_posix_text	sources_non_forked/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split_posix_text(text, ...) abort$/;"	f
s:_plugin_name	sources_non_forked/vim-polyglot/autoload/vital/_crystal.vim	/^let s:_plugin_name = expand('<sfile>:t:r')$/;"	v
vital#	sources_non_forked/vim-polyglot/autoload/vital/_crystal.vim	/^function! vital#{s:_plugin_name}#new() abort$/;"	f
vital#	sources_non_forked/vim-polyglot/autoload/vital/_crystal.vim	/^function! vital#{s:_plugin_name}#function(funcname) abort$/;"	f
s:plugin_name	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:plugin_name = expand('<sfile>:t:r')$/;"	v
s:vital_base_dir	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:vital_base_dir = expand('<sfile>:h')$/;"	v
s:project_root	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:project_root = expand('<sfile>:h:h:h')$/;"	v
s:is_vital_vim	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:is_vital_vim = s:plugin_name is# 'vital'$/;"	v
s:loaded	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:loaded = {}$/;"	v
s:cache_sid	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:cache_sid = {}$/;"	v
_function	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_function(fstr) abort$/;"	f
_SID	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_SID() abort$/;"	f
s:_s	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
_function	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_function(fstr) abort$/;"	f
vital#	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! vital#{s:plugin_name}#new() abort$/;"	f
vital#	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! vital#{s:plugin_name}#import(...) abort$/;"	f
s:Vital	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital = {}$/;"	v
new	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:new(plugin_name) abort$/;"	f
vital_files	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:vital_files() abort$/;"	f
s:Vital	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.vital_files = s:_function('s:vital_files')$/;"	v
import	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:import(name, ...) abort dict$/;"	f
s:Vital	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.import = s:_function('s:import')$/;"	v
load	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:load(...) abort dict$/;"	f
s:Vital	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.load = s:_function('s:load')$/;"	v
unload	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:unload() abort dict$/;"	f
s:Vital	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.unload = s:_function('s:unload')$/;"	v
exists	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:exists(name) abort dict$/;"	f
s:Vital	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.exists = s:_function('s:exists')$/;"	v
search	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:search(pattern) abort dict$/;"	f
s:Vital	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.search = s:_function('s:search')$/;"	v
plugin_name	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:plugin_name() abort dict$/;"	f
s:Vital	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.plugin_name = s:_function('s:plugin_name')$/;"	v
_self_vital_files	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_self_vital_files() abort$/;"	f
_global_vital_files	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_global_vital_files() abort$/;"	f
_extract_files	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_extract_files(pattern, files) abort$/;"	f
_file2module	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_file2module(file) abort$/;"	f
_import	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_import(name) abort dict$/;"	f
s:Vital	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital._import = s:_function('s:_import')$/;"	v
_get_module	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_get_module(name) abort dict$/;"	f
_get_builtin_module	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_get_builtin_module(name) abort$/;"	f
s:Vital	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^  let s:Vital._get_module = s:_function('s:_get_builtin_module')$/;"	v
s:Vital	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^  let s:Vital._get_module = s:_function('s:_get_module')$/;"	v
_import_func_name	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_import_func_name(plugin_name, module_name) abort$/;"	f
_module_sid	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_module_sid(name) abort$/;"	f
_module_path	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_module_path(name) abort$/;"	f
_module_sid_base_dir	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_module_sid_base_dir() abort$/;"	f
_dot_to_sharp	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_dot_to_sharp(name) abort$/;"	f
_source	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_source(path) abort$/;"	f
_sid	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_sid(path, filter_pattern) abort$/;"	f
_execute	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_execute(cmd) abort$/;"	f
s:_unify_path_cache	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^  let s:_unify_path_cache = {}$/;"	v
_unify_path	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_unify_path(path) abort$/;"	f
_unify_path	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_unify_path(path) abort$/;"	f
s:SNR	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^let s:SNR = join(map(range(len("\\<SNR>")), '"[\\\\x" . printf("%0x", char2nr("\\<SNR>"[v:val])) . "]"'), '')$/;"	v
sid2sfuncs	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:sid2sfuncs(sid) abort$/;"	f
_sfuncname	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_sfuncname(sid, funcname) abort$/;"	f
_uniq	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_uniq(list) abort$/;"	f
_uniq	sources_non_forked/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_uniq(list) abort$/;"	f
s:global_variable_list	sources_non_forked/vim-polyglot/autoload/rust/debugging.vim	/^let s:global_variable_list = [$/;"	v
Echo	sources_non_forked/vim-polyglot/autoload/rust/debugging.vim	/^function! s:Echo(message) abort$/;"	f
EchoGlobalVariables	sources_non_forked/vim-polyglot/autoload/rust/debugging.vim	/^function! s:EchoGlobalVariables() abort$/;"	f
rust#debugging#Info	sources_non_forked/vim-polyglot/autoload/rust/debugging.vim	/^function! rust#debugging#Info() abort$/;"	f
rust#debugging#InfoToClipboard	sources_non_forked/vim-polyglot/autoload/rust/debugging.vim	/^function! rust#debugging#InfoToClipboard() abort$/;"	f
rust#debugging#InfoToFile	sources_non_forked/vim-polyglot/autoload/rust/debugging.vim	/^function! rust#debugging#InfoToFile(filename) abort$/;"	f
coffee#CoffeeSetUpVariables	sources_non_forked/vim-polyglot/autoload/coffee.vim	/^function! coffee#CoffeeSetUpVariables()$/;"	f
coffee#CoffeeSetUpErrorFormat	sources_non_forked/vim-polyglot/autoload/coffee.vim	/^function! coffee#CoffeeSetUpErrorFormat()$/;"	f
s:words	sources_non_forked/vim-polyglot/autoload/clojurecomplete.vim	/^let s:words = ["*","*'","*1","*2","*3","*agent*","*allow-unresolved-vars*","*assert*","*clojure-version*","*command-line-args*","*compile-files*","*compile-path*","*compiler-options*","*data-readers*","*default-data-reader-fn*","*e","*err*","*file*","*flush-on-newline*","*fn-loader*","*in*","*math-context*","*ns*","*out*","*print-dup*","*print-length*","*print-level*","*print-meta*","*print-readably*","*read-eval*","*source-path*","*suppress-read*","*unchecked-math*","*use-context-classloader*","*verbose-defrecords*","*warn-on-reflection*","+","+'","-","-'","->","->>","->ArrayChunk","->Eduction","->Vec","->VecNode","->VecSeq","-cache-protocol-fn","-reset-methods",".","..","\/","<","<=","=","==",">",">=","EMPTY-NODE","Throwable->map","accessor","aclone","add-classpath","add-watch","agent","agent-error","agent-errors","aget","alength","alias","all-ns","alter","alter-meta!","alter-var-root","amap","ancestors","and","apply","areduce","array-map","as->","aset","aset-boolean","aset-byte","aset-char","aset-double","aset-float","aset-int","aset-long","aset-short","assert","assoc!","assoc","assoc-in","associative?","atom","await","await-for","await1","bases","bean","bigdec","bigint","biginteger","binding","bit-and","bit-and-not","bit-clear","bit-flip","bit-not","bit-or","bit-set","bit-shift-left","bit-shift-right","bit-test","bit-xor","boolean","boolean-array","booleans","bound-fn","bound-fn*","bound?","butlast","byte","byte-array","bytes","case","cast","cat","catch","char","char-array","char-escape-string","char-name-string","char?","chars","chunk","chunk-append","chunk-buffer","chunk-cons","chunk-first","chunk-next","chunk-rest","chunked-seq?","class","class?","clear-agent-errors","clojure-version","coll?","comment","commute","comp","comparator","compare","compare-and-set!","compile","complement","completing","concat","cond","cond->","cond->>","condp","conj!","conj","cons","constantly","construct-proxy","contains?","count","counted?","create-ns","create-struct","cycle","dec","dec'","decimal?","declare","dedupe","def","default-data-readers","definline","definterface","defmacro","defmethod","defmulti","defn","defn-","defonce","defprotocol","defrecord","defstruct","deftype","delay","delay?","deliver","denominator","deref","derive","descendants","destructure","disj!","disj","dissoc!","dissoc","distinct","distinct?","do","doall","dorun","doseq","dosync","dotimes","doto","double","double-array","doubles","drop","drop-last","drop-while","eduction","empty","empty?","ensure","ensure-reduced","enumeration-seq","error-handler","error-mode","eval","even?","every-pred","every?","ex-data","ex-info","extend","extend-protocol","extend-type","extenders","extends?","false?","ffirst","file-seq","filter","filterv","finally","find","find-keyword","find-ns","find-protocol-impl","find-protocol-method","find-var","first","flatten","float","float-array","float?","floats","flush","fn","fn","fn?","fnext","fnil","for","force","format","frequencies","future","future-call","future-cancel","future-cancelled?","future-done?","future?","gen-class","gen-interface","gensym","get","get-in","get-method","get-proxy-class","get-thread-bindings","get-validator","group-by","hash","hash-combine","hash-map","hash-ordered-coll","hash-set","hash-unordered-coll","identical?","identity","if","if-let","if-not","if-some","ifn?","import","in-ns","inc","inc'","init-proxy","instance?","int","int-array","integer?","interleave","intern","interpose","into","into-array","ints","io!","isa?","iterate","iterator-seq","juxt","keep","keep-indexed","key","keys","keyword","keyword?","last","lazy-cat","lazy-seq","let","let","letfn","line-seq","list","list*","list?","load","load-file","load-reader","load-string","loaded-libs","locking","long","long-array","longs","loop","loop","macroexpand","macroexpand-1","make-array","make-hierarchy","map","map-entry?","map-indexed","map?","mapcat","mapv","max","max-key","memfn","memoize","merge","merge-with","meta","method-sig","methods","min","min-key","mix-collection-hash","mod","monitor-enter","monitor-exit","munge","name","namespace","namespace-munge","neg?","new","newline","next","nfirst","nil?","nnext","not","not-any?","not-empty","not-every?","not=","ns","ns-aliases","ns-imports","ns-interns","ns-map","ns-name","ns-publics","ns-refers","ns-resolve","ns-unalias","ns-unmap","nth","nthnext","nthrest","num","number?","numerator","object-array","odd?","or","parents","partial","partition","partition-all","partition-by","pcalls","peek","persistent!","pmap","pop!","pop","pop-thread-bindings","pos?","pr","pr-str","prefer-method","prefers","primitives-classnames","print","print-ctor","print-dup","print-method","print-simple","print-str","printf","println","println-str","prn","prn-str","promise","proxy","proxy-call-with-super","proxy-mappings","proxy-name","proxy-super","push-thread-bindings","pvalues","quot","quote","rand","rand-int","rand-nth","random-sample","range","ratio?","rational?","rationalize","re-find","re-groups","re-matcher","re-matches","re-pattern","re-seq","read","read-line","read-string","reader-conditional","reader-conditional?","realized?","record?","recur","reduce","reduce-kv","reduced","reduced?","reductions","ref","ref-history-count","ref-max-history","ref-min-history","ref-set","refer","refer-clojure","reify","release-pending-sends","rem","remove","remove-all-methods","remove-method","remove-ns","remove-watch","repeat","repeatedly","replace","replicate","require","reset!","reset-meta!","resolve","rest","restart-agent","resultset-seq","reverse","reversible?","rseq","rsubseq","run!","satisfies?","second","select-keys","send","send-off","send-via","seq","seq?","seque","sequence","sequential?","set!","set","set-agent-send-executor!","set-agent-send-off-executor!","set-error-handler!","set-error-mode!","set-validator!","set?","short","short-array","shorts","shuffle","shutdown-agents","slurp","some","some->","some->>","some-fn","some?","sort","sort-by","sorted-map","sorted-map-by","sorted-set","sorted-set-by","sorted?","special-symbol?","spit","split-at","split-with","str","string?","struct","struct-map","subs","subseq","subvec","supers","swap!","symbol","symbol?","sync","tagged-literal","tagged-literal?","take","take-last","take-nth","take-while","test","the-ns","thread-bound?","throw","time","to-array","to-array-2d","trampoline","transduce","transient","tree-seq","true?","try","type","unchecked-add","unchecked-add-int","unchecked-byte","unchecked-char","unchecked-dec","unchecked-dec-int","unchecked-divide-int","unchecked-double","unchecked-float","unchecked-inc","unchecked-inc-int","unchecked-int","unchecked-long","unchecked-multiply","unchecked-multiply-int","unchecked-negate","unchecked-negate-int","unchecked-remainder-int","unchecked-short","unchecked-subtract","unchecked-subtract-int","underive","unquote","unquote-splicing","unreduced","unsigned-bit-shift-right","update","update-in","update-proxy","use","val","vals","var","var-get","var-set","var?","vary-meta","vec","vector","vector-of","vector?","volatile!","volatile?","vreset!","vswap!","when","when-first","when-let","when-not","when-some","while","with-bindings","with-bindings*","with-in-str","with-loading-context","with-local-vars","with-meta","with-open","with-out-str","with-precision","with-redefs","with-redefs-fn","xml-seq","zero?","zipmap"]$/;"	v
clojurecomplete#Complete	sources_non_forked/vim-polyglot/autoload/clojurecomplete.vim	/^function! clojurecomplete#Complete(findstart, base)$/;"	f
g:raco_command	sources_non_forked/vim-polyglot/autoload/racket.vim	/^  let g:raco_command = system("which raco")$/;"	v
elm#util#IsWin	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#IsWin() abort$/;"	f
elm#util#CheckBin	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#CheckBin(bin, url) abort$/;"	f
get_browser_command	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^fun! s:get_browser_command() abort$/;"	f
elm#util#OpenBrowser	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#OpenBrowser(url) abort$/;"	f
elm#util#DecodeJSON	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#DecodeJSON(s) abort$/;"	f
strip_color	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^fun! s:strip_color(msg) abort$/;"	f
elm#util#Echo	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#Echo(title, msg) abort$/;"	f
elm#util#EchoSuccess	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#EchoSuccess(title, msg) abort$/;"	f
elm#util#EchoWarning	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#EchoWarning(title, msg) abort$/;"	f
elm#util#EchoError	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#EchoError(title, msg) abort$/;"	f
elm#util#EchoLater	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#EchoLater(func_name, title, msg) abort$/;"	f
elm#util#EchoStored	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#EchoStored() abort$/;"	f
elm#util#GoToModule	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^function! elm#util#GoToModule(name)$/;"	f
findLocalModule	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^function! s:findLocalModule(rel_path, root)$/;"	f
findDependencyModule	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^function! s:findDependencyModule(rel_path, root)$/;"	f
error	sources_non_forked/vim-polyglot/autoload/elm/util.vim	/^function! s:error(msg)$/;"	f
abstract_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role = {}$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes = {}$/;"	v
default_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let default_role = {}$/;"	v
widget_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let widget_role = [$/;"	v
document_structure	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let document_structure = [$/;"	v
landmark_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let landmark_role = [$/;"	v
dpub_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let dpub_role = [$/;"	v
graphic_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let graphic_role = [$/;"	v
role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(widget_role, document_structure)$/;"	v
role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(role, landmark_role)$/;"	v
role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(role, dpub_role)$/;"	v
role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(role, graphic_role)$/;"	v
global_states_and_properties	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let global_states_and_properties = {$/;"	v
widget_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let widget_attributes = {$/;"	v
live_region_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let live_region_attributes = {$/;"	v
drag_and_drop_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let drag_and_drop_attributes = {$/;"	v
relationship_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let relationship_attributes = {$/;"	v
aria_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = global_states_and_properties$/;"	v
aria_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, widget_attributes)$/;"	v
aria_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, live_region_attributes)$/;"	v
aria_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, drag_and_drop_attributes)$/;"	v
aria_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, relationship_attributes)$/;"	v
abstract_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['roletype'] = ['aria-atomic', 'aria-busy', 'aria-controls', 'aria-describedby', 'aria-disabled', 'aria-dropeffect', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-label', 'aria-labelledby', 'aria-live', 'aria-owns', 'aria-relevant']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['default'] = abstract_role['roletype']$/;"	v
abstract_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['structure'] = abstract_role['roletype']$/;"	v
abstract_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['widget'] = abstract_role['roletype']$/;"	v
abstract_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['window'] = abstract_role['roletype'] + ['aria-expanded']$/;"	v
abstract_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['composite'] = abstract_role['widget'] + ['aria-activedescendant']$/;"	v
abstract_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['input'] = abstract_role['widget']$/;"	v
abstract_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['section'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['sectionhead'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['group'] = abstract_role['section']$/;"	v
abstract_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['select'] = abstract_role['composite'] + role_attributes['group'] + abstract_role['input']$/;"	v
abstract_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['range'] = abstract_role['input'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['region'] = abstract_role['section']$/;"	v
abstract_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['landmark'] = role_attributes['region']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['list'] = role_attributes['region'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['listitem'] = abstract_role['section']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['dialog'] = abstract_role['window']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menuitem'] = abstract_role['input'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['checkbox'] = abstract_role['input'] + ['aria-checked'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menuitemcheckbox'] = role_attributes['menuitem'] + role_attributes['checkbox']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['option'] = abstract_role['input'] + ['aria-checked', 'aria-posinset', 'aria-selected', 'aria-setsize']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['radio'] = role_attributes['checkbox'] + role_attributes['option']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['directory'] = role_attributes['list'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['alert'] = role_attributes['region']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['alertdialog'] = role_attributes['alert'] + role_attributes['dialog']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['button'] = role_attributes['region'] + role_attributes['menuitemcheckbox']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['combobox'] = abstract_role['select'] + ['aria-expanded', 'aria-required'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['gridcell'] = abstract_role['section'] + abstract_role['widget']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['link'] = abstract_role['widget'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['log'] = role_attributes['region'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['marquee'] = role_attributes['region'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menuitemradio'] = role_attributes['menuitemcheckbox'] + role_attributes['radio']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['progressbar'] = abstract_role['widget'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['radiogroup'] = abstract_role['select'] + ['aria-required']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['scrollbar'] = abstract_role['range'] + ['aria-controls', 'aria-orientation', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['slider'] = abstract_role['range'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['spinbutton'] = abstract_role['composite'] + abstract_role['range'] + ['aria-required'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['status'] = abstract_role['composite'] + role_attributes['region']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tab'] = abstract_role['sectionhead'] + abstract_role['widget'] + ['aria-selected']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tabpanel'] = role_attributes['region']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['textbox'] = abstract_role['input'] + ['aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['searchbox'] = role_attributes['textbox']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['switch'] = role_attributes['checkbox']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['timer'] = role_attributes['status'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tooltip'] = abstract_role['section'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['treeitem'] = role_attributes['listitem'] + role_attributes['option']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['grid'] = abstract_role['composite'] + role_attributes['region'] + ['aria-level', 'aria-multiselectable', 'aria-readonly']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['listbox'] = role_attributes['list'] + abstract_role['select'] + ['aria-multiselectable', 'aria-required']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menu'] =  role_attributes['list'] + abstract_role['select'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menubar'] = role_attributes['menu'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tablist'] = abstract_role['composite'] + role_attributes['directory']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['toolbar'] = role_attributes['group'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tree'] = abstract_role['select'] + ['aria-multiselectable', 'aria-required']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['treegrid'] = role_attributes['grid'] + role_attributes['tree']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['document'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['article'] = role_attributes['document'] + role_attributes['region'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['cell'] = abstract_role['section'] + ['aria-colindex', 'aria-colspan', 'aria-rowindex', 'aria-rowspan']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['columnheader'] = role_attributes['gridcell'] + abstract_role['sectionhead'] + ['aria-sort']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['definition'] = abstract_role['section'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['feed'] = role_attributes['list']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['figure'] = abstract_role['section'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['heading'] = abstract_role['sectionhead'] + ['aria-level'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['img'] = abstract_role['section'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['math'] = abstract_role['section'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['note'] = abstract_role['section'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['presentation'] = abstract_role['structure']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['none'] = role_attributes['presentation']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['row'] = role_attributes['group'] + ['aria-level', 'aria-selected']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['rowheader'] = role_attributes['gridcell'] + abstract_role['sectionhead']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['separator'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['table'] = abstract_role['section'] + ['aria-colcount', 'aria-rowcount']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['term'] = abstract_role['section']$/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['application'] = abstract_role['landmark'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['banner'] = abstract_role['landmark'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['complementary'] = abstract_role['landmark'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['contentinfo'] = abstract_role['landmark'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['form'] = abstract_role['landmark'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['main'] = abstract_role['landmark'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['navigation'] = abstract_role['landmark'] $/;"	v
role_attributes	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['search'] = abstract_role['landmark']$/;"	v
aria_attributes_value	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes_value = {$/;"	v
default_role	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let default_role = {$/;"	v
g:xmldata_aria	sources_non_forked/vim-polyglot/autoload/xml/aria.vim	/^let g:xmldata_aria = {$/;"	v
lang_tag	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let lang_tag = [$/;"	v
charset	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let charset = [$/;"	v
autofill_tokens	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let autofill_tokens = ['on', 'off', 'name', 'honorific-prefix', 'given-name', 'additional-name', 'family-name', 'honorific-suffix', 'nickname', 'organization-title', 'username', 'new-password', 'current-password', 'organization', 'street-address', 'address-line1', 'address-line2', 'address-line3', 'address-level4', 'address-level3', 'address-level2', 'address-level1', 'country', 'country-name', 'postal-code', 'cc-name', 'cc-given-name', 'cc-additional-name', 'cc-family-name', 'cc-number', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-csc', 'cc-type', 'transaction-currency', 'transaction-amount', 'language', 'bday', 'bday-day', 'bday-month', 'bday-year', 'sex', 'url', 'photo', 'tel', 'tel-country-code', 'tel-national', 'tel-area-code', 'tel-local', 'tel-local-prefix', 'tel-local-suffix', 'tel-extension', 'email', 'impp']$/;"	v
core_attributes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let core_attributes = {'accesskey': [], 'class': [], 'contenteditable': ['true', 'false', ''], 'contextmenu': [], 'dir': ['ltr', 'rtl'], 'draggable': ['true', 'false'], 'hidden': ['hidden', ''], 'id': [], 'is': [], 'lang': lang_tag, 'spellcheck': ['true', 'false', ''], 'style': [], 'tabindex': [], 'title': []}$/;"	v
xml_attributes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let xml_attributes = {'xml:lang': lang_tag, 'xml:space': ['preserve'], 'xml:base': [], 'xmlns': ['http:\/\/www.w3.org\/1999\/xhtml', 'http:\/\/www.w3.org\/1998\/Math\/MathML', 'http:\/\/www.w3.org\/2000\/svg', 'http:\/\/www.w3.org\/1999\/xlink']}$/;"	v
body_attributes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let body_attributes = {}$/;"	v
global_attributes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let global_attributes = extend(core_attributes, xml_attributes)$/;"	v
g:html5_event_handler_attributes_complete	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_event_handler_attributes_complete = 1$/;"	v
attributes_value	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let attributes_value = {$/;"	v
event_handler_attributes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let event_handler_attributes = {'onabort': [], 'onblur': [], 'oncanplay': [], 'oncanplaythrough': [], 'onchange': [], 'onclick': [], 'oncontextmenu': [], 'ondblclick': [], 'ondrag': [], 'ondragend': [], 'ondragenter': [], 'ondragleave': [], 'ondragover': [], 'ondragstart': [], 'ondrop': [], 'ondurationchange': [], 'onemptied': [], 'onended': [], 'onerror': [], 'onfocus': [], 'onformchange': [], 'onforminput': [], 'oninput': [], 'oninvalid': [], 'onkeydown': [], 'onkeypress': [], 'onkeyup': [], 'onload': [], 'onloadeddata': [], 'onloadedmetadata': [], 'onloadstart': [], 'onmousedown': [], 'onmousemove': [], 'onmouseout': [], 'onmouseover': [], 'onmouseup': [], 'onmousewheel': [], 'onpause': [], 'onplay': [], 'onplaying': [], 'onprogress': [], 'onratechange': [], 'onreadystatechange': [], 'onscroll': [], 'onseeked': [], 'onseeking': [], 'onselect': [], 'onshow': [], 'onstalled': [], 'onsubmit': [], 'onsuspend': [], 'ontimeupdate': [], 'onvolumechange': [], 'onwaiting': [], 'onselectstart': [], 'onselectchange': []}$/;"	v
global_attributes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, event_handler_attributes)$/;"	v
body_attributes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let body_attributes = {'onafterprint': [], 'onbeforeprint': [], 'onbeforeunload': [], 'onblur': [], 'onerror': [], 'onfocus': [], 'onhashchange': [], 'onload': [], 'onmessage': [], 'onoffline': [], 'ononline': [], 'onpopstate': [], 'onredo': [], 'onresize': [], 'onstorage': [], 'onundo': [], 'onunload': []}$/;"	v
event_attributes_value	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let event_attributes_value = {$/;"	v
attributes_value	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, event_attributes_value)$/;"	v
g:html5_rdfa_attributes_complete	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_rdfa_attributes_complete = 1$/;"	v
relrev	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let relrev = ['chapter', 'contents', 'copyright', 'first', 'glossary', 'help', 'icon', 'index', 'last', 'license', 'meta', 'next', 'p3pv1', 'prev', 'role', 'section', 'stylesheet', 'subsection', 'start', 'top', 'up']$/;"	v
rdfa_attributes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let rdfa_attributes = {'about': [], 'content': [], 'datatype': [], 'prefix': [], 'profile': [], 'property': [], 'resource': [], 'rel': relrev, 'rev': relrev, 'typeof': [], 'vocab': []}$/;"	v
global_attributes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, rdfa_attributes)$/;"	v
rdfa_attributes_value	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let rdfa_attributes_value = {$/;"	v
attributes_value	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, rdfa_attributes_value)$/;"	v
g:html5_microdata_attributes_complete	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_microdata_attributes_complete = 1$/;"	v
microdata_attributes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let microdata_attributes = {'itemid': [], 'itemscope': ['itemscope', ''], 'itemtype': [], 'itemprop': [], 'itemref': []}$/;"	v
global_attributes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, microdata_attributes)$/;"	v
microdata_attributes_value	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let microdata_attributes_value = {$/;"	v
attributes_value	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, microdata_attributes_value)$/;"	v
g:html5_aria_attributes_complete	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_aria_attributes_complete = 1$/;"	v
widget_role	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let widget_role = ['alert', 'alertdialog', 'button', 'checkbox', 'combobox', 'dialog', 'gridcell', 'link', 'log', 'marquee', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'searchbox', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'tabpanel', 'textbox', 'timer', 'tooltip', 'treeitem', 'combobox', 'grid', 'listbox', 'menu', 'menubar', 'radiogroup', 'tablist', 'tree', 'treegrid']$/;"	v
document_structure	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let document_structure = ['article', 'cell', 'columnheader', 'definition', 'directory', 'document', 'feed', 'figure', 'group', 'heading', 'img', 'list', 'listitem', 'math', 'none', 'note', 'presentation', 'region', 'row', 'rowheader', 'separator', 'table', 'term']$/;"	v
landmark_role	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let landmark_role = ['application', 'banner', 'complementary', 'contentinfo', 'form', 'main', 'navigation', 'search']$/;"	v
dpub_role	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let dpub_role = ['dpub-abstract', 'dpub-afterword', 'dpub-appendix', 'dpub-biblioentry', 'dpub-bibliography', 'dpub-biblioref', 'dpub-chapter', 'dpub-cover', 'dpub-epilogue', 'dpub-footnote', 'dpub-footnotes', 'dpub-foreword', 'dpub-glossary', 'dpub-glossdef', 'dpub-glossref', 'dpub-glossterm', 'dpub-index', 'dpub-locator', 'dpub-noteref', 'dpub-notice', 'dpub-pagebreak', 'dpub-pagelist', 'dpub-part', 'dpub-preface', 'dpub-prologue', 'dpub-pullquote', 'dpub-qna', 'dpub-subtitle', 'dpub-tip', 'dpub-title', 'dpub-toc']$/;"	v
role	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let role = extend(widget_role, document_structure)$/;"	v
role	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let role = extend(role, landmark_role)$/;"	v
role	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let role = extend(role, dpub_role)$/;"	v
global_attributes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, {'role': role})$/;"	v
phrasing_elements	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let phrasing_elements = ['a', 'em', 'strong', 'small', 'mark', 'abbr', 'dfn', 'i', 'b', 'u', 'code', 'var', 'samp', 'kbd', 'sup', 'sub', 'q', 'cite', 'span', 'bdo', 'bdi', 'br', 'wbr', 'ins', 'del', 'img', 'picture', 'embed', 'object', 'iframe', 'map', 'area', 'script', 'noscript', 'ruby', 'video', 'audio', 'input', 'textarea', 'select', 'button', 'label', 'output', 'datalist', 'keygen', 'progress', 'command', 'canvas', 'time', 'meter', 'data', 'content', 'shadow']$/;"	v
metadata_elements	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let metadata_elements = ['link', 'style', 'meta', 'script', 'noscript', 'command']$/;"	v
flow_elements	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let flow_elements = phrasing_elements + ['p', 'hr', 'pre', 'ul', 'ol', 'dl', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hgroup', 'address', 'blockquote', 'ins', 'del', 'element', 'object', 'main', 'map', 'noscript', 'section', 'nav', 'article', 'aside', 'header', 'footer', 'video', 'audio', 'figure', 'table', 'template', 'form', 'fieldset', 'menu', 'canvas', 'details']$/;"	v
linktypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linktypes = ['alternate', 'author', 'bookmark', 'dns-prefetch', 'external', 'help', 'icon', 'license', 'next', 'nofollow', 'noreferrer', 'noopener', 'pingback', 'preconnect', 'prefetch', 'preload', 'prerender', 'prev', 'search', 'stylesheet', 'tag']$/;"	v
linkreltypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linktypes$/;"	v
linkreltypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['manifest']$/;"	v
linkreltypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['canonical']$/;"	v
linkreltypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['import']$/;"	v
linkreltypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['webmention']$/;"	v
linkreltypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['search']$/;"	v
linkreltypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['sitemap']$/;"	v
linkreltypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['amphtml']$/;"	v
linkreltypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['apple-touch-icon', 'apple-touch-icon-precomposed', 'apple-touch-startup-image']$/;"	v
linkreltypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['chrome-webstore-item']$/;"	v
linkreltypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['hub']$/;"	v
linkreltypes	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['pgpkey']$/;"	v
abutton_dec	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let abutton_dec = 'details\\\\|embed\\\\|iframe\\\\|keygen\\\\|label\\\\|menu\\\\|select\\\\|textarea'$/;"	v
crossorigin	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let crossorigin = ['anonymous', 'use-credentials']$/;"	v
referrerpolicy	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let referrerpolicy = ['no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'strict-origin', 'origin-when-cross-origin', 'strict-origin-when-cross-origin', 'unsafe-url']$/;"	v
g:xmldata_html5	sources_non_forked/vim-polyglot/autoload/xml/html5.vim	/^let g:xmldata_html5 = {$/;"	v
fish#Indent	sources_non_forked/vim-polyglot/autoload/fish.vim	/^function! fish#Indent()$/;"	f
fish#Format	sources_non_forked/vim-polyglot/autoload/fish.vim	/^function! fish#Format()$/;"	f
fish#Fold	sources_non_forked/vim-polyglot/autoload/fish.vim	/^function! fish#Fold()$/;"	f
fish#Complete	sources_non_forked/vim-polyglot/autoload/fish.vim	/^function! fish#Complete(findstart, base)$/;"	f
fish#errorformat	sources_non_forked/vim-polyglot/autoload/fish.vim	/^function! fish#errorformat()$/;"	f
error	sources_non_forked/vim-polyglot/autoload/dart.vim	/^function! s:error(text) abort$/;"	f
cexpr	sources_non_forked/vim-polyglot/autoload/dart.vim	/^function! s:cexpr(errorformat, joined_lines) abort$/;"	f
dart#fmt	sources_non_forked/vim-polyglot/autoload/dart.vim	/^function! dart#fmt(q_args) abort$/;"	f
dart#analyzer	sources_non_forked/vim-polyglot/autoload/dart.vim	/^function! dart#analyzer(q_args) abort$/;"	f
dart#tojs	sources_non_forked/vim-polyglot/autoload/dart.vim	/^function! dart#tojs(q_args) abort$/;"	f
dart#resolveUri	sources_non_forked/vim-polyglot/autoload/dart.vim	/^function! dart#resolveUri(uri) abort$/;"	f
PackageMap	sources_non_forked/vim-polyglot/autoload/dart.vim	/^function! s:PackageMap() abort$/;"	f
dart#ToggleFormatOnSave	sources_non_forked/vim-polyglot/autoload/dart.vim	/^function! dart#ToggleFormatOnSave() abort$/;"	f
DotPackagesFile	sources_non_forked/vim-polyglot/autoload/dart.vim	/^function! s:DotPackagesFile() abort$/;"	f
dart#setModifiable	sources_non_forked/vim-polyglot/autoload/dart.vim	/^function! dart#setModifiable() abort$/;"	f
julia#set_syntax_version	sources_non_forked/vim-polyglot/autoload/julia.vim	/^function! julia#set_syntax_version(jvers)$/;"	f
julia#toggle_deprecated_syntax	sources_non_forked/vim-polyglot/autoload/julia.vim	/^function! julia#toggle_deprecated_syntax()$/;"	f
julia#toggle_function_blockassign	sources_non_forked/vim-polyglot/autoload/julia.vim	/^function! julia#toggle_function_blockassign()$/;"	f
julia#function_block2assign	sources_non_forked/vim-polyglot/autoload/julia.vim	/^function! julia#function_block2assign()$/;"	f
julia#function_assign2block	sources_non_forked/vim-polyglot/autoload/julia.vim	/^function! julia#function_assign2block()$/;"	f
s:nonid_chars	sources_non_forked/vim-polyglot/autoload/julia.vim	/^let s:nonid_chars = "\\U01-\\U07" . "\\U0E-\\U1F" .$/;"	v
s:nonidS_chars	sources_non_forked/vim-polyglot/autoload/julia.vim	/^let s:nonidS_chars = "[:space:])\\\\U5D}" . s:nonid_chars$/;"	v
s:uniop_chars	sources_non_forked/vim-polyglot/autoload/julia.vim	/^let s:uniop_chars = "+\\\\U2D~¬√∛∜"$/;"	v
s:binop_chars	sources_non_forked/vim-polyglot/autoload/julia.vim	/^let s:binop_chars = "=+\\\\U2D*\/\\\\%÷^&|⊻<>≤≥≡≠≢∈∉⋅×∪∩⊆⊈⊂⊄⊊←→∋∌⊕⊖⊞⊟∘∧⊗⊘↑↓∨⊠±"$/;"	v
s:binop_chars_extra	sources_non_forked/vim-polyglot/autoload/julia.vim	/^let s:binop_chars_extra = "\\\\U214B\\\\U2190-\\\\U2194\\\\U219A\\\\U219B\\\\U21A0\\\\U21A3\\\\U21A6\\\\U21AE\\\\U21CE\\\\U21CF\\\\U21D2\\\\U21D4\\\\U21F4-\\\\U21FF\\\\U2208-\\\\U220D\\\\U2213\\\\U2214\\\\U2217-\\\\U2219\\\\U221D\\\\U2224-\\\\U222A\\\\U2237\\\\U2238\\\\U223A\\\\U223B\\\\U223D\\\\U223E\\\\U2240-\\\\U228B\\\\U228D-\\\\U229C\\\\U229E-\\\\U22A3\\\\U22A9\\\\U22AC\\\\U22AE\\\\U22B0-\\\\U22B7\\\\U22BB-\\\\U22BD\\\\U22C4-\\\\U22C7\\\\U22C9-\\\\U22D3\\\\U22D5-\\\\U22ED\\\\U22F2-\\\\U22FF\\\\U25B7\\\\U27C8\\\\U27C9\\\\U27D1\\\\U27D2\\\\U27D5-\\\\U27D7\\\\U27F0\\\\U27F1\\\\U27F5-\\\\U27F7\\\\U27F7\\\\U27F9-\\\\U27FF\\\\U2900-\\\\U2918\\\\U291D-\\\\U2920\\\\U2944-\\\\U2970\\\\U29B7\\\\U29B8\\\\U29BC\\\\U29BE-\\\\U29C1\\\\U29E1\\\\U29E3-\\\\U29E5\\\\U29F4\\\\U29F6\\\\U29F7\\\\U29FA\\\\U29FB\\\\U2A07\\\\U2A08\\\\U2A1D\\\\U2A22-\\\\U2A2E\\\\U2A30-\\\\U2A3D\\\\U2A40-\\\\U2A45\\\\U2A4A-\\\\U2A58\\\\U2A5A-\\\\U2A63\\\\U2A66\\\\U2A67\\\\U2A6A-\\\\U2AD9\\\\U2ADB\\\\U2AF7-\\\\U2AFA\\\\U2B30-\\\\U2B44\\\\U2B47-\\\\U2B4C\\\\UFFE9-\\\\UFFEC"$/;"	v
s:idregex	sources_non_forked/vim-polyglot/autoload/julia.vim	/^let s:idregex = '[^' . s:nonidS_chars . '0-9!' . s:uniop_chars . s:binop_chars . '][^' . s:nonidS_chars . s:uniop_chars . s:binop_chars . s:binop_chars_extra . ']*'$/;"	v
s:operators	sources_non_forked/vim-polyglot/autoload/julia.vim	/^let s:operators = '\\%(' . '\\.\\%([-+*\/^÷%|&!]\\|\/\/\\|\\\\\\|<<\\|>>>\\?\\)\\?=' .$/;"	v
julia#idundercursor	sources_non_forked/vim-polyglot/autoload/julia.vim	/^function! julia#idundercursor()$/;"	f
julia#gotodefinition	sources_non_forked/vim-polyglot/autoload/julia.vim	/^function! julia#gotodefinition()$/;"	f
vifm#edit#Init	sources_non_forked/vim-polyglot/autoload/vifm/edit.vim	/^function! vifm#edit#Init()$/;"	f
vifm#globals#Init	sources_non_forked/vim-polyglot/autoload/vifm/globals.vim	/^function! vifm#globals#Init()$/;"	f
g:rustfmt_autosave	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_autosave = 0$/;"	v
g:rustfmt_command	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_command = "rustfmt"$/;"	v
g:rustfmt_options	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_options = ""$/;"	v
g:rustfmt_fail_silently	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_fail_silently = 0$/;"	v
rustfmt#DetectVersion	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#DetectVersion()$/;"	f
g:rustfmt_emit_files	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_emit_files = s:rustfmt_version >= "0.8.2"$/;"	v
g:rustfmt_file_lines	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_file_lines = 1 - (s:rustfmt_help !~# "--file-lines JSON")$/;"	v
s:got_fmt_error	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^let s:got_fmt_error = 0$/;"	v
rustfmt#Load	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#Load()$/;"	f
RustfmtWriteMode	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtWriteMode()$/;"	f
RustfmtCommandRange	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtCommandRange(filename, line1, line2)$/;"	f
RustfmtCommand	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtCommand(filename)$/;"	f
RunRustfmt	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^function! s:RunRustfmt(command, tmpname, fail_silently)$/;"	f
rustfmtSaveToTmp	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^function! s:rustfmtSaveToTmp()$/;"	f
rustfmt#FormatRange	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#FormatRange(line1, line2)$/;"	f
rustfmt#Format	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#Format()$/;"	f
rustfmt#PreWrite	sources_non_forked/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#PreWrite()$/;"	f
s:default_mappings	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^let s:default_mappings = {$/;"	v
getmapchars	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:getmapchars(function)$/;"	f
map_move	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:map_move(function, toend, backwards)$/;"	f
julia_blocks#owrapper_move	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#owrapper_move(oper, function, toend, backwards)$/;"	f
julia_blocks#vwrapper_move	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#vwrapper_move(function)$/;"	f
unmap	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:unmap(function)$/;"	f
escape	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:escape(chars)$/;"	f
map_select	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:map_select(function)$/;"	f
julia_blocks#owrapper_select	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#owrapper_select(oper, function) ", toend, backwards)$/;"	f
julia_blocks#vwrapper_select	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#vwrapper_select(function)$/;"	f
map_aux	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:map_aux(function)$/;"	f
s:julia_blocks_functions	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^let s:julia_blocks_functions = {$/;"	v
julia_blocks#init_mappings	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#init_mappings()$/;"	f
julia_blocks#remove_mappings	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#remove_mappings()$/;"	f
restore_view	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:restore_view()$/;"	f
abort	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:abort()$/;"	f
set_mark_tick	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:set_mark_tick(...)$/;"	f
get_save_pos	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:get_save_pos(...)$/;"	f
on_end	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:on_end()$/;"	f
on_begin	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:on_begin()$/;"	f
matchit	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:matchit()$/;"	f
move_before_begin	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:move_before_begin()$/;"	f
cycle_until_end	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:cycle_until_end()$/;"	f
moveto_block_delim	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:moveto_block_delim(toend, backwards, ...)$/;"	f
compare_pos	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:compare_pos(pos1, pos2)$/;"	f
julia_blocks#move_N	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_N()$/;"	f
julia_blocks#move_n	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_n()$/;"	f
julia_blocks#move_p	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_p()$/;"	f
julia_blocks#move_P	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_P()$/;"	f
moveto_currentblock_end	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:moveto_currentblock_end()$/;"	f
julia_blocks#moveblock_N	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_N()$/;"	f
julia_blocks#moveblock_n	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_n()$/;"	f
julia_blocks#moveblock_p	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_p()$/;"	f
julia_blocks#moveblock_P	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_P()$/;"	f
julia_blocks#whereami	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#whereami()$/;"	f
find_block	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:find_block(current_mode)$/;"	f
repeated_find	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:repeated_find(ai_mode)$/;"	f
julia_blocks#select_a	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#select_a(...)$/;"	f
julia_blocks#select_i	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#select_i()$/;"	f
julia_blocks#select_reset	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function julia_blocks#select_reset()$/;"	f
cursor_moved	sources_non_forked/vim-polyglot/autoload/julia_blocks.vim	/^function! s:cursor_moved(...)$/;"	f
cargo#Load	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#Load() $/;"	f
cargo#cmd	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#cmd(args)$/;"	f
nearest_cargo	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! s:nearest_cargo(...) abort$/;"	f
cargo#nearestCargo	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#nearestCargo(is_getcwd) abort$/;"	f
cargo#nearestWorkspaceCargo	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#nearestWorkspaceCargo(is_getcwd) abort$/;"	f
cargo#nearestRootCargo	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#nearestRootCargo(is_getcwd) abort$/;"	f
cargo#build	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#build(args)$/;"	f
cargo#clean	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#clean(args)$/;"	f
cargo#doc	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#doc(args)$/;"	f
cargo#new	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#new(args)$/;"	f
cargo#init	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#init(args)$/;"	f
cargo#run	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#run(args)$/;"	f
cargo#test	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#test(args)$/;"	f
cargo#bench	sources_non_forked/vim-polyglot/autoload/cargo.vim	/^function! cargo#bench(args)$/;"	f
julia_latex_symbols#get_dict	sources_non_forked/vim-polyglot/autoload/julia_latex_symbols.vim	/^function! julia_latex_symbols#get_dict()$/;"	f
ErrMsg	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^function! s:ErrMsg(msg)$/;"	f
g:rubycomplete_rails	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_rails = 0$/;"	v
g:rubycomplete_classes_in_global	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_classes_in_global = 0$/;"	v
g:rubycomplete_buffer_loading	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_buffer_loading = 0$/;"	v
g:rubycomplete_include_object	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_object = 0$/;"	v
g:rubycomplete_include_objectspace	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_objectspace = 0$/;"	v
s:rubycomplete_debug	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^let s:rubycomplete_debug = 0$/;"	v
dprint	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^function! s:dprint(msg)$/;"	f
GetBufferRubyModule	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubyModule(name, ...)$/;"	f
GetBufferRubyClass	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubyClass(name, ...)$/;"	f
GetBufferRubySingletonMethods	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubySingletonMethods(name)$/;"	f
GetBufferRubyEntity	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubyEntity( name, type, ... )$/;"	f
IsInClassDef	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^function! s:IsInClassDef()$/;"	f
IsPosInClassDef	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^function! s:IsPosInClassDef(pos)$/;"	f
GetRubyVarType	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetRubyVarType(v)$/;"	f
rubycomplete#Init	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^function! rubycomplete#Init()$/;"	f
rubycomplete#Complete	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^function! rubycomplete#Complete(findstart, base)$/;"	f
DefRuby	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^function! s:DefRuby()$/;"	f
s:rubycomplete_rails_loaded	sources_non_forked/vim-polyglot/autoload/rubycomplete.vim	/^let s:rubycomplete_rails_loaded = 0$/;"	v
s:save_cpo	sources_non_forked/vim-polyglot/after/indent/objc.vim	/^let s:save_cpo = &cpo$/;"	v
s:topLev	sources_non_forked/vim-polyglot/after/indent/objc.vim	/^let s:topLev = '^\\s*@\\%(class\\|end\\|implementation\\|interface\\|protocol\\|\\)\\>'$/;"	v
GetObjCIndentImproved	sources_non_forked/vim-polyglot/after/indent/objc.vim	/^function! GetObjCIndentImproved()$/;"	f
s:coffeeIndentExpr	sources_non_forked/vim-polyglot/after/indent/html.vim	/^let s:coffeeIndentExpr = &l:indentexpr$/;"	v
s:htmlIndentExpr	sources_non_forked/vim-polyglot/after/indent/html.vim	/^let s:htmlIndentExpr = &l:indentexpr$/;"	v
GetCoffeeHtmlIndent	sources_non_forked/vim-polyglot/after/indent/html.vim	/^function! GetCoffeeHtmlIndent(curlinenum)$/;"	f
b:jsx_js_indentexpr	sources_non_forked/vim-polyglot/after/indent/jsx.vim	/^let b:jsx_js_indentexpr = &indentexpr$/;"	v
s:did_indent	sources_non_forked/vim-polyglot/after/indent/jsx.vim	/^  let s:did_indent=b:did_indent$/;"	v
b:did_indent	sources_non_forked/vim-polyglot/after/indent/jsx.vim	/^  let b:did_indent=s:did_indent$/;"	v
s:endtag	sources_non_forked/vim-polyglot/after/indent/jsx.vim	/^let s:endtag = '^\\s*\\\/\\?>\\s*;\\='$/;"	v
SynSOL	sources_non_forked/vim-polyglot/after/indent/jsx.vim	/^fu! SynSOL(lnum)$/;"	f
SynEOL	sources_non_forked/vim-polyglot/after/indent/jsx.vim	/^fu! SynEOL(lnum)$/;"	f
SynAttrXMLish	sources_non_forked/vim-polyglot/after/indent/jsx.vim	/^fu! SynAttrXMLish(synattr)$/;"	f
SynXMLish	sources_non_forked/vim-polyglot/after/indent/jsx.vim	/^fu! SynXMLish(syns)$/;"	f
SynJSXBlockEnd	sources_non_forked/vim-polyglot/after/indent/jsx.vim	/^fu! SynJSXBlockEnd(syns)$/;"	f
SynJSXDepth	sources_non_forked/vim-polyglot/after/indent/jsx.vim	/^fu! SynJSXDepth(syns)$/;"	f
SynJSXContinues	sources_non_forked/vim-polyglot/after/indent/jsx.vim	/^fu! SynJSXContinues(cursyn, prevsyn)$/;"	f
GetJsxIndent	sources_non_forked/vim-polyglot/after/indent/jsx.vim	/^fu! GetJsxIndent()$/;"	f
b:undo_ftplugin	sources_non_forked/vim-polyglot/after/ftplugin/javascript.vim	/^  let b:undo_ftplugin .= ' | setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	sources_non_forked/vim-polyglot/after/ftplugin/javascript.vim	/^  let b:undo_ftplugin = 'setlocal iskeyword< suffixesadd<'$/;"	v
g:puppet_align_hashes	sources_non_forked/vim-polyglot/after/ftplugin/puppet.vim	/^    let g:puppet_align_hashes = 1$/;"	v
>	sources_non_forked/vim-polyglot/after/ftplugin/puppet.vim	/^    inoremap <buffer> <silent> > ><Esc>:call <SID>puppetalign()<CR>a$/;"	m
puppetalign	sources_non_forked/vim-polyglot/after/ftplugin/puppet.vim	/^    function! s:puppetalign()$/;"	f
b:match_ignorecase	sources_non_forked/vim-polyglot/after/ftplugin/coffee.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_words	sources_non_forked/vim-polyglot/after/ftplugin/coffee.vim	/^  let b:match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
g:terraform_align	sources_non_forked/vim-polyglot/after/ftplugin/terraform.vim	/^  let g:terraform_align = 0$/;"	v
g:terraform_remap_spacebar	sources_non_forked/vim-polyglot/after/ftplugin/terraform.vim	/^  let g:terraform_remap_spacebar = 0$/;"	v
g:terraform_fold_sections	sources_non_forked/vim-polyglot/after/ftplugin/terraform.vim	/^  let g:terraform_fold_sections = 0$/;"	v
=	sources_non_forked/vim-polyglot/after/ftplugin/terraform.vim	/^  inoremap <buffer> <silent> = =<Esc>:call <SID>terraformalign()<CR>a$/;"	m
terraformalign	sources_non_forked/vim-polyglot/after/ftplugin/terraform.vim	/^  function! s:terraformalign()$/;"	f
TerraformFolds	sources_non_forked/vim-polyglot/after/ftplugin/terraform.vim	/^  function! TerraformFolds()$/;"	f
TerraformFoldText	sources_non_forked/vim-polyglot/after/ftplugin/terraform.vim	/^  function! TerraformFoldText()$/;"	f
<space>	sources_non_forked/vim-polyglot/after/ftplugin/terraform.vim	/^  nnoremap <space> za$/;"	m
<space>	sources_non_forked/vim-polyglot/after/ftplugin/terraform.vim	/^  onoremap <space> <C-C>za$/;"	m
<space>	sources_non_forked/vim-polyglot/after/ftplugin/terraform.vim	/^  vnoremap <space> zf$/;"	m
b:match_ignorecase	sources_non_forked/vim-polyglot/after/ftplugin/jsx.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_words	sources_non_forked/vim-polyglot/after/ftplugin/jsx.vim	/^  let b:match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
rust	sources_non_forked/vim-polyglot/after/syntax/rust.vim	/^    augroup rust.vim.after$/;"	a
s:current_syntax_save	sources_non_forked/vim-polyglot/after/syntax/haml.vim	/^  let s:current_syntax_save = b:current_syntax$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/after/syntax/haml.vim	/^  let b:current_syntax = s:current_syntax_save$/;"	v
s:needs_cppstructure_match	sources_non_forked/vim-polyglot/after/syntax/cpp.vim	/^let s:needs_cppstructure_match = 0$/;"	v
s:needs_cppstructure_match	sources_non_forked/vim-polyglot/after/syntax/cpp.vim	/^	let s:needs_cppstructure_match += 1$/;"	v
s:needs_cppstructure_match	sources_non_forked/vim-polyglot/after/syntax/cpp.vim	/^	let s:needs_cppstructure_match += 2$/;"	v
did_cpp_syntax_inits	sources_non_forked/vim-polyglot/after/syntax/cpp.vim	/^    let did_cpp_syntax_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/after/syntax/cpp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/after/syntax/cpp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
s:current_syntax	sources_non_forked/vim-polyglot/after/syntax/typescript/graphql.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/after/syntax/typescript/graphql.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
s:tags	sources_non_forked/vim-polyglot/after/syntax/typescript/graphql.vim	/^let s:tags = '\\%(' . join(g:graphql_javascript_tags, '\\|') . '\\)'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/after/syntax/rspec.vim	/^let b:current_syntax = 'rspec'$/;"	v
s:current_syntax	sources_non_forked/vim-polyglot/after/syntax/coffee.vim	/^  let s:current_syntax=b:current_syntax$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/after/syntax/coffee.vim	/^  let b:current_syntax=s:current_syntax$/;"	v
s:current_syntax	sources_non_forked/vim-polyglot/after/syntax/javascript/graphql.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/after/syntax/javascript/graphql.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
s:tags	sources_non_forked/vim-polyglot/after/syntax/javascript/graphql.vim	/^let s:tags = '\\%(' . join(g:graphql_javascript_tags, '\\|') . '\\)'$/;"	v
s:current_syntax_save	sources_non_forked/vim-polyglot/after/syntax/html.vim	/^  let s:current_syntax_save = b:current_syntax$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/after/syntax/html.vim	/^  let b:current_syntax = s:current_syntax_save$/;"	v
g:less_html_style_tags	sources_non_forked/vim-polyglot/after/syntax/html.vim	/^  let g:less_html_style_tags = 1$/;"	v
s:pre_less_cur_syn	sources_non_forked/vim-polyglot/after/syntax/html.vim	/^   let s:pre_less_cur_syn = b:current_syntax$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/after/syntax/html.vim	/^   let b:current_syntax = s:pre_less_cur_syn$/;"	v
s:current_syntax	sources_non_forked/vim-polyglot/after/syntax/jsx.vim	/^  let s:current_syntax=b:current_syntax$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/after/syntax/jsx.vim	/^  let b:current_syntax=s:current_syntax$/;"	v
output	sources_non_forked/vim-polyglot/build	/^output() {$/;"	f
download	sources_non_forked/vim-polyglot/build	/^download() {$/;"	f
extract	sources_non_forked/vim-polyglot/build	/^extract() {$/;"	f
copy_dir	sources_non_forked/vim-polyglot/build	/^copy_dir() {$/;"	f
copy_file	sources_non_forked/vim-polyglot/build	/^copy_file() {$/;"	f
update_readme	sources_non_forked/vim-polyglot/build	/^update_readme() {$/;"	f
b:current_syntax	sources_non_forked/vim-polyglot/syntax/litcoffee.vim	/^let b:current_syntax = "litcoffee"$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/syntax/raml.vim	/^let s:cpo_save = &cpo$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/raml.vim	/^let b:current_syntax = "raml"$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/syntax/mma.vim	/^let s:cpo_save = &cpo$/;"	v
did_mma_syn_inits	sources_non_forked/vim-polyglot/syntax/mma.vim	/^		let did_mma_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/mma.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/mma.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/mma.vim	/^let b:current_syntax = "mma"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/elm.vim	/^let b:current_syntax = 'elm'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/purescript.vim	/^let b:current_syntax = "purescript"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/jasmine.vim	/^let b:current_syntax = "jasmine"$/;"	v
did_thrift_syn_inits	sources_non_forked/vim-polyglot/syntax/thrift.vim	/^    let did_thrift_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/thrift.vim	/^    command! -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/thrift.vim	/^    command! -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/thrift.vim	/^let b:current_syntax = "thrift"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
did_javascript_syn_inits	sources_non_forked/vim-polyglot/syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/cabal.vim	/^let b:current_syntax = "cabal"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/velocity.vim	/^  let main_syntax = 'html'$/;"	v
did_velocity_syn_inits	sources_non_forked/vim-polyglot/syntax/velocity.vim	/^    let did_velocity_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/velocity.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/velocity.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/velocity.vim	/^let b:current_syntax = "velocity"$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/haproxy.vim	/^  command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/haproxy.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/haproxy.vim	/^let b:current_syntax = "haproxy"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/jst.vim	/^  let main_syntax = 'jst'$/;"	v
g:jst_default_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^  let g:jst_default_subtype = "html"$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^  let b:jst_subtype = matchstr(&filetype,'^jst\\.\\zs\\w\\+')$/;"	v
s:lines	sources_non_forked/vim-polyglot/syntax/jst.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^  let b:jst_subtype = matchstr(s:lines,'jst_subtype=\\zs\\w\\+')$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.jst\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'html'$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'haml'$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'html'$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'html'$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'html'$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'ruby'$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'yaml'$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'javascript'$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'text'$/;"	v
b:jst_subtype	sources_non_forked/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = g:jst_default_subtype$/;"	v
b:jst_nest_level	sources_non_forked/vim-polyglot/syntax/jst.vim	/^  let b:jst_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:jst_nest_level	sources_non_forked/vim-polyglot/syntax/jst.vim	/^  let b:jst_nest_level = 1$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/jst.vim	/^let b:current_syntax = 'jst'$/;"	v
b:match_ignorecase	sources_non_forked/vim-polyglot/syntax/jst.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_words	sources_non_forked/vim-polyglot/syntax/jst.vim	/^  let b:match_words = '<:>,' .$/;"	v
attr	sources_non_forked/vim-polyglot/syntax/vue.vim	/^function! s:attr(name, value)$/;"	f
syntax_available	sources_non_forked/vim-polyglot/syntax/vue.vim	/^function! s:syntax_available(language)$/;"	f
register_language	sources_non_forked/vim-polyglot/syntax/vue.vim	/^function! s:register_language(language, tag, ...)$/;"	f
b:current_syntax	sources_non_forked/vim-polyglot/syntax/vue.vim	/^let b:current_syntax = "vue"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/emblem.vim	/^  let main_syntax = 'emblem'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/emblem.vim	/^let b:current_syntax = 'emblem'$/;"	v
nim_highlight_numbers	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_numbers = 1$/;"	v
nim_highlight_builtins	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_builtins = 1$/;"	v
nim_highlight_exceptions	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_exceptions = 1$/;"	v
nim_highlight_space_errors	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_space_errors = 1$/;"	v
nim_highlight_special_vars	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_special_vars = 1$/;"	v
nim_highlight_numbers	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_numbers      = 1$/;"	v
nim_highlight_builtins	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_builtins     = 1$/;"	v
nim_highlight_exceptions	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_exceptions   = 1$/;"	v
nim_highlight_space_errors	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_space_errors = 1$/;"	v
nim_highlight_special_vars	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_special_vars = 1$/;"	v
s:dec_num	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let s:dec_num = '\\d%(_?\\d)*'$/;"	v
s:int_suf	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let s:int_suf = '%(''%(%(i|I|u|U)%(8|16|32|64)|u|U))'$/;"	v
s:float_suf	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let s:float_suf = '%(''%(%(f|F)%(32|64|128)?|d|D))'$/;"	v
s:exp	sources_non_forked/vim-polyglot/syntax/nim.vim	/^  let s:exp = '%([eE][+-]?'.s:dec_num.')'$/;"	v
did_nim_syn_inits	sources_non_forked/vim-polyglot/syntax/nim.vim	/^    let did_nim_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/nim.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/nim.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/nim.vim	/^let b:current_syntax = "nim"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/apiblueprint.vim	/^let b:current_syntax = 'apiblueprint'$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/pug.vim	/^  let main_syntax = 'pug'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/pug.vim	/^let b:current_syntax = "pug"$/;"	v
b:current_syntax_embed	sources_non_forked/vim-polyglot/syntax/rust.vim	/^    let b:current_syntax_embed = 1$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/rust.vim	/^let b:current_syntax = "rust"$/;"	v
s:cpo_sav	sources_non_forked/vim-polyglot/syntax/puppet.vim	/^let s:cpo_sav = &cpo$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/puppet.vim	/^command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/puppet.vim	/^let b:current_syntax = "puppet"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/Jenkinsfile.vim	/^let b:current_syntax = "Jenkinsfile"$/;"	v
TAPTestLine_foldtext	sources_non_forked/vim-polyglot/syntax/tap.vim	/^function! TAPTestLine_foldtext()$/;"	f
did_tapverboseoutput_syntax_inits	sources_non_forked/vim-polyglot/syntax/tap.vim	/^  let did_tapverboseoutput_syntax_inits = 1$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/tap.vim	/^let b:current_syntax="tapVerboseOutput"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/haskell.vim	/^let b:current_syntax = "haskell"$/;"	v
g:ragel_default_subtype	sources_non_forked/vim-polyglot/syntax/ragel.vim	/^  let g:ragel_default_subtype = 'c'$/;"	v
Split	sources_non_forked/vim-polyglot/syntax/ragel.vim	/^function! <SID>Split(path) abort " {{{1$/;"	f
ReadOnPath	sources_non_forked/vim-polyglot/syntax/ragel.vim	/^fun! <SID>ReadOnPath(script)$/;"	f
s:lines	sources_non_forked/vim-polyglot/syntax/ragel.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:ragel_subtype	sources_non_forked/vim-polyglot/syntax/ragel.vim	/^  let b:ragel_subtype = matchstr(s:lines, 'ragel_subtype=\\zs\\w\\+')$/;"	v
b:ragel_subtype	sources_non_forked/vim-polyglot/syntax/ragel.vim	/^    let b:ragel_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.rl\\|\\.ragel\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:ragel_subtype	sources_non_forked/vim-polyglot/syntax/ragel.vim	/^      let b:ragel_subtype = 'ruby'$/;"	v
b:ragel_subtype	sources_non_forked/vim-polyglot/syntax/ragel.vim	/^      let b:ragel_subtype = 'objc'$/;"	v
b:ragel_subtype	sources_non_forked/vim-polyglot/syntax/ragel.vim	/^      let b:ragel_subtype = 'cpp'$/;"	v
b:ragel_subtype	sources_non_forked/vim-polyglot/syntax/ragel.vim	/^    let b:ragel_subtype = g:ragel_default_subtype$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/ragel.vim	/^let b:current_syntax = "ragel"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/slime.vim	/^  let main_syntax = 'slime'$/;"	v
b:elixir_no_expensive	sources_non_forked/vim-polyglot/syntax/slime.vim	/^let b:elixir_no_expensive = 1$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/slime.vim	/^let b:current_syntax = "slime"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/tt2html.vim	/^let b:current_syntax = "tt2html"$/;"	v
b:tt2_syn_tags	sources_non_forked/vim-polyglot/syntax/tt2.vim	/^    let b:tt2_syn_tags = '\\[% %]'$/;"	v
b:tt2_syn_inc_perl	sources_non_forked/vim-polyglot/syntax/tt2.vim	/^    let b:tt2_syn_inc_perl = 1$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/syntax/tt2.vim	/^let s:cpo_save = &cpo$/;"	v
s:str	sources_non_forked/vim-polyglot/syntax/tt2.vim	/^    let s:str = b:tt2_syn_tags . ' '$/;"	v
s:str	sources_non_forked/vim-polyglot/syntax/tt2.vim	/^    let s:str = substitute(s:str,'^ \\+','','g')$/;"	v
s:str	sources_non_forked/vim-polyglot/syntax/tt2.vim	/^    let s:str = substitute(s:str,' \\+',' ','g')$/;"	v
s:st	sources_non_forked/vim-polyglot/syntax/tt2.vim	/^        let s:st = strpart(s:str,0,stridx(s:str,' '))$/;"	v
s:str	sources_non_forked/vim-polyglot/syntax/tt2.vim	/^        let s:str = substitute(s:str,'[^ ]* ','',"")$/;"	v
s:ed	sources_non_forked/vim-polyglot/syntax/tt2.vim	/^        let s:ed = strpart(s:str,0,stridx(s:str,' '))$/;"	v
s:str	sources_non_forked/vim-polyglot/syntax/tt2.vim	/^        let s:str = substitute(s:str,'[^ ]* ','',"")$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/tt2.vim	/^let b:current_syntax = "tt2"$/;"	v
did_vbnet_syntax_inits	sources_non_forked/vim-polyglot/syntax/vbnet.vim	/^        let did_vbnet_syntax_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/vbnet.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/vbnet.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/vbnet.vim	/^let b:current_syntax = "vbnet"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/haml.vim	/^  let main_syntax = 'haml'$/;"	v
b:ruby_no_expensive	sources_non_forked/vim-polyglot/syntax/haml.vim	/^let b:ruby_no_expensive = 1$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/haml.vim	/^let b:current_syntax = "haml"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/scss.vim	/^  let main_syntax = 'scss'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/scss.vim	/^let b:current_syntax = "scss"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/dockerfile.vim	/^let b:current_syntax = "dockerfile"$/;"	v
s:current_syntax	sources_non_forked/vim-polyglot/syntax/dockerfile.vim	/^let s:current_syntax = b:current_syntax$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/dockerfile.vim	/^let b:current_syntax = s:current_syntax$/;"	v
did_fs_syntax_inits	sources_non_forked/vim-polyglot/syntax/fsharp.vim	/^        let did_fs_syntax_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/fsharp.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/fsharp.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/fsharp.vim	/^let b:current_syntax = 'fsharp'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/nix.vim	/^let b:current_syntax = "nix"$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/syntax/perl.vim	/^let s:cpo_save = &cpo$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/perl.vim	/^let b:current_syntax = "perl"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/scala.vim	/^  let main_syntax = 'scala'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/scala.vim	/^let b:current_syntax = "scala"$/;"	v
ContainedGroup	sources_non_forked/vim-polyglot/syntax/scala.vim	/^function! s:ContainedGroup()$/;"	f
b:current_syntax	sources_non_forked/vim-polyglot/syntax/scala.vim	/^let b:current_syntax = 'scala'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/cpp.vim	/^let b:current_syntax = "cpp"$/;"	v
s:cpo_sav	sources_non_forked/vim-polyglot/syntax/ruby.vim	/^let s:cpo_sav = &cpo$/;"	v
s:foldable_groups	sources_non_forked/vim-polyglot/syntax/ruby.vim	/^let s:foldable_groups = split($/;"	v
foldable	sources_non_forked/vim-polyglot/syntax/ruby.vim	/^function! s:foldable(...) abort$/;"	f
s:spell_cluster	sources_non_forked/vim-polyglot/syntax/ruby.vim	/^let s:spell_cluster = exists('ruby_spellcheck_strings') ? ',@Spell' : ''$/;"	v
b:ruby_no_expensive	sources_non_forked/vim-polyglot/syntax/ruby.vim	/^  let b:ruby_no_expensive = 1$/;"	v
ruby_minlines	sources_non_forked/vim-polyglot/syntax/ruby.vim	/^    let ruby_minlines = 500$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/ruby.vim	/^let b:current_syntax = "ruby"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/ls.vim	/^let b:current_syntax = "ls"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/ls.vim	/^  let b:current_syntax = 'livescript'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/glsl.vim	/^  let b:current_syntax = "glsl"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/godefstack.vim	/^let b:current_syntax = "godefstack"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/json.vim	/^  let main_syntax = 'json'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/json.vim	/^let b:current_syntax = "json"$/;"	v
Python2Syntax	sources_non_forked/vim-polyglot/syntax/python.vim	/^command! -buffer Python2Syntax let b:python_version_2 = 1 | let &syntax=&syntax$/;"	c
Python3Syntax	sources_non_forked/vim-polyglot/syntax/python.vim	/^command! -buffer Python3Syntax let b:python_version_2 = 0 | let &syntax=&syntax$/;"	c
EnableByDefault	sources_non_forked/vim-polyglot/syntax/python.vim	/^function! s:EnableByDefault(name)$/;"	f
Enabled	sources_non_forked/vim-polyglot/syntax/python.vim	/^function! s:Enabled(name)$/;"	f
Python2Syntax	sources_non_forked/vim-polyglot/syntax/python.vim	/^function! s:Python2Syntax()$/;"	f
s:funcs_re	sources_non_forked/vim-polyglot/syntax/python.vim	/^  let s:funcs_re = '__import__|abs|all|any|bin|callable|chr|classmethod|compile|complex|delattr|dir|divmod|enumerate|eval|filter|format|getattr|globals|hasattr|hash|help|hex|id|input|isinstance|issubclass|iter|len|locals|map|max|memoryview|min|next|oct|open|ord|pow|property|range|repr|reversed|round|setattr|slice|sorted|staticmethod|sum|super|type|vars|zip'$/;"	v
s:funcs_re	sources_non_forked/vim-polyglot/syntax/python.vim	/^    let s:funcs_re .= '|apply|basestring|buffer|cmp|coerce|execfile|file|intern|long|raw_input|reduce|reload|unichr|unicode|xrange'$/;"	v
s:funcs_re	sources_non_forked/vim-polyglot/syntax/python.vim	/^      let s:funcs_re .= '|print'$/;"	v
s:funcs_re	sources_non_forked/vim-polyglot/syntax/python.vim	/^      let s:funcs_re .= '|ascii|exec|print'$/;"	v
s:funcs_re	sources_non_forked/vim-polyglot/syntax/python.vim	/^  let s:funcs_re = 'syn match pythonBuiltinFunc ''\\v\\.@<!\\zs<%(' . s:funcs_re . ')>'$/;"	v
s:funcs_re	sources_non_forked/vim-polyglot/syntax/python.vim	/^      let s:funcs_re .= '\\=@!'$/;"	v
s:exs_re	sources_non_forked/vim-polyglot/syntax/python.vim	/^    let s:exs_re = 'BaseException|Exception|ArithmeticError|LookupError|EnvironmentError|AssertionError|AttributeError|BufferError|EOFError|FloatingPointError|GeneratorExit|IOError|ImportError|IndexError|KeyError|KeyboardInterrupt|MemoryError|NameError|NotImplementedError|OSError|OverflowError|ReferenceError|RuntimeError|StopIteration|SyntaxError|IndentationError|TabError|SystemError|SystemExit|TypeError|UnboundLocalError|UnicodeError|UnicodeEncodeError|UnicodeDecodeError|UnicodeTranslateError|ValueError|VMSError|WindowsError|ZeroDivisionError|Warning|UserWarning|BytesWarning|DeprecationWarning|PendingDepricationWarning|SyntaxWarning|RuntimeWarning|FutureWarning|ImportWarning|UnicodeWarning'$/;"	v
s:exs_re	sources_non_forked/vim-polyglot/syntax/python.vim	/^      let s:exs_re .= '|StandardError'$/;"	v
s:exs_re	sources_non_forked/vim-polyglot/syntax/python.vim	/^      let s:exs_re .= '|BlockingIOError|ChildProcessError|ConnectionError|BrokenPipeError|ConnectionAbortedError|ConnectionRefusedError|ConnectionResetError|FileExistsError|FileNotFoundError|InterruptedError|IsADirectoryError|NotADirectoryError|PermissionError|ProcessLookupError|TimeoutError|StopAsyncIteration|ResourceWarning'$/;"	v
did_python_syn_inits	sources_non_forked/vim-polyglot/syntax/python.vim	/^    let did_python_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/python.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/python.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/python.vim	/^let b:current_syntax = 'python'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/applescript.vim	/^let b:current_syntax = "applescript"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/git.vim	/^let b:current_syntax = "git"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/coffee.vim	/^  let b:current_syntax = 'coffee'$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^  let main_syntax = 'eruby'$/;"	v
g:eruby_default_subtype	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^.\\{-\\}\\ze\\.eruby\\>')$/;"	v
s:lines	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\|\\.example\\)\\+$','',''),'\\.\\zs\\w\\+\\%(\\ze+\\w\\+\\)\\=$')$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_nest_level	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(&filetype,'\\C\\<eruby\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_nest_level	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_nest_level	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_nest_level = 1$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/eruby.vim	/^let b:current_syntax = matchstr(&syntax, '^.*\\<eruby\\>')$/;"	v
HtmlHiLink	sources_non_forked/vim-polyglot/syntax/markdown.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
HtmlHiLink	sources_non_forked/vim-polyglot/syntax/markdown.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
s:conceal	sources_non_forked/vim-polyglot/syntax/markdown.vim	/^let s:conceal = ''$/;"	v
s:concealends	sources_non_forked/vim-polyglot/syntax/markdown.vim	/^let s:concealends = ''$/;"	v
s:conceal	sources_non_forked/vim-polyglot/syntax/markdown.vim	/^  let s:conceal = ' conceal'$/;"	v
s:concealends	sources_non_forked/vim-polyglot/syntax/markdown.vim	/^  let s:concealends = ' concealends'$/;"	v
s:oneline	sources_non_forked/vim-polyglot/syntax/markdown.vim	/^    let s:oneline = ''$/;"	v
s:oneline	sources_non_forked/vim-polyglot/syntax/markdown.vim	/^    let s:oneline = ' oneline'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/markdown.vim	/^let b:current_syntax = "mkd"$/;"	v
did_racket_syntax_inits	sources_non_forked/vim-polyglot/syntax/racket.vim	/^    let did_racket_syntax_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/racket.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/racket.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/racket.vim	/^let b:current_syntax = "racket"$/;"	v
b:Xsl_SyntaxFold_by	sources_non_forked/vim-polyglot/syntax/xsl.vim	/^	let b:Xsl_SyntaxFold_by=''$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/xsl.vim	/^let b:current_syntax = "xsl"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/godebugvariables.vim	/^let b:current_syntax = "godebugvariables"$/;"	v
carp_syntax_init	sources_non_forked/vim-polyglot/syntax/carp.vim	/^    let carp_syntax_init = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/carp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/carp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/carp.vim	/^let b:current_syntax = "carp"$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/syntax/erlang.vim	/^let s:cpo_save = &cpo$/;"	v
b:erlang_syntax_synced	sources_non_forked/vim-polyglot/syntax/erlang.vim	/^let b:erlang_syntax_synced = 1$/;"	v
s:old_style	sources_non_forked/vim-polyglot/syntax/erlang.vim	/^let s:old_style = (exists("g:erlang_old_style_highlight") &&$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/erlang.vim	/^let b:current_syntax = "erlang"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/jinja2.vim	/^  let main_syntax = 'jinja2'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/jinja2.vim	/^let b:current_syntax = ''$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/jinja2.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/jinja2.vim	/^let b:current_syntax = "jinja2"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/ferm.vim	/^  let main_syntax = 'ferm'$/;"	v
FermHiLink	sources_non_forked/vim-polyglot/syntax/ferm.vim	/^  command! -nargs=+ FermHiLink highlight link <args>$/;"	c
FermHiLink	sources_non_forked/vim-polyglot/syntax/ferm.vim	/^  command! -nargs=+ FermHiLink highlight default link <args>$/;"	c
g:Ferm_SpecialDelimiters	sources_non_forked/vim-polyglot/syntax/ferm.vim	/^    let   g:Ferm_SpecialDelimiters = g:fermSpecialDelimiters$/;"	v
s:Ferm_SpecialDelimiters	sources_non_forked/vim-polyglot/syntax/ferm.vim	/^    let s:Ferm_SpecialDelimiters = g:Ferm_SpecialDelimiters$/;"	v
s:Ferm_SpecialDelimiters	sources_non_forked/vim-polyglot/syntax/ferm.vim	/^    let s:Ferm_SpecialDelimiters = 0$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/ferm.vim	/^let b:current_syntax = "ferm"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/lua.vim	/^  let main_syntax = 'lua'$/;"	v
FoldableRegion	sources_non_forked/vim-polyglot/syntax/lua.vim	/^function! s:FoldableRegion(tag, name, expr)$/;"	f
did_lua_syn_inits	sources_non_forked/vim-polyglot/syntax/lua.vim	/^    let did_lua_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/lua.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/lua.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/lua.vim	/^let b:current_syntax = "lua"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/groovy.vim	/^  let main_syntax='groovy'$/;"	v
GroovyHiLink	sources_non_forked/vim-polyglot/syntax/groovy.vim	/^  command! -nargs=+ GroovyHiLink hi link <args>$/;"	c
GroovyHiLink	sources_non_forked/vim-polyglot/syntax/groovy.vim	/^  command! -nargs=+ GroovyHiLink hi def link <args>$/;"	c
groovy_minlines	sources_non_forked/vim-polyglot/syntax/groovy.vim	/^  let groovy_minlines = 10$/;"	v
did_groovy_syn_inits	sources_non_forked/vim-polyglot/syntax/groovy.vim	/^    let did_groovy_syn_inits = 1$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/groovy.vim	/^let b:current_syntax = "groovy"$/;"	v
b:spell_options	sources_non_forked/vim-polyglot/syntax/groovy.vim	/^let b:spell_options="contained"$/;"	v
did_ps1_syn_inits	sources_non_forked/vim-polyglot/syntax/ps1.vim	/^		let did_ps1_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/ps1.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/ps1.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/ps1.vim	/^let b:current_syntax = "ps1"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/gitsendemail.vim	/^let b:current_syntax = "gitsendemail"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/liquid.vim	/^  let main_syntax = 'liquid'$/;"	v
g:liquid_default_subtype	sources_non_forked/vim-polyglot/syntax/liquid.vim	/^  let g:liquid_default_subtype = 'html'$/;"	v
s:lines	sources_non_forked/vim-polyglot/syntax/liquid.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:liquid_subtype	sources_non_forked/vim-polyglot/syntax/liquid.vim	/^  let b:liquid_subtype = matchstr(s:lines,'liquid_subtype=\\zs\\w\\+')$/;"	v
b:liquid_subtype	sources_non_forked/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = matchstr(&filetype,'^liquid\\.\\zs\\w\\+')$/;"	v
b:liquid_subtype	sources_non_forked/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = matchstr(substitute(expand('%:t'),'\\c\\%(\\.liquid\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:liquid_subtype	sources_non_forked/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = g:liquid_default_subtype$/;"	v
g:liquid_highlight_types	sources_non_forked/vim-polyglot/syntax/liquid.vim	/^  let g:liquid_highlight_types = []$/;"	v
s:subtype	sources_non_forked/vim-polyglot/syntax/liquid.vim	/^  let s:subtype = exists('b:liquid_subtype') ? b:liquid_subtype : ''$/;"	v
b:	sources_non_forked/vim-polyglot/syntax/liquid.vim	/^      let b:{matchstr(s:type,'[^.]*')}_subtype = matchstr(s:type,'\\.\\zs.*')$/;"	v
b:liquid_subtype	sources_non_forked/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = s:subtype$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/liquid.vim	/^let b:current_syntax = 'liquid'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/xs.vim	/^let b:current_syntax = "xs"$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/syntax/elixir.vim	/^let s:cpo_save = &cpo$/;"	v
g:elixir_use_markdown_for_docs	sources_non_forked/vim-polyglot/syntax/elixir.vim	/^  let g:elixir_use_markdown_for_docs = 0$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/elixir.vim	/^let b:current_syntax = "elixir"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/kotlin.vim	/^let b:current_syntax = "kotlin"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/mason.vim	/^	let main_syntax = 'mason'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/mason.vim	/^let b:current_syntax = "mason"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/fish.vim	/^let b:current_syntax = 'fish'$/;"	v
CheckForFunctions	sources_non_forked/vim-polyglot/syntax/octave.vim	/^function! s:CheckForFunctions()$/;"	f
did_octave_syntax_inits	sources_non_forked/vim-polyglot/syntax/octave.vim	/^    let did_octave_syntax_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/octave.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/octave.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/octave.vim	/^let b:current_syntax = "octave"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/ember-script.vim	/^let b:current_syntax = 'ember-script'$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/qml.vim	/^  let main_syntax = 'qml'$/;"	v
did_qml_syn_inits	sources_non_forked/vim-polyglot/syntax/qml.vim	/^    let did_qml_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/qml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/qml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/qml.vim	/^let b:current_syntax = "qml"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/terraform.vim	/^let b:current_syntax = "terraform"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/vimgo.vim	/^let b:current_syntax = "vimgo"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/gitrebase.vim	/^let b:current_syntax = "gitrebase"$/;"	v
g:main_syntax	sources_non_forked/vim-polyglot/syntax/gohtmltmpl.vim	/^  let g:main_syntax = 'html'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/gohtmltmpl.vim	/^let b:current_syntax = "gohtmltmpl"$/;"	v
b:mako_outer_lang	sources_non_forked/vim-polyglot/syntax/mako.vim	/^    let b:mako_outer_lang = g:mako_default_outer_lang$/;"	v
b:mako_outer_lang	sources_non_forked/vim-polyglot/syntax/mako.vim	/^    let b:mako_outer_lang = "html"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/mako.vim	/^  let main_syntax = b:mako_outer_lang$/;"	v
did_mako_syn_inits	sources_non_forked/vim-polyglot/syntax/mako.vim	/^    let did_mako_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/mako.vim	/^    com -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/mako.vim	/^    com -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/mako.vim	/^let b:current_syntax = b:mako_outer_lang$/;"	v
did_ocaml_syntax_inits	sources_non_forked/vim-polyglot/syntax/ocaml.vim	/^    let did_ocaml_syntax_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/ocaml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/ocaml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/ocaml.vim	/^let b:current_syntax = "ocaml"$/;"	v
cry_minlines	sources_non_forked/vim-polyglot/syntax/cryptol.vim	/^  let cry_minlines = 50$/;"	v
did_cry_syntax_inits	sources_non_forked/vim-polyglot/syntax/cryptol.vim	/^    let did_cry_syntax_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/cryptol.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/cryptol.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/cryptol.vim	/^let b:current_syntax = "cryptol"$/;"	v
g:main_syntax	sources_non_forked/vim-polyglot/syntax/dart.vim	/^  let g:main_syntax = 'dart'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/dart.vim	/^let b:current_syntax = "dart"$/;"	v
b:spell_options	sources_non_forked/vim-polyglot/syntax/dart.vim	/^let b:spell_options = "contained"$/;"	v
did_pgsql_syn_inits	sources_non_forked/vim-polyglot/syntax/pgsql.vim	/^    let did_pgsql_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/pgsql.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/pgsql.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/pgsql.vim	/^let b:current_syntax = "pgsql"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/gotexttmpl.vim	/^let b:current_syntax = "gotexttmpl"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/godebugoutput.vim	/^let b:current_syntax = "godebugoutput"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/tmux.vim	/^let b:current_syntax = 'tmux'$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/blade.vim	/^    let main_syntax = 'blade'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/blade.vim	/^let b:current_syntax = 'blade'$/;"	v
d	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  function! s:d(x)$/;"	f
d	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  function! s:d(x)$/;"	f
b:julia_syntax_version	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let b:julia_syntax_version = get(g:, "default_julia_version", "current")$/;"	v
b:julia_syntax_highlight_deprecated	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let b:julia_syntax_highlight_deprecated = get(g:, "julia_syntax_highlight_deprecated", 0)$/;"	v
b:julia_syntax_version	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let b:julia_syntax_version = 6$/;"	v
b:julia_syntax_version	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let b:julia_syntax_version = 7$/;"	v
b:julia_syntax_version	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let b:julia_syntax_version = 5$/;"	v
b:julia_syntax_version	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let b:julia_syntax_version = 6$/;"	v
s:julia_spellcheck_strings	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:julia_spellcheck_strings = get(g:, "julia_spellcheck_strings", 0)$/;"	v
s:julia_spellcheck_docstrings	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:julia_spellcheck_docstrings = get(g:, "julia_spellcheck_docstrings", 1)$/;"	v
s:julia_spellcheck_comments	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:julia_spellcheck_comments = get(g:, "julia_spellcheck_comments", 1)$/;"	v
s:julia_highlight_operators	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:julia_highlight_operators = get(g:, "julia_highlight_operators", 1)$/;"	v
s:nonid_chars	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:nonid_chars = "\\U01-\\U07" . "\\U0E-\\U1F" .$/;"	v
s:nonidS_chars	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:nonidS_chars = "[:space:])\\\\U5D}" . s:nonid_chars$/;"	v
s:uniop_chars	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:uniop_chars = "+\\\\U2D~¬√∛∜"$/;"	v
s:binop_chars	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:binop_chars = "=+\\\\U2D*\/\\\\%÷^&|⊻<>≤≥≡≠≢∈∉⋅×∪∩⊆⊈⊂⊄⊊←→∋∌⊕⊖⊞⊟∘∧⊗⊘↑↓∨⊠±"$/;"	v
s:binop_chars_extra	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:binop_chars_extra = "\\\\U214B\\\\U2190-\\\\U2194\\\\U219A\\\\U219B\\\\U21A0\\\\U21A3\\\\U21A6\\\\U21AE\\\\U21CE\\\\U21CF\\\\U21D2\\\\U21D4\\\\U21F4-\\\\U21FF\\\\U2208-\\\\U220D\\\\U2213\\\\U2214\\\\U2217-\\\\U2219\\\\U221D\\\\U2224-\\\\U222A\\\\U2237\\\\U2238\\\\U223A\\\\U223B\\\\U223D\\\\U223E\\\\U2240-\\\\U228B\\\\U228D-\\\\U229C\\\\U229E-\\\\U22A3\\\\U22A9\\\\U22AC\\\\U22AE\\\\U22B0-\\\\U22B7\\\\U22BB-\\\\U22BD\\\\U22C4-\\\\U22C7\\\\U22C9-\\\\U22D3\\\\U22D5-\\\\U22ED\\\\U22F2-\\\\U22FF\\\\U25B7\\\\U27C8\\\\U27C9\\\\U27D1\\\\U27D2\\\\U27D5-\\\\U27D7\\\\U27F0\\\\U27F1\\\\U27F5-\\\\U27F7\\\\U27F7\\\\U27F9-\\\\U27FF\\\\U2900-\\\\U2918\\\\U291D-\\\\U2920\\\\U2944-\\\\U2970\\\\U29B7\\\\U29B8\\\\U29BC\\\\U29BE-\\\\U29C1\\\\U29E1\\\\U29E3-\\\\U29E5\\\\U29F4\\\\U29F6\\\\U29F7\\\\U29FA\\\\U29FB\\\\U2A07\\\\U2A08\\\\U2A1D\\\\U2A22-\\\\U2A2E\\\\U2A30-\\\\U2A3D\\\\U2A40-\\\\U2A45\\\\U2A4A-\\\\U2A58\\\\U2A5A-\\\\U2A63\\\\U2A66\\\\U2A67\\\\U2A6A-\\\\U2AD9\\\\U2ADB\\\\U2AF7-\\\\U2AFA\\\\U2B30-\\\\U2B44\\\\U2B47-\\\\U2B4C\\\\UFFE9-\\\\UFFEC"$/;"	v
s:idregex	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:idregex = '\\%([^' . s:nonidS_chars . '0-9!?' . s:uniop_chars . s:binop_chars . '][^' . s:nonidS_chars . s:uniop_chars . s:binop_chars . s:binop_chars_extra . ']*\\|\\<?\\>\\)'$/;"	v
s:operators	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:operators = '\\%(' . '\\.\\%([-+*\/^÷%|&!]\\|\/\/\\|\\\\\\|<<\\|>>>\\?\\)\\?=' .$/;"	v
s:keywords	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let s:keywords = '\\<\\%(return\\|local\\|global\\|import\\%(all\\)\\?\\|export\\|using\\|const\\|where\\)\\>'$/;"	v
s:infixkeywords	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let s:infixkeywords = '\\<\\%(in\\|isa\\)\\>'$/;"	v
s:keywords	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let s:keywords = '\\<\\%(return\\|local\\|global\\|import\\%(all\\)\\?\\|export\\|using\\|const\\)\\>'$/;"	v
s:infixkeywords	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let s:infixkeywords = '\\<\\%(in\\)\\>'$/;"	v
s:dec_regex	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:dec_regex = '\\d\\%(_\\?\\d\\)*\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:hex_regex	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:hex_regex = '0x\\x\\%(_\\?\\x\\)*\\%(\\>\\|im\\>\\|\\ze\\X\\)'$/;"	v
s:bin_regex	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:bin_regex = '0b[01]\\%(_\\?[01]\\)*\\%(\\>\\|im\\>\\|\\ze[^01]\\)'$/;"	v
s:oct_regex	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:oct_regex = '0o\\o\\%(_\\?\\o\\)*\\%(\\>\\|im\\>\\|\\ze\\O\\)'$/;"	v
s:int_regex	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:int_regex = '\\%(' . s:hex_regex .$/;"	v
s:float_regex1	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:float_regex1 = '\\.\\d\\%(_\\?\\d\\)*\\%([eEf][-+]\\?\\d\\+\\)\\?\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:float_regex2	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:float_regex2 = '\\d\\%(_\\?\\d\\)*\\.\\%(\\d\\%(_\\?\\d\\)*\\)\\?\\%([eEf][-+]\\?\\d\\+\\)\\?\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:float_regex3	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:float_regex3 = '\\d\\%(_\\?\\d\\)*[eEf][-+]\\?\\d\\+\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:hexfloat_regex1	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:hexfloat_regex1 = '0x\\.\\%\\(\\x\\%(_\\?\\x\\)*\\)\\?[pP][-+]\\?\\d\\+\\%(\\>\\|im\\>\\|\\ze\\X\\)'$/;"	v
s:hexfloat_regex2	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:hexfloat_regex2 = '0x\\x\\%(_\\?\\x\\)*\\%\\(\\.\\%\\(\\x\\%(_\\?\\x\\)*\\)\\?\\)\\?[pP][-+]\\?\\d\\+\\%(\\>\\|im\\>\\|\\ze\\X\\)'$/;"	v
s:float_regex	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:float_regex = '\\%(' . s:float_regex3 .$/;"	v
s:interp_dollar	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:interp_dollar = '\\([' . s:nonidS_chars . s:uniop_chars . s:binop_chars . '!?]\\|^\\)\\@'.s:d(1).'<=\\$'$/;"	v
s:quotable	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:quotable = '\\%(' . s:idregex . '\\|?\\|' . s:operators . '\\|' . s:float_regex . '\\|' . s:int_regex . '\\)'$/;"	v
s:quoting_colon	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:quoting_colon = '\\%(\\%(^\\s*\\|\\s\\{6,\\}\\|[' . s:nonid_chars . s:uniop_chars . s:binop_chars . '?]\\s*\\)\\@'.s:d(6).'<=\\|\\%(\\<\\%(return\\|if\\|else\\%(if\\)\\?\\|while\\|try\\|begin\\)\\s*\\)\\@'.s:d(9).'<=\\)\\zs:'$/;"	v
s:quoting_colonS	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let s:quoting_colonS = '\\s\\@'.s:d(1).'<=:'$/;"	v
h	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let h = b:julia_syntax_version >= 6 ? "Type" : "NONE"$/;"	v
h	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let h = b:julia_syntax_version == 5 ? "Type" : b:julia_syntax_version == 6 ? "juliaDeprecated" : "NONE"$/;"	v
h	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let h = b:julia_syntax_version <= 6 ? "Type" : "juliaDeprecated"$/;"	v
h	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let h = b:julia_syntax_version >= 7 ? "Type" : "NONE"$/;"	v
h	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let h = b:julia_syntax_version <= 6 ? "Constant" : "NONE"$/;"	v
h	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let h = b:julia_syntax_version >= 7 ? "Constant" : "NONE"$/;"	v
h	sources_non_forked/vim-polyglot/syntax/julia.vim	/^  let h = b:julia_syntax_version >= 7 ? "Constant" : "NONE"$/;"	v
h	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let h = b:julia_syntax_version < 7 ? "Constant" : "juliaDeprecated"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/julia.vim	/^let b:current_syntax = "julia"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/systemd.vim	/^let b:current_syntax = "systemd"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/caddyfile.vim	/^let b:current_syntax = "caddyfile"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/php.vim	/^  let main_syntax = 'php'$/;"	v
s:iskeyword_save	sources_non_forked/vim-polyglot/syntax/php.vim	/^let s:iskeyword_save = &iskeyword$/;"	v
php_html_load	sources_non_forked/vim-polyglot/syntax/php.vim	/^  let php_html_load=1$/;"	v
php_html_in_heredoc	sources_non_forked/vim-polyglot/syntax/php.vim	/^    let php_html_in_heredoc=1$/;"	v
php_html_in_nowdoc	sources_non_forked/vim-polyglot/syntax/php.vim	/^    let php_html_in_nowdoc=1$/;"	v
php_html_in_strings	sources_non_forked/vim-polyglot/syntax/php.vim	/^  let php_html_in_strings=0$/;"	v
php_html_in_heredoc	sources_non_forked/vim-polyglot/syntax/php.vim	/^  let php_html_in_heredoc=0$/;"	v
php_html_in_nowdoc	sources_non_forked/vim-polyglot/syntax/php.vim	/^  let php_html_in_nowdoc=0$/;"	v
php_sync_method	sources_non_forked/vim-polyglot/syntax/php.vim	/^    let php_sync_method=php_minlines$/;"	v
php_sync_method	sources_non_forked/vim-polyglot/syntax/php.vim	/^    let php_sync_method=-1$/;"	v
php_sql_heredoc	sources_non_forked/vim-polyglot/syntax/php.vim	/^  let php_sql_heredoc=1$/;"	v
php_sql_nowdoc	sources_non_forked/vim-polyglot/syntax/php.vim	/^  let php_sql_nowdoc=1$/;"	v
b:sql_type_override	sources_non_forked/vim-polyglot/syntax/php.vim	/^    let b:sql_type_override='mysql'$/;"	v
php_folding	sources_non_forked/vim-polyglot/syntax/php.vim	/^  let php_folding = 0$/;"	v
php_phpdoc_folding	sources_non_forked/vim-polyglot/syntax/php.vim	/^  let php_phpdoc_folding = 0$/;"	v
SynFold	sources_non_forked/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFold <args> fold$/;"	c
SynFold	sources_non_forked/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFold <args>$/;"	c
SynFoldDoc	sources_non_forked/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFoldDoc <args> fold$/;"	c
SynFoldDoc	sources_non_forked/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFoldDoc <args>$/;"	c
g:php_syntax_extensions_enabled	sources_non_forked/vim-polyglot/syntax/php.vim	/^    let g:php_syntax_extensions_enabled = ["bcmath", "bz2", "core", "curl", "date", "dom", "ereg", "gd", "gettext", "hash", "iconv", "json", "libxml", "mbstring", "mcrypt", "mhash", "mysql", "mysqli", "openssl", "pcre", "pdo", "pgsql", "phar", "reflection", "session", "simplexml", "soap", "sockets", "spl", "sqlite3", "standard", "tokenizer", "wddx", "xml", "xmlreader", "xmlwriter", "zip", "zlib"]$/;"	v
g:php_syntax_extensions_disabled	sources_non_forked/vim-polyglot/syntax/php.vim	/^    let g:php_syntax_extensions_disabled = []$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/php.vim	/^let b:current_syntax = "php"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/slim.vim	/^  let main_syntax = 'slim'$/;"	v
b:ruby_no_expensive	sources_non_forked/vim-polyglot/syntax/slim.vim	/^let b:ruby_no_expensive = 1$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/slim.vim	/^let b:current_syntax = "slim"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/stylus.vim	/^  let main_syntax = 'css'$/;"	v
did_css_syn_inits	sources_non_forked/vim-polyglot/syntax/stylus.vim	/^    let did_css_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/stylus.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/stylus.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/stylus.vim	/^let b:current_syntax = "stylus"$/;"	v
did_cql_syn_inits	sources_non_forked/vim-polyglot/syntax/cql.vim	/^    let did_cql_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/cql.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/cql.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/cql.vim	/^let b:current_syntax = "cql"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/rnoweb.vim	/^let   b:current_syntax = "rnoweb"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/opencl.vim	/^let b:current_syntax = "opencl"$/;"	v
did_rhelp_syntax_inits	sources_non_forked/vim-polyglot/syntax/rhelp.vim	/^    let did_rhelp_syntax_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/rhelp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/rhelp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/rhelp.vim	/^let   b:current_syntax = "rhelp"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/typescript.vim	/^  let main_syntax = "typescript"$/;"	v
did_typescript_syn_inits	sources_non_forked/vim-polyglot/syntax/typescript.vim	/^    let did_typescript_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/typescript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/typescript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/typescript.vim	/^let b:current_syntax = "typescript"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/gitcommit.vim	/^let b:current_syntax = "gitcommit"$/;"	v
s:vala_cpo_save	sources_non_forked/vim-polyglot/syntax/vala.vim	/^let s:vala_cpo_save = &cpo$/;"	v
b:vala_minlines	sources_non_forked/vim-polyglot/syntax/vala.vim	/^  let b:vala_minlines = vala_minlines$/;"	v
b:vala_minlines	sources_non_forked/vim-polyglot/syntax/vala.vim	/^  let b:vala_minlines = 50$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/vala.vim	/^let b:current_syntax = "vala"$/;"	v
b:main_syntax	sources_non_forked/vim-polyglot/syntax/twig.vim	/^  let b:main_syntax = b:current_syntax$/;"	v
b:main_syntax	sources_non_forked/vim-polyglot/syntax/twig.vim	/^  let b:main_syntax = 'twig'$/;"	v
did_twig_syn_inits	sources_non_forked/vim-polyglot/syntax/twig.vim	/^    let did_twig_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/twig.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/twig.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/gitconfig.vim	/^let b:current_syntax = "gitconfig"$/;"	v
s:keepcpo	sources_non_forked/vim-polyglot/syntax/cucumber.vim	/^let s:keepcpo= &cpo$/;"	v
g:cucumber_languages	sources_non_forked/vim-polyglot/syntax/cucumber.vim	/^let g:cucumber_languages = {$/;"	v
pattern	sources_non_forked/vim-polyglot/syntax/cucumber.vim	/^function! s:pattern(key)$/;"	f
Add	sources_non_forked/vim-polyglot/syntax/cucumber.vim	/^function! s:Add(name)$/;"	f
b:current_syntax	sources_non_forked/vim-polyglot/syntax/cucumber.vim	/^let b:current_syntax = "cucumber"$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/syntax/c.vim	/^let s:cpo_save = &cpo$/;"	v
s:ft	sources_non_forked/vim-polyglot/syntax/c.vim	/^let s:ft = matchstr(&ft, '^\\([^.]\\)\\+')$/;"	v
b:c_minlines	sources_non_forked/vim-polyglot/syntax/c.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	sources_non_forked/vim-polyglot/syntax/c.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	sources_non_forked/vim-polyglot/syntax/c.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/c.vim	/^let b:current_syntax = "c"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/toml.vim	/^let b:current_syntax = "toml"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/godebugstacktrace.vim	/^let b:current_syntax = "godebugoutput"$/;"	v
did_txt_syn_inits	sources_non_forked/vim-polyglot/syntax/textile.vim	/^        let did_txt_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/textile.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/textile.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
did_proto_syn_inits	sources_non_forked/vim-polyglot/syntax/proto.vim	/^    let did_proto_syn_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/proto.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/proto.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/proto.vim	/^let b:current_syntax = "proto"$/;"	v
CommentKeywordMatch	sources_non_forked/vim-polyglot/syntax/swift.vim	/^function! s:CommentKeywordMatch(keyword)$/;"	f
b:current_syntax	sources_non_forked/vim-polyglot/syntax/swift.vim	/^let b:current_syntax = "swift"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/less.vim	/^let b:current_syntax = "less"$/;"	v
s:cpo_sav	sources_non_forked/vim-polyglot/syntax/clojure.vim	/^let s:cpo_sav = &cpo$/;"	v
s:clojure_syntax_keywords	sources_non_forked/vim-polyglot/syntax/clojure.vim	/^let s:clojure_syntax_keywords = {$/;"	v
syntax_keyword	sources_non_forked/vim-polyglot/syntax/clojure.vim	/^function! s:syntax_keyword(dict)$/;"	f
s:radix_chars	sources_non_forked/vim-polyglot/syntax/clojure.vim	/^let s:radix_chars = "0123456789abcdefghijklmnopqrstuvwxyz"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/clojure.vim	/^let b:current_syntax = "clojure"$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^  let main_syntax = 'eelixir'$/;"	v
g:eelixir_default_subtype	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
s:lines	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.eelixir\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/eelixir.vim	/^let b:current_syntax = 'eelixir'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/vifm.vim	/^let b:current_syntax = 'vifm'$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/syntax/vifm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	sources_non_forked/vim-polyglot/syntax/pod.vim	/^let s:cpo_save = &cpo$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/pod.vim	/^let b:current_syntax = "pod"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/ansible.vim	/^  let main_syntax = 'yaml'$/;"	v
s:current_syntax	sources_non_forked/vim-polyglot/syntax/ansible.vim	/^  let s:current_syntax=b:current_syntax$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/ansible.vim	/^  let b:current_syntax=s:current_syntax$/;"	v
s:yamlKey	sources_non_forked/vim-polyglot/syntax/ansible.vim	/^  let s:yamlKey = g:ansible_yamlKeyName$/;"	v
s:yamlKey	sources_non_forked/vim-polyglot/syntax/ansible.vim	/^  let s:yamlKey = "yamlBlockMappingKey"$/;"	v
attribute_highlight	sources_non_forked/vim-polyglot/syntax/ansible.vim	/^fun! s:attribute_highlight(attributes)$/;"	f
b:current_syntax	sources_non_forked/vim-polyglot/syntax/ansible.vim	/^let b:current_syntax = "ansible"$/;"	v
s:keepcpo	sources_non_forked/vim-polyglot/syntax/cmake.vim	/^let s:keepcpo= &cpo$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/cmake.vim	/^let b:current_syntax = "cmake"$/;"	v
b:crystal_no_expensive	sources_non_forked/vim-polyglot/syntax/crystal.vim	/^  let b:crystal_no_expensive = 1$/;"	v
g:crystal_minlines	sources_non_forked/vim-polyglot/syntax/crystal.vim	/^    let g:crystal_minlines = 500$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/crystal.vim	/^let b:current_syntax = 'crystal'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/tt2js.vim	/^let b:current_syntax = "tt2js"$/;"	v
hi	sources_non_forked/vim-polyglot/syntax/go.vim	/^function! s:hi()$/;"	f
vim	sources_non_forked/vim-polyglot/syntax/go.vim	/^augroup vim-go-hi$/;"	a
b:current_syntax	sources_non_forked/vim-polyglot/syntax/go.vim	/^let b:current_syntax = "go"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/graphql.vim	/^let b:current_syntax = 'graphql'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/nginx.vim	/^let b:current_syntax = "nginx"$/;"	v
b:eruby_subtype	sources_non_forked/vim-polyglot/syntax/nginx.vim	/^let b:eruby_subtype = ''$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/nginx.vim	/^let b:current_syntax = "nginx"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/nginx.vim	/^let b:current_syntax = "nginx"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/nginx.vim	/^let b:current_syntax = "nginx"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/sxhkdrc.vim	/^let b:current_syntax = "sxhkdrc"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/asciidoc.vim	/^let b:current_syntax = "asciidoc"$/;"	v
s:cpo_orig	sources_non_forked/vim-polyglot/syntax/plantuml.vim	/^let s:cpo_orig=&cpo$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/plantuml.vim	/^let b:current_syntax = 'plantuml'$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/gmpl.vim	/^let b:current_syntax = "gmpl"$/;"	v
s:ps1xml_cpo_save	sources_non_forked/vim-polyglot/syntax/ps1xml.vim	/^let s:ps1xml_cpo_save = &cpo$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/ps1xml.vim	/^let b:current_syntax = "ps1xml"$/;"	v
main_syntax	sources_non_forked/vim-polyglot/syntax/haxe.vim	/^  let main_syntax='haxe'$/;"	v
HaxeHiLink	sources_non_forked/vim-polyglot/syntax/haxe.vim	/^  command! -nargs=+ HaxeHiLink hi link <args>$/;"	c
HaxeHiLink	sources_non_forked/vim-polyglot/syntax/haxe.vim	/^  command! -nargs=+ HaxeHiLink hi def link <args>$/;"	c
haxe_minlines	sources_non_forked/vim-polyglot/syntax/haxe.vim	/^  let haxe_minlines = 5000$/;"	v
did_haxe_syn_inits	sources_non_forked/vim-polyglot/syntax/haxe.vim	/^    let did_haxe_syn_inits = 1$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/haxe.vim	/^let b:current_syntax = "haxe"$/;"	v
b:spell_options	sources_non_forked/vim-polyglot/syntax/haxe.vim	/^let b:spell_options="contained"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/ansible_hosts.vim	/^let b:current_syntax = "ansible_hosts"$/;"	v
HtmlHiLink	sources_non_forked/vim-polyglot/syntax/mustache.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
HtmlHiLink	sources_non_forked/vim-polyglot/syntax/mustache.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/mustache.vim	/^let b:current_syntax = "mustache"$/;"	v
did_gnuplot_syntax_inits	sources_non_forked/vim-polyglot/syntax/gnuplot.vim	/^    let did_gnuplot_syntax_inits = 1$/;"	v
HiLink	sources_non_forked/vim-polyglot/syntax/gnuplot.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	sources_non_forked/vim-polyglot/syntax/gnuplot.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	sources_non_forked/vim-polyglot/syntax/gnuplot.vim	/^let b:current_syntax = "gnuplot"$/;"	v
b:current_syntax	sources_non_forked/vim-polyglot/syntax/json5.vim	/^  let b:current_syntax = 'json5'$/;"	v
current_compiler	sources_non_forked/vim-polyglot/compiler/credo.vim	/^let current_compiler = 'credo'$/;"	v
CompilerSet	sources_non_forked/vim-polyglot/compiler/credo.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
current_compiler	sources_non_forked/vim-polyglot/compiler/nim.vim	/^let current_compiler = "nim"$/;"	v
CompilerSet	sources_non_forked/vim-polyglot/compiler/nim.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cpo_save	sources_non_forked/vim-polyglot/compiler/nim.vim	/^let s:cpo_save = &cpo$/;"	v
current_compiler	sources_non_forked/vim-polyglot/compiler/haml.vim	/^let current_compiler = "haml"$/;"	v
CompilerSet	sources_non_forked/vim-polyglot/compiler/haml.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cpo_save	sources_non_forked/vim-polyglot/compiler/haml.vim	/^let s:cpo_save = &cpo$/;"	v
current_compiler	sources_non_forked/vim-polyglot/compiler/ruby.vim	/^let current_compiler = "ruby"$/;"	v
CompilerSet	sources_non_forked/vim-polyglot/compiler/ruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cpo_save	sources_non_forked/vim-polyglot/compiler/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
current_compiler	sources_non_forked/vim-polyglot/compiler/ls.vim	/^let current_compiler = 'ls'$/;"	v
s:pat	sources_non_forked/vim-polyglot/compiler/ls.vim	/^let s:pat = '^' . current_compiler$/;"	v
livescript_compiler	sources_non_forked/vim-polyglot/compiler/ls.vim	/^  let livescript_compiler = 'lsc'$/;"	v
livescript_make_options	sources_non_forked/vim-polyglot/compiler/ls.vim	/^  let livescript_make_options = ''$/;"	v
GetMakePrg	sources_non_forked/vim-polyglot/compiler/ls.vim	/^function! s:GetMakePrg()$/;"	f
SetMakePrg	sources_non_forked/vim-polyglot/compiler/ls.vim	/^function! s:SetMakePrg()$/;"	f
LiveScriptMake	sources_non_forked/vim-polyglot/compiler/ls.vim	/^command! -bang -bar -nargs=* LiveScriptMake make<bang> <args>$/;"	c
LiveScriptUpdateMakePrg	sources_non_forked/vim-polyglot/compiler/ls.vim	/^augroup LiveScriptUpdateMakePrg$/;"	a
UpdateMakePrg	sources_non_forked/vim-polyglot/compiler/ls.vim	/^  function! s:UpdateMakePrg()$/;"	f
current_compiler	sources_non_forked/vim-polyglot/compiler/python.vim	/^let current_compiler = "python"$/;"	v
CompilerSet	sources_non_forked/vim-polyglot/compiler/python.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
$PYTHONWARNINGS	sources_non_forked/vim-polyglot/compiler/python.vim	/^  let $PYTHONWARNINGS="ignore"$/;"	v
current_compiler	sources_non_forked/vim-polyglot/compiler/exunit.vim	/^let current_compiler = "exunit"$/;"	v
CompilerSet	sources_non_forked/vim-polyglot/compiler/exunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cpo_save	sources_non_forked/vim-polyglot/compiler/exunit.vim	/^let s:cpo_save = &cpo$/;"	v
current_compiler	sources_non_forked/vim-polyglot/compiler/rspec.vim	/^let current_compiler = "rspec"$/;"	v
CompilerSet	sources_non_forked/vim-polyglot/compiler/rspec.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cpo_save	sources_non_forked/vim-polyglot/compiler/rspec.vim	/^let s:cpo_save = &cpo$/;"	v
current_compiler	sources_non_forked/vim-polyglot/compiler/coffee.vim	/^let current_compiler = 'coffee'$/;"	v
s:pat	sources_non_forked/vim-polyglot/compiler/coffee.vim	/^let s:pat = '^' . current_compiler$/;"	v
GetMakePrg	sources_non_forked/vim-polyglot/compiler/coffee.vim	/^function! s:GetMakePrg()$/;"	f
SetMakePrg	sources_non_forked/vim-polyglot/compiler/coffee.vim	/^function! s:SetMakePrg()$/;"	f
CoffeeMakeDeprecated	sources_non_forked/vim-polyglot/compiler/coffee.vim	/^function! s:CoffeeMakeDeprecated(bang, args)$/;"	f
CoffeeMake	sources_non_forked/vim-polyglot/compiler/coffee.vim	/^command! -bang -bar -nargs=* CoffeeMake$/;"	c
CoffeeUpdateMakePrg	sources_non_forked/vim-polyglot/compiler/coffee.vim	/^augroup CoffeeUpdateMakePrg$/;"	a
UpdateMakePrg	sources_non_forked/vim-polyglot/compiler/coffee.vim	/^  function! s:UpdateMakePrg()$/;"	f
current_compiler	sources_non_forked/vim-polyglot/compiler/eruby.vim	/^let current_compiler = "eruby"$/;"	v
CompilerSet	sources_non_forked/vim-polyglot/compiler/eruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
s:cpo_save	sources_non_forked/vim-polyglot/compiler/eruby.vim	/^let s:cpo_save = &cpo$/;"	v
current_compiler	sources_non_forked/vim-polyglot/compiler/cake.vim	/^let current_compiler = 'cake'$/;"	v
current_compiler	sources_non_forked/vim-polyglot/compiler/mix.vim	/^let current_compiler = 'mix'$/;"	v
CompilerSet	sources_non_forked/vim-polyglot/compiler/mix.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
current_compiler	sources_non_forked/vim-polyglot/compiler/fish.vim	/^let current_compiler = 'fish'$/;"	v
